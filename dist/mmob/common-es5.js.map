{"version":3,"sources":["webpack:///src/app/layout/layout.module.ts","webpack:///src/app/shared/constant/storage-constants.ts","webpack:///src/app/shared/validators/custom-validators.ts","webpack:///src/app/shared/services/helper-services/common.service.ts","webpack:///src/app/service/fields-validate.service.ts","webpack:///src/app/core/services/local-data.service.ts"],"names":["LayoutModule","declarations","imports","exports","StorageConstants","X_ACCESS_TOKEN","X_EMAIL","CustomValidators","c","re","value","numbers","test","String","toLowerCase","validateEmail","validatePassword","regex","error","control","valid","CommonService","storage","localStorage","getItem","data","setItem","removeItem","email","providedIn","FieldsValidateService","formGroup","Object","keys","controls","forEach","field","get","invalid","markAsDirty","onlySelf","validateAllFormFields","subFields","subcontrol","LocalDataService","images","allBanks"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAcaA,Y;;;;;cAAAA;;;;2BAAAA,Y;AAAY,S;AAAA,kBAHd,CAAC,4DAAD,EAAe,kEAAf,EAA6B,4DAA7B,CAGc;;;;4HAAZA,Y,EAAY;AAAA,yBAJR,wEAIQ,EAJS,wEAIT,EAJ0B,2EAI1B,EAJ4C,yFAI5C;AAJgE,oBAC7E,4DAD6E,EAC/D,kEAD+D,EACjD,4DADiD,CAIhE;AAH+B,oBAC5C,wEAD4C,EAC3B,wEAD2B,EACV,2EADU,EACQ,yFADR;AAG/B,S;AAF2D,O;;;;;wEAEvEA,Y,EAAY;gBALxB,sDAKwB;iBALf;AACRC,wBAAY,EAAE,CAAC,wEAAD,EAAkB,wEAAlB,EAAmC,2EAAnC,EAAqD,yFAArD,CADN;AAERC,mBAAO,EAAE,CAAC,4DAAD,EAAe,kEAAf,EAA6B,4DAA7B,CAFD;AAGRC,mBAAO,EAAE,CAAC,wEAAD,EAAkB,wEAAlB,EAAmC,2EAAnC,EAAqD,yFAArD;AAHD,W;AAKe,U;;;;;;;;;;;;;;;;;;ACdzB;AAAA;;;AAAA;AAAA;AAAA;;UAAaC,gB;;;;AACJ,uBAAAC,cAAA,GAAiB,4GAAjB;AACA,uBAAAC,OAAA,GAAU,SAAV;;;;;;;;;;;;;;;;ACAT;AAAA;;;AAAA;AAAA;AAAA;;UAAaC,gB;;;;;;;gDAEkBC,C,EAAc;AACzC,gBAAIC,EAAE,GAAG,yJAAT;;AACA,gBAAID,CAAC,CAACE,KAAF,KAAY,IAAZ,IAAoBF,CAAC,CAACE,KAAF,KAAY,EAApC,EAAwC;AACtC,kBAAMC,OAAO,GAAG,UAAhB;;AACA,kBAAIF,EAAE,CAACG,IAAH,CAAQC,MAAM,CAACL,CAAC,CAACE,KAAH,CAAN,CAAgBI,WAAhB,EAAR,CAAJ,EAA4C;AAC1C,uBAAO,IAAP;AACD,eAFD,MAEO;AACL,uBAAO;AAACC,+BAAa,EAAE;AAAhB,iBAAP;AACD;AACF,aAPD,MAOO;AACL,qBAAO,IAAP;AACD;AACF;;;mDAE+BP,C,EAAc;AAE5C,gBAAIC,EAAE,GAAG,6EAAT;;AACA,gBAAID,CAAC,CAACE,KAAF,KAAY,IAAZ,IAAoBF,CAAC,CAACE,KAAF,KAAY,EAApC,EAAwC;AACtC,kBAAMC,OAAO,GAAG,UAAhB;;AACA,kBAAIF,EAAE,CAACG,IAAH,CAAQC,MAAM,CAACL,CAAC,CAACE,KAAH,CAAd,CAAJ,EAA8B;AAC5B,uBAAO,IAAP;AACD,eAFD,MAEO;AACL,uBAAO;AAACM,kCAAgB,EAAE;AAAnB,iBAAP;AACD;AACF,aAPD,MAOO;AACL,qBAAO,IAAP;AACD;AACF;;;2CAEuBC,K,EAAeC,K,EAAuB;AAC5D,mBAAO,UAACC,OAAD,EAAsD;AAC3D,kBAAI,CAACA,OAAO,CAACT,KAAb,EAAoB;AAClB;AACA,uBAAO,IAAP;AACD,eAJ0D,CAM3D;;;AACA,kBAAMU,KAAK,GAAGH,KAAK,CAACL,IAAN,CAAWO,OAAO,CAACT,KAAnB,CAAd,CAP2D,CAS3D;;AACA,qBAAOU,KAAK,GAAG,IAAH,GAAUF,KAAtB;AACD,aAXD;AAYD;;;;;;;;;;;;;;;;;;;;;AC9CH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAOaG,a;AAIX,iCAAc;AAAA;;AAHd;AACQ,eAAAC,OAAA,GAAUC,YAAV;AAIP;AAED;;;;;;;2CAGc;AACZ,mBAAO,KAAKD,OAAL,CAAaE,OAAb,CAAqB,6EAAiBnB,cAAtC,CAAP;AACD;AAED;;;;;;;yCAIeoB,I,EAAW;AACxB,mBAAO,KAAKH,OAAL,CAAaI,OAAb,CAAqB,6EAAiBrB,cAAtC,EAAsDoB,IAAtD,CAAP;AACD;AAED;;;;8CACoB;AAClB,iBAAKH,OAAL,CAAaK,UAAb,CAAwB,6EAAiBtB,cAAzC;AACD;;;0CAEeuB,K,EAAe;AAC7B,iBAAKN,OAAL,CAAaI,OAAb,CAAqB,6EAAiBpB,OAAtC,EAA+CsB,KAA/C;AACD;;;4CAEc;AACb,mBAAO,KAAKN,OAAL,CAAaE,OAAb,CAAqB,6EAAiBlB,OAAtC,CAAP;AACD;;;;;;;yBAlCUe,a;AAAa,O;;;eAAbA,a;AAAa,iBAAbA,aAAa,K;AAAA,oBAFZ;;;;;wEAEDA,a,EAAa;gBAHzB,wDAGyB;iBAHd;AACVQ,sBAAU,EAAE;AADF,W;AAGc,U;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACP1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAMaC,qB;AACX;;;AAGA,yCAAc;AAAA;AACb;AAED;;;;;;;gDAGsBC,S,EAAsB;AAAA;;AAC1CC,kBAAM,CAACC,IAAP,CAAYF,SAAS,CAACG,QAAtB,EAAgCC,OAAhC,CAAwC,UAAAC,KAAK,EAAI;AAC/C,kBAAMjB,OAAO,GAAGY,SAAS,CAACM,GAAV,CAAcD,KAAd,CAAhB;;AACA,kBAAIjB,OAAO,YAAY,0DAAvB,EAAoC;AAClC,oBAAIA,OAAO,CAACmB,OAAZ,EAAqB;AACnBnB,yBAAO,CAACoB,WAAR,CAAoB;AAAEC,4BAAQ,EAAE;AAAZ,mBAApB;AACD;AACF,eAJD,MAIO,IAAIrB,OAAO,YAAY,wDAAvB,EAAkC;AACvC,qBAAI,CAACsB,qBAAL,CAA2BtB,OAA3B;AACD,eAFM,MAEA,IAAIA,OAAO,YAAY,wDAAvB,EAAkC;AACvCa,sBAAM,CAACC,IAAP,CAAYd,OAAO,CAACe,QAApB,EAA8BC,OAA9B,CAAsC,UAACO,SAAD,EAAe;AACnD,sBAAMC,UAAU,GAAGxB,OAAO,CAACe,QAAR,CAAiBQ,SAAjB,CAAnB;;AACA,sBAAIC,UAAU,YAAY,wDAA1B,EAAqC;AACnC,yBAAI,CAACF,qBAAL,CAA2BE,UAA3B;AACD;AACF,iBALD;AAMD;AACF,aAhBD;AAiBD;;;;;;;yBA5BUb,qB;AAAqB,O;;;eAArBA,qB;AAAqB,iBAArBA,qBAAqB,K;AAAA,oBAFpB;;;;;wEAEDA,qB,EAAqB;gBAHjC,wDAGiC;iBAHtB;AACVD,sBAAU,EAAE;AADF,W;AAGsB,U;;;;;;;;;;;;;;;;;;;;ACNlC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;UAOae,gB;AAIX,oCAAc;AAAA;;AAHP,eAAAC,MAAA,GAAS,EAAT;AACA,eAAAC,QAAA,GAAW,EAAX;AAGN,S,CAED;;;;;8CACoB;AAClB,iBAAKD,MAAL,GAAc,kEAAd;AACA,mBAAO,KAAKA,MAAZ;AACD,W,CAED;;;;wCACc;AACZ,iBAAKC,QAAL,GAAgB,4DAAhB;AACA,mBAAO,KAAKA,QAAZ;AACD;;;;;;;yBAjBUF,gB;AAAgB,O;;;eAAhBA,gB;AAAgB,iBAAhBA,gBAAgB,K;AAAA,oBAFf;;;;;wEAEDA,gB,EAAgB;gBAH5B,wDAG4B;iBAHjB;AACVf,sBAAU,EAAE;AADF,W;AAGiB,U","file":"common-es5.js","sourcesContent":["import {NgModule} from '@angular/core';\r\nimport {HeaderComponent} from './header/header.component';\r\nimport {FooterComponent} from './footer/footer.component';\r\nimport {SidebarComponent} from './sidebar/sidebar.component';\r\nimport {MainContentComponent} from './main-content/main-content.component';\r\nimport {RouterModule} from '@angular/router';\r\nimport {SharedModule} from '../shared/shared.module';\r\nimport {NgxSpinnerModule} from 'ngx-spinner';\r\n\r\n@NgModule({\r\n  declarations: [HeaderComponent, FooterComponent, SidebarComponent, MainContentComponent],\r\n  imports: [RouterModule, SharedModule, NgxSpinnerModule],\r\n  exports: [HeaderComponent, FooterComponent, SidebarComponent, MainContentComponent],\r\n})\r\nexport class LayoutModule {\r\n}\r\n","export class StorageConstants {\r\n  static X_ACCESS_TOKEN = 'CognitoIdentityServiceProvider.1nrc8h2siugvjpeum0ggtj58ub.a6b76817-74a5-467b-8467-30c483b8e78c.accessToken';\r\n  static X_EMAIL = 'X_EMAIL';\r\n}\r\n","import {AbstractControl, FormControl, ValidationErrors, ValidatorFn} from '@angular/forms';\r\n\r\nexport class CustomValidators {\r\n\r\n  static emailCustomValidation(c: FormControl): ValidationErrors {\r\n    var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    if (c.value !== null && c.value !== '') {\r\n      const numbers = /^[0-9]+$/;\r\n      if (re.test(String(c.value).toLowerCase())) {\r\n        return null;\r\n      } else {\r\n        return {validateEmail: true};\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  static passwordCustomValidation(c: FormControl): ValidationErrors {\r\n\r\n    var re = /(?=^.{8,100}$)(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\\s)[0-9a-zA-Z!@#$%^&*()]*$/;\r\n    if (c.value !== null && c.value !== '') {\r\n      const numbers = /^[0-9]+$/;\r\n      if (re.test(String(c.value))) {\r\n        return null;\r\n      } else {\r\n        return {validatePassword: true};\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  static patternValidator(regex: RegExp, error: ValidationErrors): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } => {\r\n      if (!control.value) {\r\n        // if control is empty return no error\r\n        return null;\r\n      }\r\n\r\n      // test the value of the control against the regexp supplied\r\n      const valid = regex.test(control.value);\r\n\r\n      // if true, return no error (no error), else return error passed in the second parameter\r\n      return valid ? null : error;\r\n    };\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {StorageConstants} from '../../constant/storage-constants';\r\nimport {Auth} from 'aws-amplify';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CommonService {\r\n  // private storage = sessionStorage;\r\n  private storage = localStorage;\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /**\r\n   * This method is use for get Access Token from local storage data.\r\n   */\r\n  getAccessToken(): any {\r\n    return this.storage.getItem(StorageConstants.X_ACCESS_TOKEN);\r\n  }\r\n\r\n  /**\r\n   * This method is use for set Access Token to local storage data.\r\n   * @param {data:any}\r\n   */\r\n  setAccessToken(data: any) {\r\n    return this.storage.setItem(StorageConstants.X_ACCESS_TOKEN, data);\r\n  }\r\n\r\n  /*Clear Local storage for logout*/\r\n  clearLocalStorage() {\r\n    this.storage.removeItem(StorageConstants.X_ACCESS_TOKEN);\r\n  }\r\n\r\n  setEmailAddress(email: string) {\r\n    this.storage.setItem(StorageConstants.X_EMAIL, email);\r\n  }\r\n\r\n  getEmailAddress(): string {\r\n    return this.storage.getItem(StorageConstants.X_EMAIL);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FormArray, FormControl, FormGroup } from '@angular/forms';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FieldsValidateService {\r\n  /**\r\n   * Constructor\r\n   */\r\n  constructor() {\r\n  }\r\n\r\n  /**\r\n * It Validate all the fields validations one by one and will display the validation message.\r\n */\r\n  validateAllFormFields(formGroup: FormGroup) {\r\n    Object.keys(formGroup.controls).forEach(field => {\r\n      const control = formGroup.get(field);\r\n      if (control instanceof FormControl) {\r\n        if (control.invalid) {\r\n          control.markAsDirty({ onlySelf: true });\r\n        }\r\n      } else if (control instanceof FormGroup) {\r\n        this.validateAllFormFields(control);\r\n      } else if (control instanceof FormArray) {\r\n        Object.keys(control.controls).forEach((subFields) => {\r\n          const subcontrol = control.controls[subFields];\r\n          if (subcontrol instanceof FormGroup) {\r\n            this.validateAllFormFields(subcontrol);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport * as tutorialImages from '../../shared/localData/tutorialImages.json';\r\nimport * as bankData from '../../shared/localData/bankData.json';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LocalDataService {\r\n  public images = [];\r\n  public allBanks = [];\r\n\r\n  constructor() {\r\n  }\r\n\r\n  // this function is use to get all images of tutorial page\r\n  getTutorialImages() {\r\n    this.images = tutorialImages.default;\r\n    return this.images;\r\n  }\r\n\r\n  // this function is use to get all banks\r\n  getALlBanks() {\r\n    this.allBanks = bankData.default;\r\n    return this.allBanks;\r\n  }\r\n}\r\n"]}