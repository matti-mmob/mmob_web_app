(function () {
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

  function _templateObject35() {
    var data = _taggedTemplateLiteral([":@@ngb.toast.close-aria\u241Ff4e529ae5ffd73001d1ff4bbdeeb0a72e342e5c8\u241F7819314041543176992:Close"]);

    _templateObject35 = function _templateObject35() {
      return data;
    };

    return data;
  }

  function _templateObject34() {
    var data = _taggedTemplateLiteral([":@@ngb.timepicker.AM\u241F69a1f176a93998876952adac57c3bc3863b6105e\u241F4592818992509942761:", ":INTERPOLATION:"]);

    _templateObject34 = function _templateObject34() {
      return data;
    };

    return data;
  }

  function _templateObject33() {
    var data = _taggedTemplateLiteral([":@@ngb.timepicker.PM\u241F8d6e691e10306c1b34c6b26805151aaea320ef7f\u241F3564199131264287502:", ":INTERPOLATION:"]);

    _templateObject33 = function _templateObject33() {
      return data;
    };

    return data;
  }

  function _templateObject32() {
    var data = _taggedTemplateLiteral([":@@ngb.timepicker.decrement-seconds\u241F5db47ac104294243a70eb9124fbea9d0004ddf69\u241F753633511487974857:Decrement seconds"]);

    _templateObject32 = function _templateObject32() {
      return data;
    };

    return data;
  }

  function _templateObject31() {
    var data = _taggedTemplateLiteral([":@@ngb.timepicker.increment-seconds\u241F912322ecee7d659d04dcf494a70e22e49d334b26\u241F5364772110539092174:Increment seconds"]);

    _templateObject31 = function _templateObject31() {
      return data;
    };

    return data;
  }

  function _templateObject30() {
    var data = _taggedTemplateLiteral([":@@ngb.timepicker.seconds\u241F4f2ed9e71a7c981db3e50ae2fedb28aff2ec4e6c\u241F8874012390997067175:Seconds"]);

    _templateObject30 = function _templateObject30() {
      return data;
    };

    return data;
  }

  function _templateObject29() {
    var data = _taggedTemplateLiteral([":@@ngb.timepicker.SS\u241Febe38d36a40a2383c5fefa9b4608ffbda08bd4a3\u241F3628127143071124194:SS"]);

    _templateObject29 = function _templateObject29() {
      return data;
    };

    return data;
  }

  function _templateObject28() {
    var data = _taggedTemplateLiteral([":@@ngb.timepicker.decrement-minutes\u241Fc1a6899e529c096da5b660385d4e77fe1f7ad271\u241F7447789825403243588:Decrement minutes"]);

    _templateObject28 = function _templateObject28() {
      return data;
    };

    return data;
  }

  function _templateObject27() {
    var data = _taggedTemplateLiteral([":@@ngb.timepicker.increment-minutes\u241Ff5a4a3bc05e053f6732475d0e74875ec01c3a348\u241F180147720391025024:Increment minutes"]);

    _templateObject27 = function _templateObject27() {
      return data;
    };

    return data;
  }

  function _templateObject26() {
    var data = _taggedTemplateLiteral([":@@ngb.timepicker.decrement-hours\u241F147c7a19429da7d999e247d22e33fee370b1691b\u241F3651829882940481818:Decrement hours"]);

    _templateObject26 = function _templateObject26() {
      return data;
    };

    return data;
  }

  function _templateObject25() {
    var data = _taggedTemplateLiteral([":@@ngb.timepicker.increment-hours\u241Fcb74bc1d625a6c1742f0d7d47306cf495780c218\u241F5939278348542933629:Increment hours"]);

    _templateObject25 = function _templateObject25() {
      return data;
    };

    return data;
  }

  function _templateObject24() {
    var data = _taggedTemplateLiteral([":@@ngb.timepicker.minutes\u241F41e62daa962947c0d23ded0981975d1bddf0bf38\u241F5531237363767747080:Minutes"]);

    _templateObject24 = function _templateObject24() {
      return data;
    };

    return data;
  }

  function _templateObject23() {
    var data = _taggedTemplateLiteral([":@@ngb.timepicker.MM\u241F72c8edf6a50068a05bde70991e36b1e881f4ca54\u241F1647282246509919852:MM"]);

    _templateObject23 = function _templateObject23() {
      return data;
    };

    return data;
  }

  function _templateObject22() {
    var data = _taggedTemplateLiteral([":@@ngb.timepicker.hours\u241F3bbce5fef7e1151da052a4e529453edb340e3912\u241F8070396816726827304:Hours"]);

    _templateObject22 = function _templateObject22() {
      return data;
    };

    return data;
  }

  function _templateObject21() {
    var data = _taggedTemplateLiteral([":@@ngb.timepicker.HH\u241Fce676ab1d6d98f85c836381cf100a4a91ef95a1f\u241F4043638465245303811:HH"]);

    _templateObject21 = function _templateObject21() {
      return data;
    };

    return data;
  }

  function _templateObject20() {
    var data = _taggedTemplateLiteral([":@@ngb.progressbar.value\u241Ff8e9a947b9db4252c0e9905765338712f2fd032f\u241F3720830768741091151:", ":INTERPOLATION:"]);

    _templateObject20 = function _templateObject20() {
      return data;
    };

    return data;
  }

  function _templateObject19() {
    var data = _taggedTemplateLiteral([":@@ngb.pagination.last-aria\u241F5c729788ba138508aca1bec050b610f7bf81db3e\u241F4882268002141858767:Last"]);

    _templateObject19 = function _templateObject19() {
      return data;
    };

    return data;
  }

  function _templateObject18() {
    var data = _taggedTemplateLiteral([":@@ngb.pagination.next-aria\u241Ff732c304c7433e5a83ffcd862c3dce709a0f4982\u241F3885497195825665706:Next"]);

    _templateObject18 = function _templateObject18() {
      return data;
    };

    return data;
  }

  function _templateObject17() {
    var data = _taggedTemplateLiteral([":@@ngb.pagination.previous-aria\u241F680d5c75b7fd8d37961083608b9fcdc4167b4c43\u241F4452427314943113135:Previous"]);

    _templateObject17 = function _templateObject17() {
      return data;
    };

    return data;
  }

  function _templateObject16() {
    var data = _taggedTemplateLiteral([":@@ngb.pagination.first-aria\u241Ff2f852318759c6396b5d3d17031d53817d7b38cc\u241F2241508602425256033:First"]);

    _templateObject16 = function _templateObject16() {
      return data;
    };

    return data;
  }

  function _templateObject15() {
    var data = _taggedTemplateLiteral([":@@ngb.pagination.last\u241F49f27a460bc97e7e00be5b37098bfa79884fc7d9\u241F5277020320267646988:\xBB\xBB"]);

    _templateObject15 = function _templateObject15() {
      return data;
    };

    return data;
  }

  function _templateObject14() {
    var data = _taggedTemplateLiteral([":@@ngb.pagination.next\u241Fba9cbb4ff311464308a3627e4f1c3345d9fe6d7d\u241F5458177150283468089:\xBB"]);

    _templateObject14 = function _templateObject14() {
      return data;
    };

    return data;
  }

  function _templateObject13() {
    var data = _taggedTemplateLiteral([":@@ngb.pagination.previous\u241F6e52b6ee77a4848d899dd21b591c6fd499e3aef3\u241F6479320895410098858:\xAB"]);

    _templateObject13 = function _templateObject13() {
      return data;
    };

    return data;
  }

  function _templateObject12() {
    var data = _taggedTemplateLiteral([":@@ngb.pagination.first\u241F656506dfd46380956a655f919f1498d018f75ca0\u241F6867721956102594380:\xAB\xAB"]);

    _templateObject12 = function _templateObject12() {
      return data;
    };

    return data;
  }

  function _templateObject11() {
    var data = _taggedTemplateLiteral([":@@ngb.datepicker.select-year\u241F8ceb09d002bf0c5d1cac171dfbffe1805d2b3962\u241F8852264961585484321:Select year"]);

    _templateObject11 = function _templateObject11() {
      return data;
    };

    return data;
  }

  function _templateObject10() {
    var data = _taggedTemplateLiteral([":@@ngb.datepicker.select-year\u241F8ceb09d002bf0c5d1cac171dfbffe1805d2b3962\u241F8852264961585484321:Select year"]);

    _templateObject10 = function _templateObject10() {
      return data;
    };

    return data;
  }

  function _templateObject9() {
    var data = _taggedTemplateLiteral([":@@ngb.datepicker.select-month\u241F1dbc84807f35518112f62e5775d1daebd3d8462b\u241F2253869508135064750:Select month"]);

    _templateObject9 = function _templateObject9() {
      return data;
    };

    return data;
  }

  function _templateObject8() {
    var data = _taggedTemplateLiteral([":@@ngb.datepicker.select-month\u241F1dbc84807f35518112f62e5775d1daebd3d8462b\u241F2253869508135064750:Select month"]);

    _templateObject8 = function _templateObject8() {
      return data;
    };

    return data;
  }

  function _templateObject7() {
    var data = _taggedTemplateLiteral([":@@ngb.datepicker.next-month\u241F4bd046985cfe13040d5ef0cd881edce0968a111a\u241F3628374603023447227:Next month"]);

    _templateObject7 = function _templateObject7() {
      return data;
    };

    return data;
  }

  function _templateObject6() {
    var data = _taggedTemplateLiteral([":@@ngb.datepicker.next-month\u241F4bd046985cfe13040d5ef0cd881edce0968a111a\u241F3628374603023447227:Next month"]);

    _templateObject6 = function _templateObject6() {
      return data;
    };

    return data;
  }

  function _templateObject5() {
    var data = _taggedTemplateLiteral([":@@ngb.datepicker.previous-month\u241Fc3b08b07b5ab98e7cdcf18df39355690ab7d3884\u241F8586908745456864217:Previous month"]);

    _templateObject5 = function _templateObject5() {
      return data;
    };

    return data;
  }

  function _templateObject4() {
    var data = _taggedTemplateLiteral([":@@ngb.datepicker.previous-month\u241Fc3b08b07b5ab98e7cdcf18df39355690ab7d3884\u241F8586908745456864217:Previous month"]);

    _templateObject4 = function _templateObject4() {
      return data;
    };

    return data;
  }

  function _templateObject3() {
    var data = _taggedTemplateLiteral([":@@ngb.carousel.next\u241Ff732c304c7433e5a83ffcd862c3dce709a0f4982\u241F3885497195825665706:Next"]);

    _templateObject3 = function _templateObject3() {
      return data;
    };

    return data;
  }

  function _templateObject2() {
    var data = _taggedTemplateLiteral([":@@ngb.carousel.previous\u241F680d5c75b7fd8d37961083608b9fcdc4167b4c43\u241F4452427314943113135:Previous"]);

    _templateObject2 = function _templateObject2() {
      return data;
    };

    return data;
  }

  function _templateObject() {
    var data = _taggedTemplateLiteral([":@@ngb.alert.close\u241Ff4e529ae5ffd73001d1ff4bbdeeb0a72e342e5c8\u241F7819314041543176992:Close"]);

    _templateObject = function _templateObject() {
      return data;
    };

    return data;
  }

  function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  (window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~dashboard-dashboard-module~getting-setup-getting-setup-module~insurance-insurance-module~inv~4ce9ca73"], {
    /***/
    "+1zU":
    /*!*********************************************************************!*\
      !*** ./src/app/shared/validations/InputControlMessagesComponent.ts ***!
      \*********************************************************************/

    /*! exports provided: InputControlMessagesComponent */

    /***/
    function zU(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "InputControlMessagesComponent", function () {
        return InputControlMessagesComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _ValidationService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./ValidationService */
      "Y4NX");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");

      function InputControlMessagesComponent_div_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r3.errorMessage);
        }
      }
      /**
       * This component is using for common display messages for invalid inputType.
       */


      var InputControlMessagesComponent = /*#__PURE__*/function () {
        function InputControlMessagesComponent() {
          _classCallCheck(this, InputControlMessagesComponent);

          this.errors = [];
        }
        /**
         * This function is returning error message.
         * @returns {any}
         */


        _createClass(InputControlMessagesComponent, [{
          key: "isUndefined",

          /**
          * This function is used to check 'undefined' condition
          * @param value
          * @return boolean
          */
          value: function isUndefined(value) {
            if (value === void 0) {
              return true;
            } else {
              return false;
            }
          }
        }, {
          key: "errorMessage",
          get: function get() {
            if (!this.isUndefined(this.control)) {
              for (var propertyName in this.control.errors) {
                if (this.control.errors.hasOwnProperty(propertyName) && this.control.dirty) {
                  return _ValidationService__WEBPACK_IMPORTED_MODULE_1__["ValidationService"].getValidatorErrorMessage(propertyName, this.control.errors[propertyName], this.control.errors, this.inputElmControl);
                }
              }

              return null;
            } else if (this.errors) {
              for (var _propertyName in this.errors) {
                return _ValidationService__WEBPACK_IMPORTED_MODULE_1__["ValidationService"].getValidatorErrorMessage(_propertyName, this.errors[_propertyName], this.errors, this.inputElmControl);
              }
            }
          }
        }]);

        return InputControlMessagesComponent;
      }();

      InputControlMessagesComponent.ɵfac = function InputControlMessagesComponent_Factory(t) {
        return new (t || InputControlMessagesComponent)();
      };

      InputControlMessagesComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: InputControlMessagesComponent,
        selectors: [["control-messages"]],
        inputs: {
          control: "control",
          inputElmControl: "inputElmControl",
          errors: "errors"
        },
        decls: 2,
        vars: 1,
        consts: [[1, "error"], [4, "ngIf"]],
        template: function InputControlMessagesComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, InputControlMessagesComponent_div_1_Template, 2, 1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.errorMessage !== null);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["NgIf"]],
        styles: ["\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NoYXJlZC92YWxpZGF0aW9ucy9JbnB1dENvbnRyb2xNZXNzYWdlc0NvbXBvbmVudC5jc3MifQ== */"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](InputControlMessagesComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'control-messages',
            template: "\n    <div class=\"error\">\n      <div *ngIf=\"errorMessage !== null\">{{ errorMessage }}</div>\n    </div>\n  ",
            styleUrls: ['./InputControlMessagesComponent.css']
          }]
        }], function () {
          return [];
        }, {
          control: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          inputElmControl: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          errors: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /***/

    },

    /***/
    "1kSV":
    /*!***************************************************************************************!*\
      !*** ./node_modules/@ng-bootstrap/ng-bootstrap/__ivy_ngcc__/fesm2015/ng-bootstrap.js ***!
      \***************************************************************************************/

    /*! exports provided: ModalDismissReasons, NgbAccordion, NgbAccordionConfig, NgbAccordionModule, NgbActiveModal, NgbAlert, NgbAlertConfig, NgbAlertModule, NgbButtonLabel, NgbButtonsModule, NgbCalendar, NgbCalendarGregorian, NgbCalendarHebrew, NgbCalendarIslamicCivil, NgbCalendarIslamicUmalqura, NgbCalendarPersian, NgbCarousel, NgbCarouselConfig, NgbCarouselModule, NgbCheckBox, NgbCollapse, NgbCollapseModule, NgbDate, NgbDateAdapter, NgbDateNativeAdapter, NgbDateNativeUTCAdapter, NgbDateParserFormatter, NgbDatepicker, NgbDatepickerConfig, NgbDatepickerContent, NgbDatepickerI18n, NgbDatepickerI18nHebrew, NgbDatepickerKeyboardService, NgbDatepickerModule, NgbDatepickerMonth, NgbDropdown, NgbDropdownAnchor, NgbDropdownConfig, NgbDropdownItem, NgbDropdownMenu, NgbDropdownModule, NgbDropdownToggle, NgbHighlight, NgbInputDatepicker, NgbInputDatepickerConfig, NgbModal, NgbModalConfig, NgbModalModule, NgbModalRef, NgbModule, NgbNav, NgbNavConfig, NgbNavContent, NgbNavItem, NgbNavLink, NgbNavModule, NgbNavOutlet, NgbNavbar, NgbPagination, NgbPaginationConfig, NgbPaginationEllipsis, NgbPaginationFirst, NgbPaginationLast, NgbPaginationModule, NgbPaginationNext, NgbPaginationNumber, NgbPaginationPrevious, NgbPanel, NgbPanelContent, NgbPanelHeader, NgbPanelTitle, NgbPanelToggle, NgbPopover, NgbPopoverConfig, NgbPopoverModule, NgbProgressbar, NgbProgressbarConfig, NgbProgressbarModule, NgbRadio, NgbRadioGroup, NgbRating, NgbRatingConfig, NgbRatingModule, NgbSlide, NgbSlideEventDirection, NgbSlideEventSource, NgbTab, NgbTabContent, NgbTabTitle, NgbTabset, NgbTabsetConfig, NgbTabsetModule, NgbTimeAdapter, NgbTimepicker, NgbTimepickerConfig, NgbTimepickerI18n, NgbTimepickerModule, NgbToast, NgbToastConfig, NgbToastHeader, NgbToastModule, NgbTooltip, NgbTooltipConfig, NgbTooltipModule, NgbTypeahead, NgbTypeaheadConfig, NgbTypeaheadModule, ɵa, ɵb, ɵba, ɵbb, ɵbc, ɵc, ɵd, ɵe, ɵf, ɵg, ɵh, ɵi, ɵj, ɵk, ɵl, ɵm, ɵn, ɵo, ɵp, ɵq, ɵr, ɵs, ɵt, ɵu, ɵv, ɵw, ɵx, ɵy, ɵz */

    /***/
    function kSV(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ModalDismissReasons", function () {
        return ModalDismissReasons;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbAccordion", function () {
        return NgbAccordion;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbAccordionConfig", function () {
        return NgbAccordionConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbAccordionModule", function () {
        return NgbAccordionModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbActiveModal", function () {
        return NgbActiveModal;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbAlert", function () {
        return NgbAlert;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbAlertConfig", function () {
        return NgbAlertConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbAlertModule", function () {
        return NgbAlertModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbButtonLabel", function () {
        return NgbButtonLabel;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbButtonsModule", function () {
        return NgbButtonsModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbCalendar", function () {
        return NgbCalendar;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbCalendarGregorian", function () {
        return NgbCalendarGregorian;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbCalendarHebrew", function () {
        return NgbCalendarHebrew;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbCalendarIslamicCivil", function () {
        return NgbCalendarIslamicCivil;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbCalendarIslamicUmalqura", function () {
        return NgbCalendarIslamicUmalqura;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbCalendarPersian", function () {
        return NgbCalendarPersian;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbCarousel", function () {
        return NgbCarousel;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbCarouselConfig", function () {
        return NgbCarouselConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbCarouselModule", function () {
        return NgbCarouselModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbCheckBox", function () {
        return NgbCheckBox;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbCollapse", function () {
        return NgbCollapse;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbCollapseModule", function () {
        return NgbCollapseModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbDate", function () {
        return NgbDate;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbDateAdapter", function () {
        return NgbDateAdapter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbDateNativeAdapter", function () {
        return NgbDateNativeAdapter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbDateNativeUTCAdapter", function () {
        return NgbDateNativeUTCAdapter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbDateParserFormatter", function () {
        return NgbDateParserFormatter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbDatepicker", function () {
        return NgbDatepicker;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbDatepickerConfig", function () {
        return NgbDatepickerConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbDatepickerContent", function () {
        return NgbDatepickerContent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbDatepickerI18n", function () {
        return NgbDatepickerI18n;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbDatepickerI18nHebrew", function () {
        return NgbDatepickerI18nHebrew;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbDatepickerKeyboardService", function () {
        return NgbDatepickerKeyboardService;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbDatepickerModule", function () {
        return NgbDatepickerModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbDatepickerMonth", function () {
        return NgbDatepickerMonth;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbDropdown", function () {
        return NgbDropdown;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbDropdownAnchor", function () {
        return NgbDropdownAnchor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbDropdownConfig", function () {
        return NgbDropdownConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbDropdownItem", function () {
        return NgbDropdownItem;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbDropdownMenu", function () {
        return NgbDropdownMenu;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbDropdownModule", function () {
        return NgbDropdownModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbDropdownToggle", function () {
        return NgbDropdownToggle;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbHighlight", function () {
        return NgbHighlight;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbInputDatepicker", function () {
        return NgbInputDatepicker;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbInputDatepickerConfig", function () {
        return NgbInputDatepickerConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbModal", function () {
        return NgbModal;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbModalConfig", function () {
        return NgbModalConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbModalModule", function () {
        return NgbModalModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbModalRef", function () {
        return NgbModalRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbModule", function () {
        return NgbModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbNav", function () {
        return NgbNav;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbNavConfig", function () {
        return NgbNavConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbNavContent", function () {
        return NgbNavContent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbNavItem", function () {
        return NgbNavItem;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbNavLink", function () {
        return NgbNavLink;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbNavModule", function () {
        return NgbNavModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbNavOutlet", function () {
        return NgbNavOutlet;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbNavbar", function () {
        return NgbNavbar;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbPagination", function () {
        return NgbPagination;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbPaginationConfig", function () {
        return NgbPaginationConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbPaginationEllipsis", function () {
        return NgbPaginationEllipsis;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbPaginationFirst", function () {
        return NgbPaginationFirst;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbPaginationLast", function () {
        return NgbPaginationLast;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbPaginationModule", function () {
        return NgbPaginationModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbPaginationNext", function () {
        return NgbPaginationNext;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbPaginationNumber", function () {
        return NgbPaginationNumber;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbPaginationPrevious", function () {
        return NgbPaginationPrevious;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbPanel", function () {
        return NgbPanel;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbPanelContent", function () {
        return NgbPanelContent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbPanelHeader", function () {
        return NgbPanelHeader;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbPanelTitle", function () {
        return NgbPanelTitle;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbPanelToggle", function () {
        return NgbPanelToggle;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbPopover", function () {
        return NgbPopover;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbPopoverConfig", function () {
        return NgbPopoverConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbPopoverModule", function () {
        return NgbPopoverModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbProgressbar", function () {
        return NgbProgressbar;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbProgressbarConfig", function () {
        return NgbProgressbarConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbProgressbarModule", function () {
        return NgbProgressbarModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbRadio", function () {
        return NgbRadio;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbRadioGroup", function () {
        return NgbRadioGroup;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbRating", function () {
        return NgbRating;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbRatingConfig", function () {
        return NgbRatingConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbRatingModule", function () {
        return NgbRatingModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbSlide", function () {
        return NgbSlide;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbSlideEventDirection", function () {
        return NgbSlideEventDirection;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbSlideEventSource", function () {
        return NgbSlideEventSource;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbTab", function () {
        return NgbTab;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbTabContent", function () {
        return NgbTabContent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbTabTitle", function () {
        return NgbTabTitle;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbTabset", function () {
        return NgbTabset;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbTabsetConfig", function () {
        return NgbTabsetConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbTabsetModule", function () {
        return NgbTabsetModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbTimeAdapter", function () {
        return NgbTimeAdapter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbTimepicker", function () {
        return NgbTimepicker;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbTimepickerConfig", function () {
        return NgbTimepickerConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbTimepickerI18n", function () {
        return NgbTimepickerI18n;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbTimepickerModule", function () {
        return NgbTimepickerModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbToast", function () {
        return NgbToast;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbToastConfig", function () {
        return NgbToastConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbToastHeader", function () {
        return NgbToastHeader;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbToastModule", function () {
        return NgbToastModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbTooltip", function () {
        return NgbTooltip;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbTooltipConfig", function () {
        return NgbTooltipConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbTooltipModule", function () {
        return NgbTooltipModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbTypeahead", function () {
        return NgbTypeahead;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbTypeaheadConfig", function () {
        return NgbTypeaheadConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgbTypeaheadModule", function () {
        return NgbTypeaheadModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵa", function () {
        return NGB_CAROUSEL_DIRECTIVES;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵb", function () {
        return NGB_DATEPICKER_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵba", function () {
        return Live;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵbb", function () {
        return NgbCalendarHijri;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵbc", function () {
        return ContentRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵc", function () {
        return NGB_DATEPICKER_CALENDAR_FACTORY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵd", function () {
        return NgbDatepickerDayView;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵe", function () {
        return NgbDatepickerNavigation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵf", function () {
        return NgbDatepickerNavigationSelect;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵg", function () {
        return NGB_DATEPICKER_18N_FACTORY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵh", function () {
        return NgbDatepickerI18nDefault;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵi", function () {
        return NGB_DATEPICKER_DATE_ADAPTER_FACTORY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵj", function () {
        return NgbDateStructAdapter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵk", function () {
        return NGB_DATEPICKER_PARSER_FORMATTER_FACTORY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵl", function () {
        return NgbDateISOParserFormatter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵm", function () {
        return NgbPopoverWindow;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵn", function () {
        return NGB_DATEPICKER_TIME_ADAPTER_FACTORY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵo", function () {
        return NgbTimeStructAdapter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵp", function () {
        return NGB_TIMEPICKER_I18N_FACTORY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵq", function () {
        return NgbTimepickerI18nDefault;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵr", function () {
        return NgbTooltipWindow;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵs", function () {
        return NgbTypeaheadWindow;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵt", function () {
        return NgbDatepickerService;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵu", function () {
        return NgbModalBackdrop;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵv", function () {
        return NgbModalWindow;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵw", function () {
        return NgbModalStack;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵx", function () {
        return ScrollBar;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵy", function () {
        return ARIA_LIVE_DELAY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵz", function () {
        return ARIA_LIVE_DELAY_FACTORY;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/forms */
      "3Pt+");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");

      function NgbAccordion_ng_template_0_ng_template_2_Template(rf, ctx) {}

      function NgbAccordion_ng_template_0_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "button", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](2, NgbAccordion_ng_template_0_ng_template_2_Template, 0, 0, "ng-template", 4);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var panel_r3 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngbPanelToggle", panel_r3);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate1"](" ", panel_r3.title, "");

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngTemplateOutlet", panel_r3.titleTpl == null ? null : panel_r3.titleTpl.templateRef);
        }
      }

      function NgbAccordion_ng_template_2_ng_template_2_Template(rf, ctx) {}

      function NgbAccordion_ng_template_2_div_3_ng_template_2_Template(rf, ctx) {}

      function NgbAccordion_ng_template_2_div_3_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 8);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "div", 9);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](2, NgbAccordion_ng_template_2_div_3_ng_template_2_Template, 0, 0, "ng-template", 4);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var panel_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]().$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("show", panel_r5.isOpen);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵpropertyInterpolate"]("id", panel_r5.id);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("aria-labelledby", panel_r5.id + "-header");

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngTemplateOutlet", (panel_r5.contentTpl == null ? null : panel_r5.contentTpl.templateRef) || null);
        }
      }

      var _c0 = function _c0(a0, a1) {
        return {
          $implicit: a0,
          opened: a1
        };
      };

      function NgbAccordion_ng_template_2_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div");

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "div", 5);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](2, NgbAccordion_ng_template_2_ng_template_2_Template, 0, 0, "ng-template", 6);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](3, NgbAccordion_ng_template_2_div_3_Template, 3, 5, "div", 7);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var panel_r5 = ctx.$implicit;

          var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          var _r0 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassMap"]("card " + (panel_r5.cardClass || ""));

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassMap"]("card-header " + (panel_r5.type ? "bg-" + panel_r5.type : ctx_r2.type ? "bg-" + ctx_r2.type : ""));

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵpropertyInterpolate1"]("id", "", panel_r5.id, "-header");

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngTemplateOutlet", (panel_r5.headerTpl == null ? null : panel_r5.headerTpl.templateRef) || _r0)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵpureFunction2"](8, _c0, panel_r5, panel_r5.isOpen));

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", !ctx_r2.destroyOnHide || panel_r5.isOpen);
        }
      }

      var I18N_1;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_alert_close$$FESM2015_NG_BOOTSTRAP_JS__2 = goog.getMsg("Close");
        I18N_1 = MSG_EXTERNAL_ngb_alert_close$$FESM2015_NG_BOOTSTRAP_JS__2;
      } else {
        I18N_1 = $localize(_templateObject());
      }

      var _c3 = ["aria-label", I18N_1];

      function NgbAlert_button_1_Template(rf, ctx) {
        if (rf & 1) {
          var _r12 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "button", 1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18nAttributes"](1, _c3);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function NgbAlert_button_1_Template_button_click_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r12);

            var ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            return ctx_r11.closeHandler();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "span", 2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](3, "\xD7");

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }
      }

      var _c4 = ["*"];

      function NgbCarousel_ol_0_li_1_Template(rf, ctx) {
        if (rf & 1) {
          var _r20 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "li", 7);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function NgbCarousel_ol_0_li_1_Template_li_click_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r20);

            var slide_r18 = ctx.$implicit;

            var ctx_r19 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);

            return ctx_r19.select(slide_r18.id, ctx_r19.NgbSlideEventSource.INDICATOR);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var slide_r18 = ctx.$implicit;

          var ctx_r17 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("active", slide_r18.id === ctx_r17.activeId);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("id", slide_r18.id);
        }
      }

      function NgbCarousel_ol_0_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "ol", 5);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, NgbCarousel_ol_0_li_1_Template, 1, 3, "li", 6);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r13 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx_r13.slides);
        }
      }

      function NgbCarousel_div_2_ng_template_1_Template(rf, ctx) {}

      function NgbCarousel_div_2_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 8);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, NgbCarousel_div_2_ng_template_1_Template, 0, 0, "ng-template", 9);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var slide_r21 = ctx.$implicit;

          var ctx_r14 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("active", slide_r21.id === ctx_r14.activeId);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngTemplateOutlet", slide_r21.tplRef);
        }
      }

      var I18N_5;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_carousel_previous$$FESM2015_NG_BOOTSTRAP_JS__6 = goog.getMsg("Previous");
        I18N_5 = MSG_EXTERNAL_ngb_carousel_previous$$FESM2015_NG_BOOTSTRAP_JS__6;
      } else {
        I18N_5 = $localize(_templateObject2());
      }

      function NgbCarousel_a_3_Template(rf, ctx) {
        if (rf & 1) {
          var _r24 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "a", 10);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function NgbCarousel_a_3_Template_a_click_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r24);

            var ctx_r23 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            return ctx_r23.prev(ctx_r23.NgbSlideEventSource.ARROW_LEFT);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](1, "span", 11);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "span", 12);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18n"](3, I18N_5);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }
      }

      var I18N_7;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_carousel_next$$FESM2015_NG_BOOTSTRAP_JS__8 = goog.getMsg("Next");
        I18N_7 = MSG_EXTERNAL_ngb_carousel_next$$FESM2015_NG_BOOTSTRAP_JS__8;
      } else {
        I18N_7 = $localize(_templateObject3());
      }

      function NgbCarousel_a_4_Template(rf, ctx) {
        if (rf & 1) {
          var _r26 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "a", 13);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function NgbCarousel_a_4_Template_a_click_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r26);

            var ctx_r25 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            return ctx_r25.next(ctx_r25.NgbSlideEventSource.ARROW_RIGHT);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](1, "span", 14);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "span", 12);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18n"](3, I18N_7);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }
      }

      var _c9 = ["defaultDayTemplate"];
      var _c10 = ["content"];

      function NgbDatepicker_ng_template_0_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "div", 7);
        }

        if (rf & 2) {
          var date_r35 = ctx.date;
          var currentMonth_r36 = ctx.currentMonth;
          var selected_r37 = ctx.selected;
          var disabled_r38 = ctx.disabled;
          var focused_r39 = ctx.focused;

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("date", date_r35)("currentMonth", currentMonth_r36)("selected", selected_r37)("disabled", disabled_r38)("focused", focused_r39);
        }
      }

      function NgbDatepicker_ng_template_2_div_0_div_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 12);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var month_r41 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]().$implicit;

          var ctx_r43 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate2"](" ", ctx_r43.i18n.getMonthFullName(month_r41.number, month_r41.year), " ", ctx_r43.i18n.getYearNumerals(month_r41.year), " ");
        }
      }

      function NgbDatepicker_ng_template_2_div_0_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 9);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, NgbDatepicker_ng_template_2_div_0_div_1_Template, 2, 2, "div", 10);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](2, "ngb-datepicker-month", 11);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var month_r41 = ctx.$implicit;

          var ctx_r40 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx_r40.navigation === "none" || ctx_r40.displayMonths > 1 && ctx_r40.navigation === "select");

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("month", month_r41.firstDate);
        }
      }

      function NgbDatepicker_ng_template_2_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](0, NgbDatepicker_ng_template_2_div_0_Template, 3, 2, "div", 8);
        }

        if (rf & 2) {
          var ctx_r30 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx_r30.model.months);
        }
      }

      function NgbDatepicker_ngb_datepicker_navigation_5_Template(rf, ctx) {
        if (rf & 1) {
          var _r46 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "ngb-datepicker-navigation", 13);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("navigate", function NgbDatepicker_ngb_datepicker_navigation_5_Template_ngb_datepicker_navigation_navigate_0_listener($event) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r46);

            var ctx_r45 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            return ctx_r45.onNavigateEvent($event);
          })("select", function NgbDatepicker_ngb_datepicker_navigation_5_Template_ngb_datepicker_navigation_select_0_listener($event) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r46);

            var ctx_r47 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            return ctx_r47.onNavigateDateSelect($event);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r31 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("date", ctx_r31.model.firstDate)("months", ctx_r31.model.months)("disabled", ctx_r31.model.disabled)("showSelect", ctx_r31.model.navigation === "select")("prevDisabled", ctx_r31.model.prevDisabled)("nextDisabled", ctx_r31.model.nextDisabled)("selectBoxes", ctx_r31.model.selectBoxes);
        }
      }

      function NgbDatepicker_ng_template_8_Template(rf, ctx) {}

      function NgbDatepicker_ng_template_9_Template(rf, ctx) {}

      function NgbDatepickerMonth_div_0_div_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "div", 5);
        }
      }

      function NgbDatepickerMonth_div_0_div_2_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 6);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var w_r52 = ctx.$implicit;

          var ctx_r51 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate1"](" ", ctx_r51.i18n.getWeekdayShortName(w_r52), " ");
        }
      }

      function NgbDatepickerMonth_div_0_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, NgbDatepickerMonth_div_0_div_1_Template, 1, 0, "div", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](2, NgbDatepickerMonth_div_0_div_2_Template, 2, 1, "div", 4);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r48 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx_r48.datepicker.showWeekNumbers);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx_r48.viewModel.weekdays);
        }
      }

      function NgbDatepickerMonth_ng_template_1_div_0_div_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 11);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var week_r53 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2).$implicit;

          var ctx_r55 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate"](ctx_r55.i18n.getWeekNumerals(week_r53.number));
        }
      }

      function NgbDatepickerMonth_ng_template_1_div_0_div_2_ng_template_1_ng_template_0_Template(rf, ctx) {}

      function NgbDatepickerMonth_ng_template_1_div_0_div_2_ng_template_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](0, NgbDatepickerMonth_ng_template_1_div_0_div_2_ng_template_1_ng_template_0_Template, 0, 0, "ng-template", 14);
        }

        if (rf & 2) {
          var day_r58 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]().$implicit;

          var ctx_r59 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](3);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngTemplateOutlet", ctx_r59.datepicker.dayTemplate)("ngTemplateOutletContext", day_r58.context);
        }
      }

      function NgbDatepickerMonth_ng_template_1_div_0_div_2_Template(rf, ctx) {
        if (rf & 1) {
          var _r63 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 12);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function NgbDatepickerMonth_ng_template_1_div_0_div_2_Template_div_click_0_listener($event) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r63);

            var day_r58 = ctx.$implicit;

            var ctx_r62 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](3);

            ctx_r62.doSelect(day_r58);
            return $event.preventDefault();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, NgbDatepickerMonth_ng_template_1_div_0_div_2_ng_template_1_Template, 1, 2, "ng-template", 13);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var day_r58 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("disabled", day_r58.context.disabled)("hidden", day_r58.hidden)("ngb-dp-today", day_r58.context.today);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("tabindex", day_r58.tabindex);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("aria-label", day_r58.ariaLabel);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", !day_r58.hidden);
        }
      }

      function NgbDatepickerMonth_ng_template_1_div_0_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 8);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, NgbDatepickerMonth_ng_template_1_div_0_div_1_Template, 2, 1, "div", 9);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](2, NgbDatepickerMonth_ng_template_1_div_0_div_2_Template, 2, 9, "div", 10);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var week_r53 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]().$implicit;

          var ctx_r54 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx_r54.datepicker.showWeekNumbers);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", week_r53.days);
        }
      }

      function NgbDatepickerMonth_ng_template_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](0, NgbDatepickerMonth_ng_template_1_div_0_Template, 3, 2, "div", 7);
        }

        if (rf & 2) {
          var week_r53 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", !week_r53.collapsed);
        }
      }

      var I18N_11;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_datepicker_previous_month$$FESM2015_NG_BOOTSTRAP_JS_12 = goog.getMsg("Previous month");
        I18N_11 = MSG_EXTERNAL_ngb_datepicker_previous_month$$FESM2015_NG_BOOTSTRAP_JS_12;
      } else {
        I18N_11 = $localize(_templateObject4());
      }

      var I18N_13;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_datepicker_previous_month$$FESM2015_NG_BOOTSTRAP_JS_14 = goog.getMsg("Previous month");
        I18N_13 = MSG_EXTERNAL_ngb_datepicker_previous_month$$FESM2015_NG_BOOTSTRAP_JS_14;
      } else {
        I18N_13 = $localize(_templateObject5());
      }

      var _c15 = ["aria-label", I18N_11, "title", I18N_13];
      var I18N_16;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_datepicker_next_month$$FESM2015_NG_BOOTSTRAP_JS_17 = goog.getMsg("Next month");
        I18N_16 = MSG_EXTERNAL_ngb_datepicker_next_month$$FESM2015_NG_BOOTSTRAP_JS_17;
      } else {
        I18N_16 = $localize(_templateObject6());
      }

      var I18N_18;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_datepicker_next_month$$FESM2015_NG_BOOTSTRAP_JS_19 = goog.getMsg("Next month");
        I18N_18 = MSG_EXTERNAL_ngb_datepicker_next_month$$FESM2015_NG_BOOTSTRAP_JS_19;
      } else {
        I18N_18 = $localize(_templateObject7());
      }

      var _c20 = ["aria-label", I18N_16, "title", I18N_18];

      function NgbDatepickerNavigation_ngb_datepicker_navigation_select_4_Template(rf, ctx) {
        if (rf & 1) {
          var _r68 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "ngb-datepicker-navigation-select", 6);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("select", function NgbDatepickerNavigation_ngb_datepicker_navigation_select_4_Template_ngb_datepicker_navigation_select_select_0_listener($event) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r68);

            var ctx_r67 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            return ctx_r67.select.emit($event);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r65 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("date", ctx_r65.date)("disabled", ctx_r65.disabled)("months", ctx_r65.selectBoxes.months)("years", ctx_r65.selectBoxes.years);
        }
      }

      function NgbDatepickerNavigation_5_ng_template_0_div_0_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "div", 0);
        }
      }

      function NgbDatepickerNavigation_5_ng_template_0_div_3_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "div", 0);
        }
      }

      function NgbDatepickerNavigation_5_ng_template_0_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](0, NgbDatepickerNavigation_5_ng_template_0_div_0_Template, 1, 0, "div", 8);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "div", 9);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](3, NgbDatepickerNavigation_5_ng_template_0_div_3_Template, 1, 0, "div", 8);
        }

        if (rf & 2) {
          var month_r70 = ctx.$implicit;
          var i_r71 = ctx.index;

          var ctx_r69 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", i_r71 > 0);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate2"](" ", ctx_r69.i18n.getMonthFullName(month_r70.number, month_r70.year), " ", ctx_r69.i18n.getYearNumerals(month_r70.year), " ");

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", i_r71 !== ctx_r69.months.length - 1);
        }
      }

      function NgbDatepickerNavigation_5_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](0, NgbDatepickerNavigation_5_ng_template_0_Template, 4, 4, "ng-template", 7);
        }

        if (rf & 2) {
          var ctx_r66 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx_r66.months);
        }
      }

      var _c21 = ["ngbDatepickerDayView", ""];
      var _c22 = ["month"];
      var _c23 = ["year"];
      var I18N_24;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_datepicker_select_month$$FESM2015_NG_BOOTSTRAP_JS_25 = goog.getMsg("Select month");
        I18N_24 = MSG_EXTERNAL_ngb_datepicker_select_month$$FESM2015_NG_BOOTSTRAP_JS_25;
      } else {
        I18N_24 = $localize(_templateObject8());
      }

      var I18N_26;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_datepicker_select_month$$FESM2015_NG_BOOTSTRAP_JS_27 = goog.getMsg("Select month");
        I18N_26 = MSG_EXTERNAL_ngb_datepicker_select_month$$FESM2015_NG_BOOTSTRAP_JS_27;
      } else {
        I18N_26 = $localize(_templateObject9());
      }

      var _c28 = ["aria-label", I18N_24, "title", I18N_26];
      var I18N_29;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_datepicker_select_year$$FESM2015_NG_BOOTSTRAP_JS_30 = goog.getMsg("Select year");
        I18N_29 = MSG_EXTERNAL_ngb_datepicker_select_year$$FESM2015_NG_BOOTSTRAP_JS_30;
      } else {
        I18N_29 = $localize(_templateObject10());
      }

      var I18N_31;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_datepicker_select_year$$FESM2015_NG_BOOTSTRAP_JS_32 = goog.getMsg("Select year");
        I18N_31 = MSG_EXTERNAL_ngb_datepicker_select_year$$FESM2015_NG_BOOTSTRAP_JS_32;
      } else {
        I18N_31 = $localize(_templateObject11());
      }

      var _c33 = ["aria-label", I18N_29, "title", I18N_31];

      function NgbDatepickerNavigationSelect_option_3_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "option", 4);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var m_r78 = ctx.$implicit;

          var ctx_r75 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("value", m_r78);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("aria-label", ctx_r75.i18n.getMonthFullName(m_r78, ctx_r75.date == null ? null : ctx_r75.date.year));

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate"](ctx_r75.i18n.getMonthShortName(m_r78, ctx_r75.date == null ? null : ctx_r75.date.year));
        }
      }

      function NgbDatepickerNavigationSelect_option_7_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "option", 4);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var y_r79 = ctx.$implicit;

          var ctx_r77 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("value", y_r79);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate"](ctx_r77.i18n.getYearNumerals(y_r79));
        }
      }

      var _c34 = ["dialog"];
      var _c35 = ["ngbNavOutlet", ""];

      function NgbNavOutlet_ng_template_0_div_0_ng_template_1_Template(rf, ctx) {}

      var _c36 = function _c36(a0) {
        return {
          $implicit: a0
        };
      };

      function NgbNavOutlet_ng_template_0_div_0_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, NgbNavOutlet_ng_template_0_div_0_ng_template_1_Template, 0, 0, "ng-template", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var item_r82 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]().$implicit;

          var ctx_r83 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("active", item_r82.active);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("id", item_r82.panelDomId);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("role", ctx_r83.paneRole ? ctx_r83.paneRole : ctx_r83.nav.roles ? "tabpanel" : undefined)("aria-labelledby", item_r82.domId);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngTemplateOutlet", (item_r82.contentTpl == null ? null : item_r82.contentTpl.templateRef) || null)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵpureFunction1"](7, _c36, item_r82.active));
        }
      }

      function NgbNavOutlet_ng_template_0_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](0, NgbNavOutlet_ng_template_0_div_0_Template, 2, 9, "div", 1);
        }

        if (rf & 2) {
          var item_r82 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", item_r82.isPanelInDom());
        }
      }

      var I18N_37;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_pagination_first$$FESM2015_NG_BOOTSTRAP_JS__38 = goog.getMsg("\xAB\xAB");
        I18N_37 = MSG_EXTERNAL_ngb_pagination_first$$FESM2015_NG_BOOTSTRAP_JS__38;
      } else {
        I18N_37 = $localize(_templateObject12());
      }

      function NgbPagination_ng_template_0_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "span", 8);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18n"](1, I18N_37);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }
      }

      var I18N_39;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_pagination_previous$$FESM2015_NG_BOOTSTRAP_JS__40 = goog.getMsg("\xAB");
        I18N_39 = MSG_EXTERNAL_ngb_pagination_previous$$FESM2015_NG_BOOTSTRAP_JS__40;
      } else {
        I18N_39 = $localize(_templateObject13());
      }

      function NgbPagination_ng_template_2_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "span", 8);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18n"](1, I18N_39);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }
      }

      var I18N_41;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_pagination_next$$FESM2015_NG_BOOTSTRAP_JS__42 = goog.getMsg("\xBB");
        I18N_41 = MSG_EXTERNAL_ngb_pagination_next$$FESM2015_NG_BOOTSTRAP_JS__42;
      } else {
        I18N_41 = $localize(_templateObject14());
      }

      function NgbPagination_ng_template_4_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "span", 8);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18n"](1, I18N_41);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }
      }

      var I18N_43;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_pagination_last$$FESM2015_NG_BOOTSTRAP_JS__44 = goog.getMsg("\xBB\xBB");
        I18N_43 = MSG_EXTERNAL_ngb_pagination_last$$FESM2015_NG_BOOTSTRAP_JS__44;
      } else {
        I18N_43 = $localize(_templateObject15());
      }

      function NgbPagination_ng_template_6_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "span", 8);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18n"](1, I18N_43);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }
      }

      function NgbPagination_ng_template_8_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](0, "...");
        }
      }

      function NgbPagination_ng_template_10_span_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "span", 10);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1, "(current)");

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }
      }

      function NgbPagination_ng_template_10_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](0);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, NgbPagination_ng_template_10_span_1_Template, 2, 0, "span", 9);
        }

        if (rf & 2) {
          var page_r103 = ctx.$implicit;
          var currentPage_r104 = ctx.currentPage;

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate1"](" ", page_r103, " ");

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", page_r103 === currentPage_r104);
        }
      }

      var I18N_45;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_pagination_first_aria$$FESM2015_NG_BOOTSTRAP_JS__46 = goog.getMsg("First");
        I18N_45 = MSG_EXTERNAL_ngb_pagination_first_aria$$FESM2015_NG_BOOTSTRAP_JS__46;
      } else {
        I18N_45 = $localize(_templateObject16());
      }

      var _c47 = ["aria-label", I18N_45];

      function NgbPagination_li_13_ng_template_3_Template(rf, ctx) {}

      var _c48 = function _c48(a0, a1) {
        return {
          disabled: a0,
          currentPage: a1
        };
      };

      function NgbPagination_li_13_Template(rf, ctx) {
        if (rf & 1) {
          var _r108 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "li", 11);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "a", 12);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18nAttributes"](2, _c47);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function NgbPagination_li_13_Template_a_click_1_listener($event) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r108);

            var ctx_r107 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            ctx_r107.selectPage(1);
            return $event.preventDefault();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](3, NgbPagination_li_13_ng_template_3_Template, 0, 0, "ng-template", 13);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r98 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          var _r86 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("disabled", ctx_r98.previousDisabled());

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("tabindex", ctx_r98.previousDisabled() ? "-1" : null)("aria-disabled", ctx_r98.previousDisabled() ? "true" : null);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngTemplateOutlet", (ctx_r98.tplFirst == null ? null : ctx_r98.tplFirst.templateRef) || _r86)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵpureFunction2"](6, _c48, ctx_r98.previousDisabled(), ctx_r98.page));
        }
      }

      var I18N_49;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_pagination_previous_aria$$FESM2015_NG_BOOTSTRAP_JS__50 = goog.getMsg("Previous");
        I18N_49 = MSG_EXTERNAL_ngb_pagination_previous_aria$$FESM2015_NG_BOOTSTRAP_JS__50;
      } else {
        I18N_49 = $localize(_templateObject17());
      }

      var _c51 = ["aria-label", I18N_49];

      function NgbPagination_li_14_ng_template_3_Template(rf, ctx) {}

      var _c52 = function _c52(a0) {
        return {
          disabled: a0
        };
      };

      function NgbPagination_li_14_Template(rf, ctx) {
        if (rf & 1) {
          var _r111 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "li", 11);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "a", 12);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18nAttributes"](2, _c51);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function NgbPagination_li_14_Template_a_click_1_listener($event) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r111);

            var ctx_r110 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            ctx_r110.selectPage(ctx_r110.page - 1);
            return $event.preventDefault();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](3, NgbPagination_li_14_ng_template_3_Template, 0, 0, "ng-template", 13);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r99 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          var _r88 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](3);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("disabled", ctx_r99.previousDisabled());

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("tabindex", ctx_r99.previousDisabled() ? "-1" : null)("aria-disabled", ctx_r99.previousDisabled() ? "true" : null);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngTemplateOutlet", (ctx_r99.tplPrevious == null ? null : ctx_r99.tplPrevious.templateRef) || _r88)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵpureFunction1"](6, _c52, ctx_r99.previousDisabled()));
        }
      }

      function NgbPagination_li_15_a_1_ng_template_1_Template(rf, ctx) {}

      var _c53 = function _c53(a1) {
        return {
          disabled: true,
          currentPage: a1
        };
      };

      function NgbPagination_li_15_a_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "a", 16);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, NgbPagination_li_15_a_1_ng_template_1_Template, 0, 0, "ng-template", 13);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r113 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);

          var _r94 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](9);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngTemplateOutlet", (ctx_r113.tplEllipsis == null ? null : ctx_r113.tplEllipsis.templateRef) || _r94)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵpureFunction1"](2, _c53, ctx_r113.page));
        }
      }

      function NgbPagination_li_15_a_2_ng_template_1_Template(rf, ctx) {}

      var _c54 = function _c54(a0, a1, a2) {
        return {
          disabled: a0,
          $implicit: a1,
          currentPage: a2
        };
      };

      function NgbPagination_li_15_a_2_Template(rf, ctx) {
        if (rf & 1) {
          var _r119 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "a", 17);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function NgbPagination_li_15_a_2_Template_a_click_0_listener($event) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r119);

            var pageNumber_r112 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]().$implicit;

            var ctx_r117 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            ctx_r117.selectPage(pageNumber_r112);
            return $event.preventDefault();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, NgbPagination_li_15_a_2_ng_template_1_Template, 0, 0, "ng-template", 13);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var pageNumber_r112 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]().$implicit;

          var ctx_r114 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          var _r96 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](11);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("tabindex", ctx_r114.disabled ? "-1" : null)("aria-disabled", ctx_r114.disabled ? "true" : null);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngTemplateOutlet", (ctx_r114.tplNumber == null ? null : ctx_r114.tplNumber.templateRef) || _r96)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵpureFunction3"](4, _c54, ctx_r114.disabled, pageNumber_r112, ctx_r114.page));
        }
      }

      function NgbPagination_li_15_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "li", 11);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, NgbPagination_li_15_a_1_Template, 2, 4, "a", 14);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](2, NgbPagination_li_15_a_2_Template, 2, 8, "a", 15);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var pageNumber_r112 = ctx.$implicit;

          var ctx_r100 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("active", pageNumber_r112 === ctx_r100.page)("disabled", ctx_r100.isEllipsis(pageNumber_r112) || ctx_r100.disabled);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("aria-current", pageNumber_r112 === ctx_r100.page ? "page" : null);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx_r100.isEllipsis(pageNumber_r112));

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", !ctx_r100.isEllipsis(pageNumber_r112));
        }
      }

      var I18N_55;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_pagination_next_aria$$FESM2015_NG_BOOTSTRAP_JS__56 = goog.getMsg("Next");
        I18N_55 = MSG_EXTERNAL_ngb_pagination_next_aria$$FESM2015_NG_BOOTSTRAP_JS__56;
      } else {
        I18N_55 = $localize(_templateObject18());
      }

      var _c57 = ["aria-label", I18N_55];

      function NgbPagination_li_16_ng_template_3_Template(rf, ctx) {}

      function NgbPagination_li_16_Template(rf, ctx) {
        if (rf & 1) {
          var _r123 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "li", 11);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "a", 12);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18nAttributes"](2, _c57);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function NgbPagination_li_16_Template_a_click_1_listener($event) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r123);

            var ctx_r122 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            ctx_r122.selectPage(ctx_r122.page + 1);
            return $event.preventDefault();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](3, NgbPagination_li_16_ng_template_3_Template, 0, 0, "ng-template", 13);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r101 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          var _r90 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](5);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("disabled", ctx_r101.nextDisabled());

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("tabindex", ctx_r101.nextDisabled() ? "-1" : null)("aria-disabled", ctx_r101.nextDisabled() ? "true" : null);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngTemplateOutlet", (ctx_r101.tplNext == null ? null : ctx_r101.tplNext.templateRef) || _r90)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵpureFunction2"](6, _c48, ctx_r101.nextDisabled(), ctx_r101.page));
        }
      }

      var I18N_58;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_pagination_last_aria$$FESM2015_NG_BOOTSTRAP_JS__59 = goog.getMsg("Last");
        I18N_58 = MSG_EXTERNAL_ngb_pagination_last_aria$$FESM2015_NG_BOOTSTRAP_JS__59;
      } else {
        I18N_58 = $localize(_templateObject19());
      }

      var _c60 = ["aria-label", I18N_58];

      function NgbPagination_li_17_ng_template_3_Template(rf, ctx) {}

      function NgbPagination_li_17_Template(rf, ctx) {
        if (rf & 1) {
          var _r126 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "li", 11);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "a", 12);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18nAttributes"](2, _c60);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function NgbPagination_li_17_Template_a_click_1_listener($event) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r126);

            var ctx_r125 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            ctx_r125.selectPage(ctx_r125.pageCount);
            return $event.preventDefault();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](3, NgbPagination_li_17_ng_template_3_Template, 0, 0, "ng-template", 13);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r102 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          var _r92 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](7);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("disabled", ctx_r102.nextDisabled());

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("tabindex", ctx_r102.nextDisabled() ? "-1" : null)("aria-disabled", ctx_r102.nextDisabled() ? "true" : null);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngTemplateOutlet", (ctx_r102.tplLast == null ? null : ctx_r102.tplLast.templateRef) || _r92)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵpureFunction2"](6, _c48, ctx_r102.nextDisabled(), ctx_r102.page));
        }
      }

      function NgbPopoverWindow_h3_1_ng_template_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](0);
        }

        if (rf & 2) {
          var ctx_r129 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate"](ctx_r129.title);
        }
      }

      function NgbPopoverWindow_h3_1_ng_template_3_Template(rf, ctx) {}

      function NgbPopoverWindow_h3_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "h3", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, NgbPopoverWindow_h3_1_ng_template_1_Template, 1, 1, "ng-template", null, 4, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplateRefExtractor"]);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](3, NgbPopoverWindow_h3_1_ng_template_3_Template, 0, 0, "ng-template", 5);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var _r128 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](2);

          var ctx_r127 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](3);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngTemplateOutlet", ctx_r127.isTitleTemplate() ? ctx_r127.title : _r128)("ngTemplateOutletContext", ctx_r127.context);
        }
      }

      var I18N_61;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_progressbar_value$$FESM2015_NG_BOOTSTRAP_JS__62 = goog.getMsg("{$interpolation}", {
          "interpolation": "\uFFFD0\uFFFD"
        });
        I18N_61 = MSG_EXTERNAL_ngb_progressbar_value$$FESM2015_NG_BOOTSTRAP_JS__62;
      } else {
        I18N_61 = $localize(_templateObject20(), "\uFFFD0\uFFFD");
      }

      function NgbProgressbar_span_2_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "span");

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18n"](1, I18N_61);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵpipe"](2, "percent");

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r131 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18nExp"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵpipeBind1"](2, 1, ctx_r131.getValue() / ctx_r131.max));

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18nApply"](1);
        }
      }

      function NgbRating_ng_template_0_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](0);
        }

        if (rf & 2) {
          var fill_r135 = ctx.fill;

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate"](fill_r135 === 100 ? "\u2605" : "\u2606");
        }
      }

      function NgbRating_ng_template_2_ng_template_3_Template(rf, ctx) {}

      function NgbRating_ng_template_2_Template(rf, ctx) {
        if (rf & 1) {
          var _r139 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "span", 2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "span", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("mouseenter", function NgbRating_ng_template_2_Template_span_mouseenter_2_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r139);

            var index_r136 = ctx.index;

            var ctx_r138 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            return ctx_r138.enter(index_r136 + 1);
          })("click", function NgbRating_ng_template_2_Template_span_click_2_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r139);

            var index_r136 = ctx.index;

            var ctx_r140 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            return ctx_r140.handleClick(index_r136 + 1);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](3, NgbRating_ng_template_2_ng_template_3_Template, 0, 0, "ng-template", 4);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var index_r136 = ctx.index;

          var ctx_r134 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          var _r132 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate1"]("(", index_r136 < ctx_r134.nextRate ? "*" : " ", ")");

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵstyleProp"]("cursor", ctx_r134.readonly || ctx_r134.disabled ? "default" : "pointer");

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngTemplateOutlet", ctx_r134.starTemplate || ctx_r134.starTemplateFromContent || _r132)("ngTemplateOutletContext", ctx_r134.contexts[index_r136]);
        }
      }

      function NgbTabset_li_1_ng_template_3_Template(rf, ctx) {}

      function NgbTabset_li_1_Template(rf, ctx) {
        if (rf & 1) {
          var _r146 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "li", 4);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "a", 5);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function NgbTabset_li_1_Template_a_click_1_listener($event) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r146);

            var tab_r143 = ctx.$implicit;

            var ctx_r145 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            ctx_r145.select(tab_r143.id);
            return $event.preventDefault();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](3, NgbTabset_li_1_ng_template_3_Template, 0, 0, "ng-template", 6);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var tab_r143 = ctx.$implicit;

          var ctx_r141 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("active", tab_r143.id === ctx_r141.activeId)("disabled", tab_r143.disabled);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("id", tab_r143.id);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("tabindex", tab_r143.disabled ? "-1" : undefined)("aria-controls", !ctx_r141.destroyOnHide || tab_r143.id === ctx_r141.activeId ? tab_r143.id + "-panel" : null)("aria-selected", tab_r143.id === ctx_r141.activeId)("aria-disabled", tab_r143.disabled);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate1"](" ", tab_r143.title, "");

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngTemplateOutlet", (tab_r143.titleTpl == null ? null : tab_r143.titleTpl.templateRef) || null);
        }
      }

      function NgbTabset_ng_template_3_div_0_ng_template_1_Template(rf, ctx) {}

      function NgbTabset_ng_template_3_div_0_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 8);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, NgbTabset_ng_template_3_div_0_ng_template_1_Template, 0, 0, "ng-template", 6);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var tab_r147 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]().$implicit;

          var ctx_r148 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassMapInterpolate1"]("tab-pane ", tab_r147.id === ctx_r148.activeId ? "active" : null, "");

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵpropertyInterpolate1"]("id", "", tab_r147.id, "-panel");

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("aria-labelledby", tab_r147.id);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngTemplateOutlet", (tab_r147.contentTpl == null ? null : tab_r147.contentTpl.templateRef) || null);
        }
      }

      function NgbTabset_ng_template_3_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](0, NgbTabset_ng_template_3_div_0_Template, 2, 6, "div", 7);
        }

        if (rf & 2) {
          var tab_r147 = ctx.$implicit;

          var ctx_r142 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", !ctx_r142.destroyOnHide || tab_r147.id === ctx_r142.activeId);
        }
      }

      var I18N_63;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_timepicker_HH$$FESM2015_NG_BOOTSTRAP_JS_64 = goog.getMsg("HH");
        I18N_63 = MSG_EXTERNAL_ngb_timepicker_HH$$FESM2015_NG_BOOTSTRAP_JS_64;
      } else {
        I18N_63 = $localize(_templateObject21());
      }

      var I18N_65;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_timepicker_hours$$FESM2015_NG_BOOTSTRAP_JS_66 = goog.getMsg("Hours");
        I18N_65 = MSG_EXTERNAL_ngb_timepicker_hours$$FESM2015_NG_BOOTSTRAP_JS_66;
      } else {
        I18N_65 = $localize(_templateObject22());
      }

      var _c67 = ["placeholder", I18N_63, "aria-label", I18N_65];
      var I18N_68;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_timepicker_MM$$FESM2015_NG_BOOTSTRAP_JS_69 = goog.getMsg("MM");
        I18N_68 = MSG_EXTERNAL_ngb_timepicker_MM$$FESM2015_NG_BOOTSTRAP_JS_69;
      } else {
        I18N_68 = $localize(_templateObject23());
      }

      var I18N_70;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_timepicker_minutes$$FESM2015_NG_BOOTSTRAP_JS_71 = goog.getMsg("Minutes");
        I18N_70 = MSG_EXTERNAL_ngb_timepicker_minutes$$FESM2015_NG_BOOTSTRAP_JS_71;
      } else {
        I18N_70 = $localize(_templateObject24());
      }

      var _c72 = ["placeholder", I18N_68, "aria-label", I18N_70];
      var I18N_73;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_timepicker_increment_hours$$FESM2015_NG_BOOTSTRAP_JS__74 = goog.getMsg("Increment hours");
        I18N_73 = MSG_EXTERNAL_ngb_timepicker_increment_hours$$FESM2015_NG_BOOTSTRAP_JS__74;
      } else {
        I18N_73 = $localize(_templateObject25());
      }

      function NgbTimepicker_button_3_Template(rf, ctx) {
        if (rf & 1) {
          var _r160 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "button", 10);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function NgbTimepicker_button_3_Template_button_click_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r160);

            var ctx_r159 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            return ctx_r159.changeHour(ctx_r159.hourStep);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](1, "span", 11);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "span", 12);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18n"](3, I18N_73);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r151 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("btn-sm", ctx_r151.isSmallSize)("btn-lg", ctx_r151.isLargeSize)("disabled", ctx_r151.disabled);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("disabled", ctx_r151.disabled);
        }
      }

      var I18N_75;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_timepicker_decrement_hours$$FESM2015_NG_BOOTSTRAP_JS__76 = goog.getMsg("Decrement hours");
        I18N_75 = MSG_EXTERNAL_ngb_timepicker_decrement_hours$$FESM2015_NG_BOOTSTRAP_JS__76;
      } else {
        I18N_75 = $localize(_templateObject26());
      }

      function NgbTimepicker_button_6_Template(rf, ctx) {
        if (rf & 1) {
          var _r162 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "button", 10);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function NgbTimepicker_button_6_Template_button_click_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r162);

            var ctx_r161 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            return ctx_r161.changeHour(0 - ctx_r161.hourStep);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](1, "span", 13);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "span", 12);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18n"](3, I18N_75);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r152 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("btn-sm", ctx_r152.isSmallSize)("btn-lg", ctx_r152.isLargeSize)("disabled", ctx_r152.disabled);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("disabled", ctx_r152.disabled);
        }
      }

      var I18N_77;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_timepicker_increment_minutes$$FESM2015_NG_BOOTSTRAP_JS__78 = goog.getMsg("Increment minutes");
        I18N_77 = MSG_EXTERNAL_ngb_timepicker_increment_minutes$$FESM2015_NG_BOOTSTRAP_JS__78;
      } else {
        I18N_77 = $localize(_templateObject27());
      }

      function NgbTimepicker_button_10_Template(rf, ctx) {
        if (rf & 1) {
          var _r164 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "button", 10);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function NgbTimepicker_button_10_Template_button_click_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r164);

            var ctx_r163 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            return ctx_r163.changeMinute(ctx_r163.minuteStep);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](1, "span", 11);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "span", 12);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18n"](3, I18N_77);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r153 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("btn-sm", ctx_r153.isSmallSize)("btn-lg", ctx_r153.isLargeSize)("disabled", ctx_r153.disabled);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("disabled", ctx_r153.disabled);
        }
      }

      var I18N_79;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_timepicker_decrement_minutes$$FESM2015_NG_BOOTSTRAP_JS__80 = goog.getMsg("Decrement minutes");
        I18N_79 = MSG_EXTERNAL_ngb_timepicker_decrement_minutes$$FESM2015_NG_BOOTSTRAP_JS__80;
      } else {
        I18N_79 = $localize(_templateObject28());
      }

      function NgbTimepicker_button_13_Template(rf, ctx) {
        if (rf & 1) {
          var _r166 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "button", 10);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function NgbTimepicker_button_13_Template_button_click_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r166);

            var ctx_r165 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            return ctx_r165.changeMinute(0 - ctx_r165.minuteStep);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](1, "span", 13);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "span", 12);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18n"](3, I18N_79);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r154 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("btn-sm", ctx_r154.isSmallSize)("btn-lg", ctx_r154.isLargeSize)("disabled", ctx_r154.disabled);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("disabled", ctx_r154.disabled);
        }
      }

      function NgbTimepicker_div_14_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 5);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1, ":");

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }
      }

      var I18N_81;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_timepicker_SS$$FESM2015_NG_BOOTSTRAP_JS__82 = goog.getMsg("SS");
        I18N_81 = MSG_EXTERNAL_ngb_timepicker_SS$$FESM2015_NG_BOOTSTRAP_JS__82;
      } else {
        I18N_81 = $localize(_templateObject29());
      }

      var I18N_83;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_timepicker_seconds$$FESM2015_NG_BOOTSTRAP_JS__84 = goog.getMsg("Seconds");
        I18N_83 = MSG_EXTERNAL_ngb_timepicker_seconds$$FESM2015_NG_BOOTSTRAP_JS__84;
      } else {
        I18N_83 = $localize(_templateObject30());
      }

      var _c85 = ["placeholder", I18N_81, "aria-label", I18N_83];
      var I18N_86;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_timepicker_increment_seconds$$FESM2015_NG_BOOTSTRAP_JS___87 = goog.getMsg("Increment seconds");
        I18N_86 = MSG_EXTERNAL_ngb_timepicker_increment_seconds$$FESM2015_NG_BOOTSTRAP_JS___87;
      } else {
        I18N_86 = $localize(_templateObject31());
      }

      function NgbTimepicker_div_15_button_1_Template(rf, ctx) {
        if (rf & 1) {
          var _r170 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "button", 10);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function NgbTimepicker_div_15_button_1_Template_button_click_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r170);

            var ctx_r169 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);

            return ctx_r169.changeSecond(ctx_r169.secondStep);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](1, "span", 11);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "span", 12);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18n"](3, I18N_86);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r167 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("btn-sm", ctx_r167.isSmallSize)("btn-lg", ctx_r167.isLargeSize)("disabled", ctx_r167.disabled);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("disabled", ctx_r167.disabled);
        }
      }

      var I18N_88;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_timepicker_decrement_seconds$$FESM2015_NG_BOOTSTRAP_JS___89 = goog.getMsg("Decrement seconds");
        I18N_88 = MSG_EXTERNAL_ngb_timepicker_decrement_seconds$$FESM2015_NG_BOOTSTRAP_JS___89;
      } else {
        I18N_88 = $localize(_templateObject32());
      }

      function NgbTimepicker_div_15_button_4_Template(rf, ctx) {
        if (rf & 1) {
          var _r172 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "button", 10);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function NgbTimepicker_div_15_button_4_Template_button_click_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r172);

            var ctx_r171 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);

            return ctx_r171.changeSecond(0 - ctx_r171.secondStep);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](1, "span", 13);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "span", 12);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18n"](3, I18N_88);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r168 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("btn-sm", ctx_r168.isSmallSize)("btn-lg", ctx_r168.isLargeSize)("disabled", ctx_r168.disabled);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("disabled", ctx_r168.disabled);
        }
      }

      function NgbTimepicker_div_15_Template(rf, ctx) {
        if (rf & 1) {
          var _r174 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 14);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, NgbTimepicker_div_15_button_1_Template, 4, 7, "button", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "input", 4);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18nAttributes"](3, _c85);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("change", function NgbTimepicker_div_15_Template_input_change_2_listener($event) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r174);

            var ctx_r173 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            return ctx_r173.updateSecond($event.target.value);
          })("input", function NgbTimepicker_div_15_Template_input_input_2_listener($event) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r174);

            var ctx_r175 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            return ctx_r175.formatInput($event.target);
          })("keydown.ArrowUp", function NgbTimepicker_div_15_Template_input_keydown_ArrowUp_2_listener($event) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r174);

            var ctx_r176 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            ctx_r176.changeSecond(ctx_r176.secondStep);
            return $event.preventDefault();
          })("keydown.ArrowDown", function NgbTimepicker_div_15_Template_input_keydown_ArrowDown_2_listener($event) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r174);

            var ctx_r177 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            ctx_r177.changeSecond(0 - ctx_r177.secondStep);
            return $event.preventDefault();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](4, NgbTimepicker_div_15_button_4_Template, 4, 7, "button", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r156 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx_r156.spinners);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("form-control-sm", ctx_r156.isSmallSize)("form-control-lg", ctx_r156.isLargeSize);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("value", ctx_r156.formatMinSec(ctx_r156.model == null ? null : ctx_r156.model.second))("readOnly", ctx_r156.readonlyInputs)("disabled", ctx_r156.disabled);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx_r156.spinners);
        }
      }

      function NgbTimepicker_div_16_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "div", 5);
        }
      }

      var I18N_90;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_timepicker_PM$$FESM2015_NG_BOOTSTRAP_JS___91 = goog.getMsg("{$interpolation}", {
          "interpolation": "\uFFFD0\uFFFD"
        });
        I18N_90 = MSG_EXTERNAL_ngb_timepicker_PM$$FESM2015_NG_BOOTSTRAP_JS___91;
      } else {
        I18N_90 = $localize(_templateObject33(), "\uFFFD0\uFFFD");
      }

      function NgbTimepicker_div_17_ng_container_2_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementContainerStart"](0);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18n"](1, I18N_90);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementContainerEnd"]();
        }

        if (rf & 2) {
          var ctx_r178 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18nExp"](ctx_r178.i18n.getAfternoonPeriod());

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18nApply"](1);
        }
      }

      var I18N_92;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_timepicker_AM$$FESM2015_NG_BOOTSTRAP_JS___93 = goog.getMsg("{$interpolation}", {
          "interpolation": "\uFFFD0\uFFFD"
        });
        I18N_92 = MSG_EXTERNAL_ngb_timepicker_AM$$FESM2015_NG_BOOTSTRAP_JS___93;
      } else {
        I18N_92 = $localize(_templateObject34(), "\uFFFD0\uFFFD");
      }

      function NgbTimepicker_div_17_ng_template_3_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18n"](0, I18N_92);
        }

        if (rf & 2) {
          var ctx_r180 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18nExp"](ctx_r180.i18n.getMorningPeriod());

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18nApply"](0);
        }
      }

      function NgbTimepicker_div_17_Template(rf, ctx) {
        if (rf & 1) {
          var _r182 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 15);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "button", 16);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function NgbTimepicker_div_17_Template_button_click_1_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r182);

            var ctx_r181 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            return ctx_r181.toggleMeridian();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](2, NgbTimepicker_div_17_ng_container_2_Template, 2, 1, "ng-container", 17);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](3, NgbTimepicker_div_17_ng_template_3_Template, 1, 1, "ng-template", null, 18, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplateRefExtractor"]);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var _r179 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](4);

          var ctx_r158 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("btn-sm", ctx_r158.isSmallSize)("btn-lg", ctx_r158.isLargeSize)("disabled", ctx_r158.disabled);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("disabled", ctx_r158.disabled);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx_r158.model && ctx_r158.model.hour >= 12)("ngIfElse", _r179);
        }
      }

      function NgbToast_ng_template_0_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "strong", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r184 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate"](ctx_r184.header);
        }
      }

      var I18N_94;

      if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        var MSG_EXTERNAL_ngb_toast_close_aria$$FESM2015_NG_BOOTSTRAP_JS__95 = goog.getMsg("Close");
        I18N_94 = MSG_EXTERNAL_ngb_toast_close_aria$$FESM2015_NG_BOOTSTRAP_JS__95;
      } else {
        I18N_94 = $localize(_templateObject35());
      }

      var _c96 = ["aria-label", I18N_94];

      function NgbToast_ng_template_2_ng_template_1_Template(rf, ctx) {}

      function NgbToast_ng_template_2_Template(rf, ctx) {
        if (rf & 1) {
          var _r188 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 4);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, NgbToast_ng_template_2_ng_template_1_Template, 0, 0, "ng-template", 5);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "button", 6);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18nAttributes"](3, _c96);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function NgbToast_ng_template_2_Template_button_click_2_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r188);

            var ctx_r187 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            return ctx_r187.hide();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](4, "span", 7);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](5, "\xD7");

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r185 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          var _r183 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngTemplateOutlet", ctx_r185.contentHeaderTpl || _r183);
        }
      }

      function NgbHighlight_ng_template_0_span_0_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "span");

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var part_r190 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]().$implicit;

          var ctx_r192 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassMap"](ctx_r192.highlightClass);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate"](part_r190);
        }
      }

      function NgbHighlight_ng_template_0_ng_template_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](0);
        }

        if (rf & 2) {
          var part_r190 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]().$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate"](part_r190);
        }
      }

      function NgbHighlight_ng_template_0_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](0, NgbHighlight_ng_template_0_span_0_Template, 2, 3, "span", 1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, NgbHighlight_ng_template_0_ng_template_1_Template, 1, 1, "ng-template", null, 2, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplateRefExtractor"]);
        }

        if (rf & 2) {
          var isOdd_r191 = ctx.odd;

          var _r193 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", isOdd_r191)("ngIfElse", _r193);
        }
      }

      function NgbTypeaheadWindow_ng_template_0_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "ngb-highlight", 2);
        }

        if (rf & 2) {
          var result_r200 = ctx.result;
          var term_r201 = ctx.term;
          var formatter_r202 = ctx.formatter;

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("result", formatter_r202(result_r200))("term", term_r201);
        }
      }

      function NgbTypeaheadWindow_ng_template_2_ng_template_1_Template(rf, ctx) {}

      var _c97 = function _c97(a0, a1, a2) {
        return {
          result: a0,
          term: a1,
          formatter: a2
        };
      };

      function NgbTypeaheadWindow_ng_template_2_Template(rf, ctx) {
        if (rf & 1) {
          var _r207 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "button", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("mouseenter", function NgbTypeaheadWindow_ng_template_2_Template_button_mouseenter_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r207);

            var idx_r204 = ctx.index;

            var ctx_r206 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            return ctx_r206.markActive(idx_r204);
          })("click", function NgbTypeaheadWindow_ng_template_2_Template_button_click_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r207);

            var result_r203 = ctx.$implicit;

            var ctx_r208 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            return ctx_r208.select(result_r203);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, NgbTypeaheadWindow_ng_template_2_ng_template_1_Template, 0, 0, "ng-template", 4);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var result_r203 = ctx.$implicit;
          var idx_r204 = ctx.index;

          var ctx_r199 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          var _r197 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("active", idx_r204 === ctx_r199.activeIdx);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("id", ctx_r199.id + "-" + idx_r204);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngTemplateOutlet", ctx_r199.resultTemplate || _r197)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵpureFunction3"](5, _c97, result_r203, ctx_r199.term, ctx_r199.formatter));
        }
      }

      function toInteger(value) {
        return parseInt("".concat(value), 10);
      }

      function toString(value) {
        return value !== undefined && value !== null ? "".concat(value) : '';
      }

      function getValueInRange(value, max) {
        var min = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        return Math.max(Math.min(value, max), min);
      }

      function isString(value) {
        return typeof value === 'string';
      }

      function isNumber(value) {
        return !isNaN(toInteger(value));
      }

      function isInteger(value) {
        return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
      }

      function isDefined(value) {
        return value !== undefined && value !== null;
      }

      function padNumber(value) {
        if (isNumber(value)) {
          return "0".concat(value).slice(-2);
        } else {
          return '';
        }
      }

      function regExpEscape(text) {
        return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
      }

      function hasClassName(element, className) {
        return element && element.className && element.className.split && element.className.split(/\s+/).indexOf(className) >= 0;
      }

      if (typeof Element !== 'undefined' && !Element.prototype.closest) {
        // Polyfill for ie10+
        if (!Element.prototype.matches) {
          // IE uses the non-standard name: msMatchesSelector
          Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
        }

        Element.prototype.closest = function (s) {
          var el = this;

          if (!document.documentElement.contains(el)) {
            return null;
          }

          do {
            if (el.matches(s)) {
              return el;
            }

            el = el.parentElement || el.parentNode;
          } while (el !== null && el.nodeType === 1);

          return null;
        };
      }

      function closest(element, selector) {
        if (!selector) {
          return null;
        }
        /*
         * In certain browsers (e.g. Edge 44.18362.449.0) HTMLDocument does
         * not support `Element.prototype.closest`. To emulate the correct behaviour
         * we return null when the method is missing.
         *
         * Note that in evergreen browsers `closest(document.documentElement, 'html')`
         * will return the document element whilst in Edge null will be returned. This
         * compromise was deemed good enough.
         */


        if (typeof element.closest === 'undefined') {
          return null;
        }

        return element.closest(selector);
      }
      /**
       * A configuration service for the [NgbAccordion](#/components/accordion/api#NgbAccordion) component.
       *
       * You can inject this service, typically in your root component, and customize its properties
       * to provide default values for all accordions used in the application.
       */


      var NgbAccordionConfig = function NgbAccordionConfig() {
        _classCallCheck(this, NgbAccordionConfig);

        this.closeOthers = false;
      };

      NgbAccordionConfig.ɵfac = function NgbAccordionConfig_Factory(t) {
        return new (t || NgbAccordionConfig)();
      };

      NgbAccordionConfig.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function NgbAccordionConfig_Factory() {
          return new NgbAccordionConfig();
        },
        token: NgbAccordionConfig,
        providedIn: "root"
      });
      var nextId = 0;
      /**
       * A directive that wraps an accordion panel header with any HTML markup and a toggling button
       * marked with [`NgbPanelToggle`](#/components/accordion/api#NgbPanelToggle).
       * See the [header customization demo](#/components/accordion/examples#header) for more details.
       *
       * You can also use [`NgbPanelTitle`](#/components/accordion/api#NgbPanelTitle) to customize only the panel title.
       *
       * @since 4.1.0
       */

      var NgbPanelHeader = function NgbPanelHeader(templateRef) {
        _classCallCheck(this, NgbPanelHeader);

        this.templateRef = templateRef;
      };

      NgbPanelHeader.ɵfac = function NgbPanelHeader_Factory(t) {
        return new (t || NgbPanelHeader)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]));
      };

      NgbPanelHeader.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbPanelHeader,
        selectors: [["ng-template", "ngbPanelHeader", ""]]
      });

      NgbPanelHeader.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
        }];
      };
      /**
       * A directive that wraps only the panel title with HTML markup inside.
       *
       * You can also use [`NgbPanelHeader`](#/components/accordion/api#NgbPanelHeader) to customize the full panel header.
       */


      var NgbPanelTitle = function NgbPanelTitle(templateRef) {
        _classCallCheck(this, NgbPanelTitle);

        this.templateRef = templateRef;
      };

      NgbPanelTitle.ɵfac = function NgbPanelTitle_Factory(t) {
        return new (t || NgbPanelTitle)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]));
      };

      NgbPanelTitle.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbPanelTitle,
        selectors: [["ng-template", "ngbPanelTitle", ""]]
      });

      NgbPanelTitle.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
        }];
      };
      /**
       * A directive that wraps the accordion panel content.
       */


      var NgbPanelContent = function NgbPanelContent(templateRef) {
        _classCallCheck(this, NgbPanelContent);

        this.templateRef = templateRef;
      };

      NgbPanelContent.ɵfac = function NgbPanelContent_Factory(t) {
        return new (t || NgbPanelContent)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]));
      };

      NgbPanelContent.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbPanelContent,
        selectors: [["ng-template", "ngbPanelContent", ""]]
      });

      NgbPanelContent.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
        }];
      };
      /**
       * A directive that wraps an individual accordion panel with title and collapsible content.
       */


      var NgbPanel = /*#__PURE__*/function () {
        function NgbPanel() {
          _classCallCheck(this, NgbPanel);

          /**
           *  If `true`, the panel is disabled an can't be toggled.
           */
          this.disabled = false;
          /**
           *  An optional id for the panel that must be unique on the page.
           *
           *  If not provided, it will be auto-generated in the `ngb-panel-xxx` format.
           */

          this.id = "ngb-panel-".concat(nextId++);
          this.isOpen = false;
        }

        _createClass(NgbPanel, [{
          key: "ngAfterContentChecked",
          value: function ngAfterContentChecked() {
            // We are using @ContentChildren instead of @ContentChild as in the Angular version being used
            // only @ContentChildren allows us to specify the {descendants: false} option.
            // Without {descendants: false} we are hitting bugs described in:
            // https://github.com/ng-bootstrap/ng-bootstrap/issues/2240
            this.titleTpl = this.titleTpls.first;
            this.headerTpl = this.headerTpls.first;
            this.contentTpl = this.contentTpls.first;
          }
        }]);

        return NgbPanel;
      }();

      NgbPanel.ɵfac = function NgbPanel_Factory(t) {
        return new (t || NgbPanel)();
      };

      NgbPanel.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbPanel,
        selectors: [["ngb-panel"]],
        contentQueries: function NgbPanel_ContentQueries(rf, ctx, dirIndex) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, NgbPanelTitle, false);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, NgbPanelHeader, false);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, NgbPanelContent, false);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.titleTpls = _t);
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.headerTpls = _t);
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.contentTpls = _t);
          }
        },
        inputs: {
          disabled: "disabled",
          id: "id",
          title: "title",
          type: "type",
          cardClass: "cardClass"
        }
      });
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPanel.prototype, "disabled", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPanel.prototype, "id", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPanel.prototype, "title", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPanel.prototype, "type", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPanel.prototype, "cardClass", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"])(NgbPanelTitle, {
        descendants: false
      })], NgbPanel.prototype, "titleTpls", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"])(NgbPanelHeader, {
        descendants: false
      })], NgbPanel.prototype, "headerTpls", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"])(NgbPanelContent, {
        descendants: false
      })], NgbPanel.prototype, "contentTpls", void 0);
      /**
       * Accordion is a collection of collapsible panels (bootstrap cards).
       *
       * It can ensure only one panel is opened at a time and allows to customize panel
       * headers.
       */

      var NgbAccordion = /*#__PURE__*/function () {
        function NgbAccordion(config) {
          _classCallCheck(this, NgbAccordion);

          /**
           * An array or comma separated strings of panel ids that should be opened **initially**.
           *
           * For subsequent changes use methods like `expand()`, `collapse()`, etc. and
           * the `(panelChange)` event.
           */
          this.activeIds = [];
          /**
           * If `true`, panel content will be detached from DOM and not simply hidden when the panel is collapsed.
           */

          this.destroyOnHide = true;
          /**
           * Event emitted right before the panel toggle happens.
           *
           * See [NgbPanelChangeEvent](#/components/accordion/api#NgbPanelChangeEvent) for payload details.
           */

          this.panelChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          this.type = config.type;
          this.closeOtherPanels = config.closeOthers;
        }
        /**
         * Checks if a panel with a given id is expanded.
         */


        _createClass(NgbAccordion, [{
          key: "isExpanded",
          value: function isExpanded(panelId) {
            return this.activeIds.indexOf(panelId) > -1;
          }
          /**
           * Expands a panel with a given id.
           *
           * Has no effect if the panel is already expanded or disabled.
           */

        }, {
          key: "expand",
          value: function expand(panelId) {
            this._changeOpenState(this._findPanelById(panelId), true);
          }
          /**
           * Expands all panels, if `[closeOthers]` is `false`.
           *
           * If `[closeOthers]` is `true`, it will expand the first panel, unless there is already a panel opened.
           */

        }, {
          key: "expandAll",
          value: function expandAll() {
            var _this = this;

            if (this.closeOtherPanels) {
              if (this.activeIds.length === 0 && this.panels.length) {
                this._changeOpenState(this.panels.first, true);
              }
            } else {
              this.panels.forEach(function (panel) {
                return _this._changeOpenState(panel, true);
              });
            }
          }
          /**
           * Collapses a panel with the given id.
           *
           * Has no effect if the panel is already collapsed or disabled.
           */

        }, {
          key: "collapse",
          value: function collapse(panelId) {
            this._changeOpenState(this._findPanelById(panelId), false);
          }
          /**
           * Collapses all opened panels.
           */

        }, {
          key: "collapseAll",
          value: function collapseAll() {
            var _this2 = this;

            this.panels.forEach(function (panel) {
              _this2._changeOpenState(panel, false);
            });
          }
          /**
           * Toggles a panel with the given id.
           *
           * Has no effect if the panel is disabled.
           */

        }, {
          key: "toggle",
          value: function toggle(panelId) {
            var panel = this._findPanelById(panelId);

            if (panel) {
              this._changeOpenState(panel, !panel.isOpen);
            }
          }
        }, {
          key: "ngAfterContentChecked",
          value: function ngAfterContentChecked() {
            var _this3 = this;

            // active id updates
            if (isString(this.activeIds)) {
              this.activeIds = this.activeIds.split(/\s*,\s*/);
            } // update panels open states


            this.panels.forEach(function (panel) {
              return panel.isOpen = !panel.disabled && _this3.activeIds.indexOf(panel.id) > -1;
            }); // closeOthers updates

            if (this.activeIds.length > 1 && this.closeOtherPanels) {
              this._closeOthers(this.activeIds[0]);

              this._updateActiveIds();
            }
          }
        }, {
          key: "_changeOpenState",
          value: function _changeOpenState(panel, nextState) {
            if (panel != null && !panel.disabled && panel.isOpen !== nextState) {
              var defaultPrevented = false;
              this.panelChange.emit({
                panelId: panel.id,
                nextState: nextState,
                preventDefault: function preventDefault() {
                  defaultPrevented = true;
                }
              });

              if (!defaultPrevented) {
                panel.isOpen = nextState;

                if (nextState && this.closeOtherPanels) {
                  this._closeOthers(panel.id);
                }

                this._updateActiveIds();
              }
            }
          }
        }, {
          key: "_closeOthers",
          value: function _closeOthers(panelId) {
            this.panels.forEach(function (panel) {
              if (panel.id !== panelId) {
                panel.isOpen = false;
              }
            });
          }
        }, {
          key: "_findPanelById",
          value: function _findPanelById(panelId) {
            return this.panels.find(function (p) {
              return p.id === panelId;
            }) || null;
          }
        }, {
          key: "_updateActiveIds",
          value: function _updateActiveIds() {
            this.activeIds = this.panels.filter(function (panel) {
              return panel.isOpen && !panel.disabled;
            }).map(function (panel) {
              return panel.id;
            });
          }
        }]);

        return NgbAccordion;
      }();

      NgbAccordion.ɵfac = function NgbAccordion_Factory(t) {
        return new (t || NgbAccordion)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbAccordionConfig));
      };

      NgbAccordion.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: NgbAccordion,
        selectors: [["ngb-accordion"]],
        contentQueries: function NgbAccordion_ContentQueries(rf, ctx, dirIndex) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, NgbPanel, false);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.panels = _t);
          }
        },
        hostAttrs: ["role", "tablist", 1, "accordion"],
        hostVars: 1,
        hostBindings: function NgbAccordion_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("aria-multiselectable", !ctx.closeOtherPanels);
          }
        },
        inputs: {
          activeIds: "activeIds",
          destroyOnHide: "destroyOnHide",
          type: "type",
          closeOtherPanels: ["closeOthers", "closeOtherPanels"]
        },
        outputs: {
          panelChange: "panelChange"
        },
        exportAs: ["ngbAccordion"],
        decls: 3,
        vars: 1,
        consts: [["ngbPanelHeader", ""], ["t", ""], ["ngFor", "", 3, "ngForOf"], [1, "btn", "btn-link", 3, "ngbPanelToggle"], [3, "ngTemplateOutlet"], ["role", "tab", 3, "id"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["role", "tabpanel", "class", "collapse", 3, "id", "show", 4, "ngIf"], ["role", "tabpanel", 1, "collapse", 3, "id"], [1, "card-body"]],
        template: function NgbAccordion_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](0, NgbAccordion_ng_template_0_Template, 3, 3, "ng-template", 0, 1, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplateRefExtractor"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](2, NgbAccordion_ng_template_2_Template, 4, 11, "ng-template", 2);
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx.panels);
          }
        },
        directives: function directives() {
          return [NgbPanelHeader, _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgForOf"], NgbPanelToggle, _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgTemplateOutlet"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgIf"]];
        },
        encapsulation: 2
      });

      NgbAccordion.ctorParameters = function () {
        return [{
          type: NgbAccordionConfig
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"])(NgbPanel)], NgbAccordion.prototype, "panels", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbAccordion.prototype, "activeIds", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])('closeOthers')], NgbAccordion.prototype, "closeOtherPanels", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbAccordion.prototype, "destroyOnHide", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbAccordion.prototype, "type", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbAccordion.prototype, "panelChange", void 0);
      /**
       * A directive to put on a button that toggles panel opening and closing.
       *
       * To be used inside the [`NgbPanelHeader`](#/components/accordion/api#NgbPanelHeader)
       *
       * @since 4.1.0
       */

      var NgbPanelToggle = /*#__PURE__*/function () {
        function NgbPanelToggle(accordion, panel) {
          _classCallCheck(this, NgbPanelToggle);

          this.accordion = accordion;
          this.panel = panel;
        }

        _createClass(NgbPanelToggle, [{
          key: "ngbPanelToggle",
          set: function set(panel) {
            if (panel) {
              this.panel = panel;
            }
          }
        }]);

        return NgbPanelToggle;
      }();

      NgbPanelToggle.ɵfac = function NgbPanelToggle_Factory(t) {
        return new (t || NgbPanelToggle)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbAccordion), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbPanel, 9));
      };

      NgbPanelToggle.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbPanelToggle,
        selectors: [["button", "ngbPanelToggle", ""]],
        hostAttrs: ["type", "button"],
        hostVars: 5,
        hostBindings: function NgbPanelToggle_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function NgbPanelToggle_click_HostBindingHandler() {
              return ctx.accordion.toggle(ctx.panel.id);
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵhostProperty"]("disabled", ctx.panel.disabled);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("aria-expanded", ctx.panel.isOpen)("aria-controls", ctx.panel.id);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("collapsed", !ctx.panel.isOpen);
          }
        },
        inputs: {
          ngbPanelToggle: "ngbPanelToggle"
        }
      });

      NgbPanelToggle.ctorParameters = function () {
        return [{
          type: NgbAccordion
        }, {
          type: NgbPanel,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Host"]
          }]
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPanelToggle.prototype, "ngbPanelToggle", null);
      NgbPanelToggle = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(1, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"])()), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(1, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Host"])())], NgbPanelToggle);
      var NGB_ACCORDION_DIRECTIVES = [NgbAccordion, NgbPanel, NgbPanelTitle, NgbPanelContent, NgbPanelHeader, NgbPanelToggle];

      var NgbAccordionModule = function NgbAccordionModule() {
        _classCallCheck(this, NgbAccordionModule);
      };

      NgbAccordionModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: NgbAccordionModule
      });
      NgbAccordionModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function NgbAccordionModule_Factory(t) {
          return new (t || NgbAccordionModule)();
        },
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]]]
      });
      /**
       * A configuration service for the [NgbAlert](#/components/alert/api#NgbAlert) component.
       *
       * You can inject this service, typically in your root component, and customize its properties
       * to provide default values for all alerts used in the application.
       */

      var NgbAlertConfig = function NgbAlertConfig() {
        _classCallCheck(this, NgbAlertConfig);

        this.dismissible = true;
        this.type = 'warning';
      };

      NgbAlertConfig.ɵfac = function NgbAlertConfig_Factory(t) {
        return new (t || NgbAlertConfig)();
      };

      NgbAlertConfig.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function NgbAlertConfig_Factory() {
          return new NgbAlertConfig();
        },
        token: NgbAlertConfig,
        providedIn: "root"
      });
      /**
       * Alert is a component to provide contextual feedback messages for user.
       *
       * It supports several alert types and can be dismissed.
       */

      var NgbAlert = /*#__PURE__*/function () {
        function NgbAlert(config, _renderer, _element) {
          _classCallCheck(this, NgbAlert);

          this._renderer = _renderer;
          this._element = _element;
          /**
           * An event emitted when the close button is clicked. It has no payload and only relevant for dismissible alerts.
           */

          this.close = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          this.dismissible = config.dismissible;
          this.type = config.type;
        }

        _createClass(NgbAlert, [{
          key: "closeHandler",
          value: function closeHandler() {
            this.close.emit();
          }
        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            var typeChange = changes['type'];

            if (typeChange && !typeChange.firstChange) {
              this._renderer.removeClass(this._element.nativeElement, "alert-".concat(typeChange.previousValue));

              this._renderer.addClass(this._element.nativeElement, "alert-".concat(typeChange.currentValue));
            }
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            this._renderer.addClass(this._element.nativeElement, "alert-".concat(this.type));
          }
        }]);

        return NgbAlert;
      }();

      NgbAlert.ɵfac = function NgbAlert_Factory(t) {
        return new (t || NgbAlert)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbAlertConfig), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]));
      };

      NgbAlert.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: NgbAlert,
        selectors: [["ngb-alert"]],
        hostAttrs: ["role", "alert", 1, "alert"],
        hostVars: 2,
        hostBindings: function NgbAlert_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("alert-dismissible", ctx.dismissible);
          }
        },
        inputs: {
          dismissible: "dismissible",
          type: "type"
        },
        outputs: {
          close: "close"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵNgOnChangesFeature"]],
        ngContentSelectors: _c4,
        decls: 2,
        vars: 1,
        consts: [["type", "button", "class", "close", "aria-label", "Close", 3, "click", 4, "ngIf"], ["type", "button", 1, "close", 3, "click", 6, "aria-label"], ["aria-hidden", "true"]],
        template: function NgbAlert_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵprojectionDef"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵprojection"](0);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, NgbAlert_button_1_Template, 4, 0, "button", 0);
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.dismissible);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["NgIf"]],
        styles: ["ngb-alert{display:block}"],
        encapsulation: 2,
        changeDetection: 0
      });

      NgbAlert.ctorParameters = function () {
        return [{
          type: NgbAlertConfig
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbAlert.prototype, "dismissible", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbAlert.prototype, "type", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbAlert.prototype, "close", void 0);

      var NgbAlertModule = function NgbAlertModule() {
        _classCallCheck(this, NgbAlertModule);
      };

      NgbAlertModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: NgbAlertModule
      });
      NgbAlertModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function NgbAlertModule_Factory(t) {
          return new (t || NgbAlertModule)();
        },
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]]]
      });

      var NgbButtonLabel = function NgbButtonLabel() {
        _classCallCheck(this, NgbButtonLabel);
      };

      NgbButtonLabel.ɵfac = function NgbButtonLabel_Factory(t) {
        return new (t || NgbButtonLabel)();
      };

      NgbButtonLabel.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbButtonLabel,
        selectors: [["", "ngbButtonLabel", ""]],
        hostVars: 8,
        hostBindings: function NgbButtonLabel_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("btn", true)("active", ctx.active)("disabled", ctx.disabled)("focus", ctx.focused);
          }
        }
      });
      var NGB_CHECKBOX_VALUE_ACCESSOR = {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"],
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
          return NgbCheckBox;
        }),
        multi: true
      };
      /**
       * Allows to easily create Bootstrap-style checkbox buttons.
       *
       * Integrates with forms, so the value of a checked button is bound to the underlying form control
       * either in a reactive or template-driven way.
       */

      var NgbCheckBox = /*#__PURE__*/function () {
        function NgbCheckBox(_label, _cd) {
          _classCallCheck(this, NgbCheckBox);

          this._label = _label;
          this._cd = _cd;
          /**
           * If `true`, the checkbox button will be disabled
           */

          this.disabled = false;
          /**
           * The form control value when the checkbox is checked.
           */

          this.valueChecked = true;
          /**
           * The form control value when the checkbox is unchecked.
           */

          this.valueUnChecked = false;

          this.onChange = function (_) {};

          this.onTouched = function () {};
        }

        _createClass(NgbCheckBox, [{
          key: "onInputChange",
          value: function onInputChange($event) {
            var modelToPropagate = $event.target.checked ? this.valueChecked : this.valueUnChecked;
            this.onChange(modelToPropagate);
            this.onTouched();
            this.writeValue(modelToPropagate);
          }
        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.onChange = fn;
          }
        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this.disabled = isDisabled;
            this._label.disabled = isDisabled;
          }
        }, {
          key: "writeValue",
          value: function writeValue(value) {
            this.checked = value === this.valueChecked;
            this._label.active = this.checked; // label won't be updated, if it is inside the OnPush component when [ngModel] changes

            this._cd.markForCheck();
          }
        }, {
          key: "focused",
          set: function set(isFocused) {
            this._label.focused = isFocused;

            if (!isFocused) {
              this.onTouched();
            }
          }
        }]);

        return NgbCheckBox;
      }();

      NgbCheckBox.ɵfac = function NgbCheckBox_Factory(t) {
        return new (t || NgbCheckBox)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbButtonLabel), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]));
      };

      NgbCheckBox.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbCheckBox,
        selectors: [["", "ngbButton", "", "type", "checkbox"]],
        hostVars: 2,
        hostBindings: function NgbCheckBox_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("change", function NgbCheckBox_change_HostBindingHandler($event) {
              return ctx.onInputChange($event);
            })("focus", function NgbCheckBox_focus_HostBindingHandler() {
              return ctx.focused = true;
            })("blur", function NgbCheckBox_blur_HostBindingHandler() {
              return ctx.focused = false;
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵhostProperty"]("checked", ctx.checked)("disabled", ctx.disabled);
          }
        },
        inputs: {
          disabled: "disabled",
          valueChecked: "valueChecked",
          valueUnChecked: "valueUnChecked"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵProvidersFeature"]([NGB_CHECKBOX_VALUE_ACCESSOR])]
      });

      NgbCheckBox.ctorParameters = function () {
        return [{
          type: NgbButtonLabel
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbCheckBox.prototype, "disabled", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbCheckBox.prototype, "valueChecked", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbCheckBox.prototype, "valueUnChecked", void 0);
      var NGB_RADIO_VALUE_ACCESSOR = {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"],
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
          return NgbRadioGroup;
        }),
        multi: true
      };
      var nextId$1 = 0;
      /**
       * Allows to easily create Bootstrap-style radio buttons.
       *
       * Integrates with forms, so the value of a checked button is bound to the underlying form control
       * either in a reactive or template-driven way.
       */

      var NgbRadioGroup = /*#__PURE__*/function () {
        function NgbRadioGroup() {
          _classCallCheck(this, NgbRadioGroup);

          this._radios = new Set();
          this._value = null;
          /**
           * Name of the radio group applied to radio input elements.
           *
           * Will be applied to all radio input elements inside the group,
           * unless [`NgbRadio`](#/components/buttons/api#NgbRadio)'s specify names themselves.
           *
           * If not provided, will be generated in the `ngb-radio-xx` format.
           */

          this.name = "ngb-radio-".concat(nextId$1++);

          this.onChange = function (_) {};

          this.onTouched = function () {};
        }

        _createClass(NgbRadioGroup, [{
          key: "onRadioChange",
          value: function onRadioChange(radio) {
            this.writeValue(radio.value);
            this.onChange(radio.value);
          }
        }, {
          key: "onRadioValueUpdate",
          value: function onRadioValueUpdate() {
            this._updateRadiosValue();
          }
        }, {
          key: "register",
          value: function register(radio) {
            this._radios.add(radio);
          }
        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.onChange = fn;
          }
        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this._disabled = isDisabled;

            this._updateRadiosDisabled();
          }
        }, {
          key: "unregister",
          value: function unregister(radio) {
            this._radios["delete"](radio);
          }
        }, {
          key: "writeValue",
          value: function writeValue(value) {
            this._value = value;

            this._updateRadiosValue();
          }
        }, {
          key: "_updateRadiosValue",
          value: function _updateRadiosValue() {
            var _this4 = this;

            this._radios.forEach(function (radio) {
              return radio.updateValue(_this4._value);
            });
          }
        }, {
          key: "_updateRadiosDisabled",
          value: function _updateRadiosDisabled() {
            this._radios.forEach(function (radio) {
              return radio.updateDisabled();
            });
          }
        }, {
          key: "disabled",
          get: function get() {
            return this._disabled;
          },
          set: function set(isDisabled) {
            this.setDisabledState(isDisabled);
          }
        }]);

        return NgbRadioGroup;
      }();

      NgbRadioGroup.ɵfac = function NgbRadioGroup_Factory(t) {
        return new (t || NgbRadioGroup)();
      };

      NgbRadioGroup.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbRadioGroup,
        selectors: [["", "ngbRadioGroup", ""]],
        hostAttrs: ["role", "radiogroup"],
        inputs: {
          name: "name"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵProvidersFeature"]([NGB_RADIO_VALUE_ACCESSOR])]
      });
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbRadioGroup.prototype, "name", void 0);
      /**
       * A directive that marks an input of type "radio" as a part of the
       * [`NgbRadioGroup`](#/components/buttons/api#NgbRadioGroup).
       */

      var NgbRadio = /*#__PURE__*/function () {
        function NgbRadio(_group, _label, _renderer, _element, _cd) {
          _classCallCheck(this, NgbRadio);

          this._group = _group;
          this._label = _label;
          this._renderer = _renderer;
          this._element = _element;
          this._cd = _cd;
          this._value = null;

          this._group.register(this);

          this.updateDisabled();
        }
        /**
         * The form control value when current radio button is checked.
         */


        _createClass(NgbRadio, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._group.unregister(this);
          }
        }, {
          key: "onChange",
          value: function onChange() {
            this._group.onRadioChange(this);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            // label won't be updated, if it is inside the OnPush component when [ngModel] changes
            if (this.value !== value) {
              this._cd.markForCheck();
            }

            this._checked = this.value === value;
            this._label.active = this._checked;
          }
        }, {
          key: "updateDisabled",
          value: function updateDisabled() {
            this._label.disabled = this.disabled;
          }
        }, {
          key: "value",
          set: function set(value) {
            this._value = value;
            var stringValue = value ? value.toString() : '';

            this._renderer.setProperty(this._element.nativeElement, 'value', stringValue);

            this._group.onRadioValueUpdate();
          }
          /**
           * If `true`, current radio button will be disabled.
           */
          ,
          get: function get() {
            return this._value;
          }
        }, {
          key: "disabled",
          set: function set(isDisabled) {
            this._disabled = isDisabled !== false;
            this.updateDisabled();
          },
          get: function get() {
            return this._group.disabled || this._disabled;
          }
        }, {
          key: "focused",
          set: function set(isFocused) {
            if (this._label) {
              this._label.focused = isFocused;
            }

            if (!isFocused) {
              this._group.onTouched();
            }
          }
        }, {
          key: "checked",
          get: function get() {
            return this._checked;
          }
        }, {
          key: "nameAttr",
          get: function get() {
            return this.name || this._group.name;
          }
        }]);

        return NgbRadio;
      }();

      NgbRadio.ɵfac = function NgbRadio_Factory(t) {
        return new (t || NgbRadio)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbRadioGroup), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbButtonLabel), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]));
      };

      NgbRadio.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbRadio,
        selectors: [["", "ngbButton", "", "type", "radio"]],
        hostVars: 3,
        hostBindings: function NgbRadio_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("change", function NgbRadio_change_HostBindingHandler() {
              return ctx.onChange();
            })("focus", function NgbRadio_focus_HostBindingHandler() {
              return ctx.focused = true;
            })("blur", function NgbRadio_blur_HostBindingHandler() {
              return ctx.focused = false;
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵhostProperty"]("checked", ctx.checked)("disabled", ctx.disabled)("name", ctx.nameAttr);
          }
        },
        inputs: {
          value: "value",
          disabled: "disabled",
          name: "name"
        }
      });

      NgbRadio.ctorParameters = function () {
        return [{
          type: NgbRadioGroup
        }, {
          type: NgbButtonLabel
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbRadio.prototype, "name", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])('value')], NgbRadio.prototype, "value", null);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])('disabled')], NgbRadio.prototype, "disabled", null);
      var NGB_BUTTON_DIRECTIVES = [NgbButtonLabel, NgbCheckBox, NgbRadioGroup, NgbRadio];

      var NgbButtonsModule = function NgbButtonsModule() {
        _classCallCheck(this, NgbButtonsModule);
      };

      NgbButtonsModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: NgbButtonsModule
      });
      NgbButtonsModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function NgbButtonsModule_Factory(t) {
          return new (t || NgbButtonsModule)();
        }
      });
      /**
       * A configuration service for the [NgbCarousel](#/components/carousel/api#NgbCarousel) component.
       *
       * You can inject this service, typically in your root component, and customize its properties
       * to provide default values for all carousels used in the application.
       */

      var NgbCarouselConfig = function NgbCarouselConfig() {
        _classCallCheck(this, NgbCarouselConfig);

        this.interval = 5000;
        this.wrap = true;
        this.keyboard = true;
        this.pauseOnHover = true;
        this.showNavigationArrows = true;
        this.showNavigationIndicators = true;
      };

      NgbCarouselConfig.ɵfac = function NgbCarouselConfig_Factory(t) {
        return new (t || NgbCarouselConfig)();
      };

      NgbCarouselConfig.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function NgbCarouselConfig_Factory() {
          return new NgbCarouselConfig();
        },
        token: NgbCarouselConfig,
        providedIn: "root"
      });
      var nextId$2 = 0;
      /**
       * A directive that wraps the individual carousel slide.
       */

      var NgbSlide = function NgbSlide(tplRef) {
        _classCallCheck(this, NgbSlide);

        this.tplRef = tplRef;
        /**
         * Slide id that must be unique for the entire document.
         *
         * If not provided, will be generated in the `ngb-slide-xx` format.
         */

        this.id = "ngb-slide-".concat(nextId$2++);
      };

      NgbSlide.ɵfac = function NgbSlide_Factory(t) {
        return new (t || NgbSlide)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]));
      };

      NgbSlide.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbSlide,
        selectors: [["ng-template", "ngbSlide", ""]],
        inputs: {
          id: "id"
        }
      });

      NgbSlide.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbSlide.prototype, "id", void 0);
      /**
       * Carousel is a component to easily create and control slideshows.
       *
       * Allows to set intervals, change the way user interacts with the slides and provides a programmatic API.
       */

      var NgbCarousel = /*#__PURE__*/function () {
        function NgbCarousel(config, _platformId, _ngZone, _cd) {
          _classCallCheck(this, NgbCarousel);

          this._platformId = _platformId;
          this._ngZone = _ngZone;
          this._cd = _cd;
          this.NgbSlideEventSource = NgbSlideEventSource;
          this._destroy$ = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
          this._interval$ = new rxjs__WEBPACK_IMPORTED_MODULE_4__["BehaviorSubject"](0);
          this._mouseHover$ = new rxjs__WEBPACK_IMPORTED_MODULE_4__["BehaviorSubject"](false);
          this._pauseOnHover$ = new rxjs__WEBPACK_IMPORTED_MODULE_4__["BehaviorSubject"](false);
          this._pause$ = new rxjs__WEBPACK_IMPORTED_MODULE_4__["BehaviorSubject"](false);
          this._wrap$ = new rxjs__WEBPACK_IMPORTED_MODULE_4__["BehaviorSubject"](false);
          /**
           * An event emitted right after the slide transition is completed.
           *
           * See [`NgbSlideEvent`](#/components/carousel/api#NgbSlideEvent) for payload details.
           */

          this.slide = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          this.interval = config.interval;
          this.wrap = config.wrap;
          this.keyboard = config.keyboard;
          this.pauseOnHover = config.pauseOnHover;
          this.showNavigationArrows = config.showNavigationArrows;
          this.showNavigationIndicators = config.showNavigationIndicators;
        }
        /**
         * Time in milliseconds before the next slide is shown.
         */


        _createClass(NgbCarousel, [{
          key: "mouseEnter",
          value: function mouseEnter() {
            this._mouseHover$.next(true);
          }
        }, {
          key: "mouseLeave",
          value: function mouseLeave() {
            this._mouseHover$.next(false);
          }
        }, {
          key: "ngAfterContentInit",
          value: function ngAfterContentInit() {
            var _this5 = this;

            // setInterval() doesn't play well with SSR and protractor,
            // so we should run it in the browser and outside Angular
            if (Object(_angular_common__WEBPACK_IMPORTED_MODULE_2__["isPlatformBrowser"])(this._platformId)) {
              this._ngZone.runOutsideAngular(function () {
                var hasNextSlide$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["combineLatest"])([_this5.slide.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["map"])(function (slideEvent) {
                  return slideEvent.current;
                }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["startWith"])(_this5.activeId)), _this5._wrap$, _this5.slides.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["startWith"])(null))]).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["map"])(function (_ref) {
                  var _ref2 = _slicedToArray(_ref, 2),
                      currentSlideId = _ref2[0],
                      wrap = _ref2[1];

                  var slideArr = _this5.slides.toArray();

                  var currentSlideIdx = _this5._getSlideIdxById(currentSlideId);

                  return wrap ? slideArr.length > 1 : currentSlideIdx < slideArr.length - 1;
                }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["distinctUntilChanged"])());
                Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["combineLatest"])([_this5._pause$, _this5._pauseOnHover$, _this5._mouseHover$, _this5._interval$, hasNextSlide$]).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["map"])(function (_ref3) {
                  var _ref4 = _slicedToArray(_ref3, 5),
                      pause = _ref4[0],
                      pauseOnHover = _ref4[1],
                      mouseHover = _ref4[2],
                      interval = _ref4[3],
                      hasNextSlide = _ref4[4];

                  return pause || pauseOnHover && mouseHover || !hasNextSlide ? 0 : interval;
                }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["distinctUntilChanged"])(), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["switchMap"])(function (interval) {
                  return interval > 0 ? Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["timer"])(interval, interval) : rxjs__WEBPACK_IMPORTED_MODULE_4__["NEVER"];
                }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["takeUntil"])(_this5._destroy$)).subscribe(function () {
                  return _this5._ngZone.run(function () {
                    return _this5.next(NgbSlideEventSource.TIMER);
                  });
                });
              });
            }

            this.slides.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["takeUntil"])(this._destroy$)).subscribe(function () {
              return _this5._cd.markForCheck();
            });
          }
        }, {
          key: "ngAfterContentChecked",
          value: function ngAfterContentChecked() {
            var activeSlide = this._getSlideById(this.activeId);

            this.activeId = activeSlide ? activeSlide.id : this.slides.length ? this.slides.first.id : '';
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._destroy$.next();
          }
          /**
           * Navigates to a slide with the specified identifier.
           */

        }, {
          key: "select",
          value: function select(slideId, source) {
            this._cycleToSelected(slideId, this._getSlideEventDirection(this.activeId, slideId), source);
          }
          /**
           * Navigates to the previous slide.
           */

        }, {
          key: "prev",
          value: function prev(source) {
            this._cycleToSelected(this._getPrevSlide(this.activeId), NgbSlideEventDirection.RIGHT, source);
          }
          /**
           * Navigates to the next slide.
           */

        }, {
          key: "next",
          value: function next(source) {
            this._cycleToSelected(this._getNextSlide(this.activeId), NgbSlideEventDirection.LEFT, source);
          }
          /**
           * Pauses cycling through the slides.
           */

        }, {
          key: "pause",
          value: function pause() {
            this._pause$.next(true);
          }
          /**
           * Restarts cycling through the slides from left to right.
           */

        }, {
          key: "cycle",
          value: function cycle() {
            this._pause$.next(false);
          }
        }, {
          key: "_cycleToSelected",
          value: function _cycleToSelected(slideIdx, direction, source) {
            var selectedSlide = this._getSlideById(slideIdx);

            if (selectedSlide && selectedSlide.id !== this.activeId) {
              this.slide.emit({
                prev: this.activeId,
                current: selectedSlide.id,
                direction: direction,
                paused: this._pause$.value,
                source: source
              });
              this.activeId = selectedSlide.id;
            } // we get here after the interval fires or any external API call like next(), prev() or select()


            this._cd.markForCheck();
          }
        }, {
          key: "_getSlideEventDirection",
          value: function _getSlideEventDirection(currentActiveSlideId, nextActiveSlideId) {
            var currentActiveSlideIdx = this._getSlideIdxById(currentActiveSlideId);

            var nextActiveSlideIdx = this._getSlideIdxById(nextActiveSlideId);

            return currentActiveSlideIdx > nextActiveSlideIdx ? NgbSlideEventDirection.RIGHT : NgbSlideEventDirection.LEFT;
          }
        }, {
          key: "_getSlideById",
          value: function _getSlideById(slideId) {
            return this.slides.find(function (slide) {
              return slide.id === slideId;
            }) || null;
          }
        }, {
          key: "_getSlideIdxById",
          value: function _getSlideIdxById(slideId) {
            var slide = this._getSlideById(slideId);

            return slide != null ? this.slides.toArray().indexOf(slide) : -1;
          }
        }, {
          key: "_getNextSlide",
          value: function _getNextSlide(currentSlideId) {
            var slideArr = this.slides.toArray();

            var currentSlideIdx = this._getSlideIdxById(currentSlideId);

            var isLastSlide = currentSlideIdx === slideArr.length - 1;
            return isLastSlide ? this.wrap ? slideArr[0].id : slideArr[slideArr.length - 1].id : slideArr[currentSlideIdx + 1].id;
          }
        }, {
          key: "_getPrevSlide",
          value: function _getPrevSlide(currentSlideId) {
            var slideArr = this.slides.toArray();

            var currentSlideIdx = this._getSlideIdxById(currentSlideId);

            var isFirstSlide = currentSlideIdx === 0;
            return isFirstSlide ? this.wrap ? slideArr[slideArr.length - 1].id : slideArr[0].id : slideArr[currentSlideIdx - 1].id;
          }
        }, {
          key: "interval",
          set: function set(value) {
            this._interval$.next(value);
          },
          get: function get() {
            return this._interval$.value;
          }
          /**
           * If `true`, will 'wrap' the carousel by switching from the last slide back to the first.
           */

        }, {
          key: "wrap",
          set: function set(value) {
            this._wrap$.next(value);
          },
          get: function get() {
            return this._wrap$.value;
          }
          /**
           * If `true`, will pause slide switching when mouse cursor hovers the slide.
           *
           * @since 2.2.0
           */

        }, {
          key: "pauseOnHover",
          set: function set(value) {
            this._pauseOnHover$.next(value);
          },
          get: function get() {
            return this._pauseOnHover$.value;
          }
        }]);

        return NgbCarousel;
      }();

      NgbCarousel.ɵfac = function NgbCarousel_Factory(t) {
        return new (t || NgbCarousel)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbCarouselConfig), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["PLATFORM_ID"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]));
      };

      NgbCarousel.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: NgbCarousel,
        selectors: [["ngb-carousel"]],
        contentQueries: function NgbCarousel_ContentQueries(rf, ctx, dirIndex) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, NgbSlide, false);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.slides = _t);
          }
        },
        hostAttrs: ["tabIndex", "0", 1, "carousel", "slide"],
        hostVars: 2,
        hostBindings: function NgbCarousel_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("keydown.arrowLeft", function NgbCarousel_keydown_arrowLeft_HostBindingHandler() {
              return ctx.keyboard && ctx.prev(ctx.NgbSlideEventSource.ARROW_LEFT);
            })("keydown.arrowRight", function NgbCarousel_keydown_arrowRight_HostBindingHandler() {
              return ctx.keyboard && ctx.next(ctx.NgbSlideEventSource.ARROW_RIGHT);
            })("mouseenter", function NgbCarousel_mouseenter_HostBindingHandler() {
              return ctx.mouseEnter();
            })("mouseleave", function NgbCarousel_mouseleave_HostBindingHandler() {
              return ctx.mouseLeave();
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵstyleProp"]("display", "block");
          }
        },
        inputs: {
          interval: "interval",
          wrap: "wrap",
          keyboard: "keyboard",
          pauseOnHover: "pauseOnHover",
          showNavigationArrows: "showNavigationArrows",
          showNavigationIndicators: "showNavigationIndicators",
          activeId: "activeId"
        },
        outputs: {
          slide: "slide"
        },
        exportAs: ["ngbCarousel"],
        decls: 5,
        vars: 4,
        consts: [["class", "carousel-indicators", 4, "ngIf"], [1, "carousel-inner"], ["class", "carousel-item", 3, "active", 4, "ngFor", "ngForOf"], ["class", "carousel-control-prev", "role", "button", 3, "click", 4, "ngIf"], ["class", "carousel-control-next", "role", "button", 3, "click", 4, "ngIf"], [1, "carousel-indicators"], [3, "id", "active", "click", 4, "ngFor", "ngForOf"], [3, "id", "click"], [1, "carousel-item"], [3, "ngTemplateOutlet"], ["role", "button", 1, "carousel-control-prev", 3, "click"], ["aria-hidden", "true", 1, "carousel-control-prev-icon"], [1, "sr-only"], ["role", "button", 1, "carousel-control-next", 3, "click"], ["aria-hidden", "true", 1, "carousel-control-next-icon"]],
        template: function NgbCarousel_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](0, NgbCarousel_ol_0_Template, 2, 1, "ol", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](2, NgbCarousel_div_2_Template, 2, 3, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](3, NgbCarousel_a_3_Template, 4, 0, "a", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](4, NgbCarousel_a_4_Template, 4, 0, "a", 4);
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.showNavigationIndicators);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx.slides);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.showNavigationArrows);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.showNavigationArrows);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["NgIf"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgForOf"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgTemplateOutlet"]],
        encapsulation: 2,
        changeDetection: 0
      });

      NgbCarousel.ctorParameters = function () {
        return [{
          type: NgbCarouselConfig
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["PLATFORM_ID"]]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"])(NgbSlide)], NgbCarousel.prototype, "slides", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbCarousel.prototype, "activeId", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbCarousel.prototype, "interval", null);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbCarousel.prototype, "wrap", null);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbCarousel.prototype, "keyboard", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbCarousel.prototype, "pauseOnHover", null);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbCarousel.prototype, "showNavigationArrows", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbCarousel.prototype, "showNavigationIndicators", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbCarousel.prototype, "slide", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["HostListener"])('mouseenter')], NgbCarousel.prototype, "mouseEnter", null);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["HostListener"])('mouseleave')], NgbCarousel.prototype, "mouseLeave", null);
      NgbCarousel = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(1, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["PLATFORM_ID"]))], NgbCarousel);
      /**
       * Defines the carousel slide transition direction.
       */

      var NgbSlideEventDirection;

      (function (NgbSlideEventDirection) {
        NgbSlideEventDirection[NgbSlideEventDirection["LEFT"] = 'left'] = "LEFT";
        NgbSlideEventDirection[NgbSlideEventDirection["RIGHT"] = 'right'] = "RIGHT";
      })(NgbSlideEventDirection || (NgbSlideEventDirection = {}));

      var NgbSlideEventSource;

      (function (NgbSlideEventSource) {
        NgbSlideEventSource["TIMER"] = "timer";
        NgbSlideEventSource["ARROW_LEFT"] = "arrowLeft";
        NgbSlideEventSource["ARROW_RIGHT"] = "arrowRight";
        NgbSlideEventSource["INDICATOR"] = "indicator";
      })(NgbSlideEventSource || (NgbSlideEventSource = {}));

      var NGB_CAROUSEL_DIRECTIVES = [NgbCarousel, NgbSlide];

      var NgbCarouselModule = function NgbCarouselModule() {
        _classCallCheck(this, NgbCarouselModule);
      };

      NgbCarouselModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: NgbCarouselModule
      });
      NgbCarouselModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function NgbCarouselModule_Factory(t) {
          return new (t || NgbCarouselModule)();
        },
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]]]
      });
      /**
       * A directive to provide a simple way of hiding and showing elements on the page.
       */

      var NgbCollapse = function NgbCollapse() {
        _classCallCheck(this, NgbCollapse);

        /**
         * If `true`, will collapse the element or show it otherwise.
         */
        this.collapsed = false;
      };

      NgbCollapse.ɵfac = function NgbCollapse_Factory(t) {
        return new (t || NgbCollapse)();
      };

      NgbCollapse.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbCollapse,
        selectors: [["", "ngbCollapse", ""]],
        hostVars: 4,
        hostBindings: function NgbCollapse_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("collapse", true)("show", !ctx.collapsed);
          }
        },
        inputs: {
          collapsed: ["ngbCollapse", "collapsed"]
        },
        exportAs: ["ngbCollapse"]
      });
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])('ngbCollapse')], NgbCollapse.prototype, "collapsed", void 0);

      var NgbCollapseModule = function NgbCollapseModule() {
        _classCallCheck(this, NgbCollapseModule);
      };

      NgbCollapseModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: NgbCollapseModule
      });
      NgbCollapseModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function NgbCollapseModule_Factory(t) {
          return new (t || NgbCollapseModule)();
        }
      });
      /**
       * A simple class that represents a date that datepicker also uses internally.
       *
       * It is the implementation of the `NgbDateStruct` interface that adds some convenience methods,
       * like `.equals()`, `.before()`, etc.
       *
       * All datepicker APIs consume `NgbDateStruct`, but return `NgbDate`.
       *
       * In many cases it is simpler to manipulate these objects together with
       * [`NgbCalendar`](#/components/datepicker/api#NgbCalendar) than native JS Dates.
       *
       * See the [date format overview](#/components/datepicker/overview#date-model) for more details.
       *
       * @since 3.0.0
       */

      var NgbDate = /*#__PURE__*/function () {
        function NgbDate(year, month, day) {
          _classCallCheck(this, NgbDate);

          this.year = isInteger(year) ? year : null;
          this.month = isInteger(month) ? month : null;
          this.day = isInteger(day) ? day : null;
        }
        /**
         * A **static method** that creates a new date object from the `NgbDateStruct`,
         *
         * ex. `NgbDate.from({year: 2000, month: 5, day: 1})`.
         *
         * If the `date` is already of `NgbDate` type, the method will return the same object.
         */


        _createClass(NgbDate, [{
          key: "equals",

          /**
           * Checks if the current date is equal to another date.
           */
          value: function equals(other) {
            return other != null && this.year === other.year && this.month === other.month && this.day === other.day;
          }
          /**
           * Checks if the current date is before another date.
           */

        }, {
          key: "before",
          value: function before(other) {
            if (!other) {
              return false;
            }

            if (this.year === other.year) {
              if (this.month === other.month) {
                return this.day === other.day ? false : this.day < other.day;
              } else {
                return this.month < other.month;
              }
            } else {
              return this.year < other.year;
            }
          }
          /**
           * Checks if the current date is after another date.
           */

        }, {
          key: "after",
          value: function after(other) {
            if (!other) {
              return false;
            }

            if (this.year === other.year) {
              if (this.month === other.month) {
                return this.day === other.day ? false : this.day > other.day;
              } else {
                return this.month > other.month;
              }
            } else {
              return this.year > other.year;
            }
          }
        }], [{
          key: "from",
          value: function from(date) {
            if (date instanceof NgbDate) {
              return date;
            }

            return date ? new NgbDate(date.year, date.month, date.day) : null;
          }
        }]);

        return NgbDate;
      }();

      function fromJSDate(jsDate) {
        return new NgbDate(jsDate.getFullYear(), jsDate.getMonth() + 1, jsDate.getDate());
      }

      function toJSDate(date) {
        var jsDate = new Date(date.year, date.month - 1, date.day, 12); // this is done avoid 30 -> 1930 conversion

        if (!isNaN(jsDate.getTime())) {
          jsDate.setFullYear(date.year);
        }

        return jsDate;
      }

      function NGB_DATEPICKER_CALENDAR_FACTORY() {
        return new NgbCalendarGregorian();
      }
      /**
       * A service that represents the calendar used by the datepicker.
       *
       * The default implementation uses the Gregorian calendar. You can inject it in your own
       * implementations if necessary to simplify `NgbDate` calculations.
       */


      var NgbCalendar = function NgbCalendar() {
        _classCallCheck(this, NgbCalendar);
      };

      NgbCalendar.ɵfac = function NgbCalendar_Factory(t) {
        return new (t || NgbCalendar)();
      };

      NgbCalendar.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: NGB_DATEPICKER_CALENDAR_FACTORY,
        token: NgbCalendar,
        providedIn: "root"
      });

      var NgbCalendarGregorian = /*#__PURE__*/function (_NgbCalendar) {
        _inherits(NgbCalendarGregorian, _NgbCalendar);

        var _super = _createSuper(NgbCalendarGregorian);

        function NgbCalendarGregorian() {
          _classCallCheck(this, NgbCalendarGregorian);

          return _super.apply(this, arguments);
        }

        _createClass(NgbCalendarGregorian, [{
          key: "getDaysPerWeek",
          value: function getDaysPerWeek() {
            return 7;
          }
        }, {
          key: "getMonths",
          value: function getMonths() {
            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
          }
        }, {
          key: "getWeeksPerMonth",
          value: function getWeeksPerMonth() {
            return 6;
          }
        }, {
          key: "getNext",
          value: function getNext(date) {
            var period = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'd';
            var number = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
            var jsDate = toJSDate(date);
            var checkMonth = true;
            var expectedMonth = jsDate.getMonth();

            switch (period) {
              case 'y':
                jsDate.setFullYear(jsDate.getFullYear() + number);
                break;

              case 'm':
                expectedMonth += number;
                jsDate.setMonth(expectedMonth);
                expectedMonth = expectedMonth % 12;

                if (expectedMonth < 0) {
                  expectedMonth = expectedMonth + 12;
                }

                break;

              case 'd':
                jsDate.setDate(jsDate.getDate() + number);
                checkMonth = false;
                break;

              default:
                return date;
            }

            if (checkMonth && jsDate.getMonth() !== expectedMonth) {
              // this means the destination month has less days than the initial month
              // let's go back to the end of the previous month:
              jsDate.setDate(0);
            }

            return fromJSDate(jsDate);
          }
        }, {
          key: "getPrev",
          value: function getPrev(date) {
            var period = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'd';
            var number = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
            return this.getNext(date, period, -number);
          }
        }, {
          key: "getWeekday",
          value: function getWeekday(date) {
            var jsDate = toJSDate(date);
            var day = jsDate.getDay(); // in JS Date Sun=0, in ISO 8601 Sun=7

            return day === 0 ? 7 : day;
          }
        }, {
          key: "getWeekNumber",
          value: function getWeekNumber(week, firstDayOfWeek) {
            // in JS Date Sun=0, in ISO 8601 Sun=7
            if (firstDayOfWeek === 7) {
              firstDayOfWeek = 0;
            }

            var thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;
            var date = week[thursdayIndex];
            var jsDate = toJSDate(date);
            jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7)); // Thursday

            var time = jsDate.getTime();
            jsDate.setMonth(0); // Compare with Jan 1

            jsDate.setDate(1);
            return Math.floor(Math.round((time - jsDate.getTime()) / 86400000) / 7) + 1;
          }
        }, {
          key: "getToday",
          value: function getToday() {
            return fromJSDate(new Date());
          }
        }, {
          key: "isValid",
          value: function isValid(date) {
            if (!date || !isInteger(date.year) || !isInteger(date.month) || !isInteger(date.day)) {
              return false;
            } // year 0 doesn't exist in Gregorian calendar


            if (date.year === 0) {
              return false;
            }

            var jsDate = toJSDate(date);
            return !isNaN(jsDate.getTime()) && jsDate.getFullYear() === date.year && jsDate.getMonth() + 1 === date.month && jsDate.getDate() === date.day;
          }
        }]);

        return NgbCalendarGregorian;
      }(NgbCalendar);

      NgbCalendarGregorian.ɵfac = function NgbCalendarGregorian_Factory(t) {
        return ɵNgbCalendarGregorian_BaseFactory(t || NgbCalendarGregorian);
      };

      NgbCalendarGregorian.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: NgbCalendarGregorian,
        factory: NgbCalendarGregorian.ɵfac
      });

      function isChangedDate(prev, next) {
        return !dateComparator(prev, next);
      }

      function isChangedMonth(prev, next) {
        return !prev && !next ? false : !prev || !next ? true : prev.year !== next.year || prev.month !== next.month;
      }

      function dateComparator(prev, next) {
        return !prev && !next || !!prev && !!next && prev.equals(next);
      }

      function checkMinBeforeMax(minDate, maxDate) {
        if (maxDate && minDate && maxDate.before(minDate)) {
          throw new Error("'maxDate' ".concat(maxDate, " should be greater than 'minDate' ").concat(minDate));
        }
      }

      function checkDateInRange(date, minDate, maxDate) {
        if (date && minDate && date.before(minDate)) {
          return minDate;
        }

        if (date && maxDate && date.after(maxDate)) {
          return maxDate;
        }

        return date || null;
      }

      function isDateSelectable(date, state) {
        var minDate = state.minDate,
            maxDate = state.maxDate,
            disabled = state.disabled,
            markDisabled = state.markDisabled; // clang-format off

        return !(date === null || date === undefined || disabled || markDisabled && markDisabled(date, {
          year: date.year,
          month: date.month
        }) || minDate && date.before(minDate) || maxDate && date.after(maxDate)); // clang-format on
      }

      function generateSelectBoxMonths(calendar, date, minDate, maxDate) {
        if (!date) {
          return [];
        }

        var months = calendar.getMonths(date.year);

        if (minDate && date.year === minDate.year) {
          var index = months.findIndex(function (month) {
            return month === minDate.month;
          });
          months = months.slice(index);
        }

        if (maxDate && date.year === maxDate.year) {
          var _index = months.findIndex(function (month) {
            return month === maxDate.month;
          });

          months = months.slice(0, _index + 1);
        }

        return months;
      }

      function generateSelectBoxYears(date, minDate, maxDate) {
        if (!date) {
          return [];
        }

        var start = minDate ? Math.max(minDate.year, date.year - 500) : date.year - 10;
        var end = maxDate ? Math.min(maxDate.year, date.year + 500) : date.year + 10;
        var length = end - start + 1;
        var numbers = Array(length);

        for (var i = 0; i < length; i++) {
          numbers[i] = start + i;
        }

        return numbers;
      }

      function nextMonthDisabled(calendar, date, maxDate) {
        var nextDate = Object.assign(calendar.getNext(date, 'm'), {
          day: 1
        });
        return maxDate != null && nextDate.after(maxDate);
      }

      function prevMonthDisabled(calendar, date, minDate) {
        var prevDate = Object.assign(calendar.getPrev(date, 'm'), {
          day: 1
        });
        return minDate != null && (prevDate.year === minDate.year && prevDate.month < minDate.month || prevDate.year < minDate.year && minDate.month === 1);
      }

      function buildMonths(calendar, date, state, i18n, force) {
        var displayMonths = state.displayMonths,
            months = state.months; // move old months to a temporary array

        var monthsToReuse = months.splice(0, months.length); // generate new first dates, nullify or reuse months

        var firstDates = Array.from({
          length: displayMonths
        }, function (_, i) {
          var firstDate = Object.assign(calendar.getNext(date, 'm', i), {
            day: 1
          });
          months[i] = null;

          if (!force) {
            var reusedIndex = monthsToReuse.findIndex(function (month) {
              return month.firstDate.equals(firstDate);
            }); // move reused month back to months

            if (reusedIndex !== -1) {
              months[i] = monthsToReuse.splice(reusedIndex, 1)[0];
            }
          }

          return firstDate;
        }); // rebuild nullified months

        firstDates.forEach(function (firstDate, i) {
          if (months[i] === null) {
            months[i] = buildMonth(calendar, firstDate, state, i18n, monthsToReuse.shift() || {});
          }
        });
        return months;
      }

      function buildMonth(calendar, date, state, i18n) {
        var month = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
        var dayTemplateData = state.dayTemplateData,
            minDate = state.minDate,
            maxDate = state.maxDate,
            firstDayOfWeek = state.firstDayOfWeek,
            markDisabled = state.markDisabled,
            outsideDays = state.outsideDays;
        var calendarToday = calendar.getToday();
        month.firstDate = null;
        month.lastDate = null;
        month.number = date.month;
        month.year = date.year;
        month.weeks = month.weeks || [];
        month.weekdays = month.weekdays || [];
        date = getFirstViewDate(calendar, date, firstDayOfWeek); // month has weeks

        for (var week = 0; week < calendar.getWeeksPerMonth(); week++) {
          var weekObject = month.weeks[week];

          if (!weekObject) {
            weekObject = month.weeks[week] = {
              number: 0,
              days: [],
              collapsed: true
            };
          }

          var days = weekObject.days; // week has days

          for (var day = 0; day < calendar.getDaysPerWeek(); day++) {
            if (week === 0) {
              month.weekdays[day] = calendar.getWeekday(date);
            }

            var newDate = new NgbDate(date.year, date.month, date.day);
            var nextDate = calendar.getNext(newDate);
            var ariaLabel = i18n.getDayAriaLabel(newDate); // marking date as disabled

            var disabled = !!(minDate && newDate.before(minDate) || maxDate && newDate.after(maxDate));

            if (!disabled && markDisabled) {
              disabled = markDisabled(newDate, {
                month: month.number,
                year: month.year
              });
            } // today


            var today = newDate.equals(calendarToday); // adding user-provided data to the context

            var contextUserData = dayTemplateData ? dayTemplateData(newDate, {
              month: month.number,
              year: month.year
            }) : undefined; // saving first date of the month

            if (month.firstDate === null && newDate.month === month.number) {
              month.firstDate = newDate;
            } // saving last date of the month


            if (newDate.month === month.number && nextDate.month !== month.number) {
              month.lastDate = newDate;
            }

            var dayObject = days[day];

            if (!dayObject) {
              dayObject = days[day] = {};
            }

            dayObject.date = newDate;
            dayObject.context = Object.assign(dayObject.context || {}, {
              $implicit: newDate,
              date: newDate,
              data: contextUserData,
              currentMonth: month.number,
              currentYear: month.year,
              disabled: disabled,
              focused: false,
              selected: false,
              today: today
            });
            dayObject.tabindex = -1;
            dayObject.ariaLabel = ariaLabel;
            dayObject.hidden = false;
            date = nextDate;
          }

          weekObject.number = calendar.getWeekNumber(days.map(function (day) {
            return day.date;
          }), firstDayOfWeek); // marking week as collapsed

          weekObject.collapsed = outsideDays === 'collapsed' && days[0].date.month !== month.number && days[days.length - 1].date.month !== month.number;
        }

        return month;
      }

      function getFirstViewDate(calendar, date, firstDayOfWeek) {
        var daysPerWeek = calendar.getDaysPerWeek();
        var firstMonthDate = new NgbDate(date.year, date.month, 1);
        var dayOfWeek = calendar.getWeekday(firstMonthDate) % daysPerWeek;
        return calendar.getPrev(firstMonthDate, 'd', (daysPerWeek + dayOfWeek - firstDayOfWeek) % daysPerWeek);
      }

      function NGB_DATEPICKER_18N_FACTORY(locale) {
        return new NgbDatepickerI18nDefault(locale);
      }
      /**
       * A service supplying i18n data to the datepicker component.
       *
       * The default implementation of this service uses the Angular locale and registered locale data for
       * weekdays and month names (as explained in the Angular i18n guide).
       *
       * It also provides a way to i18n data that depends on calendar calculations, like aria labels, day, week and year
       * numerals. For other static labels the datepicker uses the default Angular i18n.
       *
       * See the [i18n demo](#/components/datepicker/examples#i18n) and
       * [Hebrew calendar demo](#/components/datepicker/calendars#hebrew) on how to extend this class and define
       * a custom provider for i18n.
       */


      var NgbDatepickerI18n = /*#__PURE__*/function () {
        function NgbDatepickerI18n() {
          _classCallCheck(this, NgbDatepickerI18n);
        }

        _createClass(NgbDatepickerI18n, [{
          key: "getDayNumerals",

          /**
           * Returns the textual representation of a day that is rendered in a day cell.
           *
           * @since 3.0.0
           */
          value: function getDayNumerals(date) {
            return "".concat(date.day);
          }
          /**
           * Returns the textual representation of a week number rendered by datepicker.
           *
           * @since 3.0.0
           */

        }, {
          key: "getWeekNumerals",
          value: function getWeekNumerals(weekNumber) {
            return "".concat(weekNumber);
          }
          /**
           * Returns the textual representation of a year that is rendered in the datepicker year select box.
           *
           * @since 3.0.0
           */

        }, {
          key: "getYearNumerals",
          value: function getYearNumerals(year) {
            return "".concat(year);
          }
        }]);

        return NgbDatepickerI18n;
      }();

      NgbDatepickerI18n.ɵfac = function NgbDatepickerI18n_Factory(t) {
        return new (t || NgbDatepickerI18n)();
      };

      NgbDatepickerI18n.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function NgbDatepickerI18n_Factory() {
          return NGB_DATEPICKER_18N_FACTORY(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["LOCALE_ID"]));
        },
        token: NgbDatepickerI18n,
        providedIn: "root"
      });

      var NgbDatepickerI18nDefault = /*#__PURE__*/function (_NgbDatepickerI18n) {
        _inherits(NgbDatepickerI18nDefault, _NgbDatepickerI18n);

        var _super2 = _createSuper(NgbDatepickerI18nDefault);

        function NgbDatepickerI18nDefault(_locale) {
          var _this6;

          _classCallCheck(this, NgbDatepickerI18nDefault);

          _this6 = _super2.call(this);
          _this6._locale = _locale;
          var weekdaysStartingOnSunday = Object(_angular_common__WEBPACK_IMPORTED_MODULE_2__["getLocaleDayNames"])(_locale, _angular_common__WEBPACK_IMPORTED_MODULE_2__["FormStyle"].Standalone, _angular_common__WEBPACK_IMPORTED_MODULE_2__["TranslationWidth"].Short);
          _this6._weekdaysShort = weekdaysStartingOnSunday.map(function (day, index) {
            return weekdaysStartingOnSunday[(index + 1) % 7];
          });
          _this6._monthsShort = Object(_angular_common__WEBPACK_IMPORTED_MODULE_2__["getLocaleMonthNames"])(_locale, _angular_common__WEBPACK_IMPORTED_MODULE_2__["FormStyle"].Standalone, _angular_common__WEBPACK_IMPORTED_MODULE_2__["TranslationWidth"].Abbreviated);
          _this6._monthsFull = Object(_angular_common__WEBPACK_IMPORTED_MODULE_2__["getLocaleMonthNames"])(_locale, _angular_common__WEBPACK_IMPORTED_MODULE_2__["FormStyle"].Standalone, _angular_common__WEBPACK_IMPORTED_MODULE_2__["TranslationWidth"].Wide);
          return _this6;
        }

        _createClass(NgbDatepickerI18nDefault, [{
          key: "getWeekdayShortName",
          value: function getWeekdayShortName(weekday) {
            return this._weekdaysShort[weekday - 1] || '';
          }
        }, {
          key: "getMonthShortName",
          value: function getMonthShortName(month) {
            return this._monthsShort[month - 1] || '';
          }
        }, {
          key: "getMonthFullName",
          value: function getMonthFullName(month) {
            return this._monthsFull[month - 1] || '';
          }
        }, {
          key: "getDayAriaLabel",
          value: function getDayAriaLabel(date) {
            var jsDate = new Date(date.year, date.month - 1, date.day);
            return Object(_angular_common__WEBPACK_IMPORTED_MODULE_2__["formatDate"])(jsDate, 'fullDate', this._locale);
          }
        }]);

        return NgbDatepickerI18nDefault;
      }(NgbDatepickerI18n);

      NgbDatepickerI18nDefault.ɵfac = function NgbDatepickerI18nDefault_Factory(t) {
        return new (t || NgbDatepickerI18nDefault)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["LOCALE_ID"]));
      };

      NgbDatepickerI18nDefault.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: NgbDatepickerI18nDefault,
        factory: NgbDatepickerI18nDefault.ɵfac
      });

      NgbDatepickerI18nDefault.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["LOCALE_ID"]]
          }]
        }];
      };

      NgbDatepickerI18nDefault = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(0, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["LOCALE_ID"]))], NgbDatepickerI18nDefault);

      var NgbDatepickerService = /*#__PURE__*/function () {
        function NgbDatepickerService(_calendar, _i18n) {
          var _this7 = this;

          _classCallCheck(this, NgbDatepickerService);

          this._calendar = _calendar;
          this._i18n = _i18n;
          this._VALIDATORS = {
            dayTemplateData: function dayTemplateData(_dayTemplateData) {
              if (_this7._state.dayTemplateData !== _dayTemplateData) {
                return {
                  dayTemplateData: _dayTemplateData
                };
              }
            },
            displayMonths: function displayMonths(_displayMonths) {
              _displayMonths = toInteger(_displayMonths);

              if (isInteger(_displayMonths) && _displayMonths > 0 && _this7._state.displayMonths !== _displayMonths) {
                return {
                  displayMonths: _displayMonths
                };
              }
            },
            disabled: function disabled(_disabled) {
              if (_this7._state.disabled !== _disabled) {
                return {
                  disabled: _disabled
                };
              }
            },
            firstDayOfWeek: function firstDayOfWeek(_firstDayOfWeek) {
              _firstDayOfWeek = toInteger(_firstDayOfWeek);

              if (isInteger(_firstDayOfWeek) && _firstDayOfWeek >= 0 && _this7._state.firstDayOfWeek !== _firstDayOfWeek) {
                return {
                  firstDayOfWeek: _firstDayOfWeek
                };
              }
            },
            focusVisible: function focusVisible(_focusVisible) {
              if (_this7._state.focusVisible !== _focusVisible && !_this7._state.disabled) {
                return {
                  focusVisible: _focusVisible
                };
              }
            },
            markDisabled: function markDisabled(_markDisabled) {
              if (_this7._state.markDisabled !== _markDisabled) {
                return {
                  markDisabled: _markDisabled
                };
              }
            },
            maxDate: function maxDate(date) {
              var maxDate = _this7.toValidDate(date, null);

              if (isChangedDate(_this7._state.maxDate, maxDate)) {
                return {
                  maxDate: maxDate
                };
              }
            },
            minDate: function minDate(date) {
              var minDate = _this7.toValidDate(date, null);

              if (isChangedDate(_this7._state.minDate, minDate)) {
                return {
                  minDate: minDate
                };
              }
            },
            navigation: function navigation(_navigation) {
              if (_this7._state.navigation !== _navigation) {
                return {
                  navigation: _navigation
                };
              }
            },
            outsideDays: function outsideDays(_outsideDays) {
              if (_this7._state.outsideDays !== _outsideDays) {
                return {
                  outsideDays: _outsideDays
                };
              }
            }
          };
          this._model$ = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
          this._dateSelect$ = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
          this._state = {
            dayTemplateData: null,
            markDisabled: null,
            maxDate: null,
            minDate: null,
            disabled: false,
            displayMonths: 1,
            firstDate: null,
            firstDayOfWeek: 1,
            lastDate: null,
            focusDate: null,
            focusVisible: false,
            months: [],
            navigation: 'select',
            outsideDays: 'visible',
            prevDisabled: false,
            nextDisabled: false,
            selectedDate: null,
            selectBoxes: {
              years: [],
              months: []
            }
          };
        }

        _createClass(NgbDatepickerService, [{
          key: "set",
          value: function set(options) {
            var _this8 = this;

            var patch = Object.keys(options).map(function (key) {
              return _this8._VALIDATORS[key](options[key]);
            }).reduce(function (obj, part) {
              return Object.assign(Object.assign({}, obj), part);
            }, {});

            if (Object.keys(patch).length > 0) {
              this._nextState(patch);
            }
          }
        }, {
          key: "focus",
          value: function focus(date) {
            var focusedDate = this.toValidDate(date, null);

            if (focusedDate != null && !this._state.disabled && isChangedDate(this._state.focusDate, focusedDate)) {
              this._nextState({
                focusDate: date
              });
            }
          }
        }, {
          key: "focusSelect",
          value: function focusSelect() {
            if (isDateSelectable(this._state.focusDate, this._state)) {
              this.select(this._state.focusDate, {
                emitEvent: true
              });
            }
          }
        }, {
          key: "open",
          value: function open(date) {
            var firstDate = this.toValidDate(date, this._calendar.getToday());

            if (firstDate != null && !this._state.disabled && (!this._state.firstDate || isChangedMonth(this._state.firstDate, firstDate))) {
              this._nextState({
                firstDate: firstDate
              });
            }
          }
        }, {
          key: "select",
          value: function select(date) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var selectedDate = this.toValidDate(date, null);

            if (selectedDate != null && !this._state.disabled) {
              if (isChangedDate(this._state.selectedDate, selectedDate)) {
                this._nextState({
                  selectedDate: selectedDate
                });
              }

              if (options.emitEvent && isDateSelectable(selectedDate, this._state)) {
                this._dateSelect$.next(selectedDate);
              }
            }
          }
        }, {
          key: "toValidDate",
          value: function toValidDate(date, defaultValue) {
            var ngbDate = NgbDate.from(date);

            if (defaultValue === undefined) {
              defaultValue = this._calendar.getToday();
            }

            return this._calendar.isValid(ngbDate) ? ngbDate : defaultValue;
          }
        }, {
          key: "getMonth",
          value: function getMonth(struct) {
            var _iterator = _createForOfIteratorHelper(this._state.months),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var month = _step.value;

                if (struct.month === month.number && struct.year === month.year) {
                  return month;
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            throw new Error("month ".concat(struct.month, " of year ").concat(struct.year, " not found"));
          }
        }, {
          key: "_nextState",
          value: function _nextState(patch) {
            var newState = this._updateState(patch);

            this._patchContexts(newState);

            this._state = newState;

            this._model$.next(this._state);
          }
        }, {
          key: "_patchContexts",
          value: function _patchContexts(state) {
            var months = state.months,
                displayMonths = state.displayMonths,
                selectedDate = state.selectedDate,
                focusDate = state.focusDate,
                focusVisible = state.focusVisible,
                disabled = state.disabled,
                outsideDays = state.outsideDays;
            state.months.forEach(function (month) {
              month.weeks.forEach(function (week) {
                week.days.forEach(function (day) {
                  // patch focus flag
                  if (focusDate) {
                    day.context.focused = focusDate.equals(day.date) && focusVisible;
                  } // calculating tabindex


                  day.tabindex = !disabled && focusDate && day.date.equals(focusDate) && focusDate.month === month.number ? 0 : -1; // override context disabled

                  if (disabled === true) {
                    day.context.disabled = true;
                  } // patch selection flag


                  if (selectedDate !== undefined) {
                    day.context.selected = selectedDate !== null && selectedDate.equals(day.date);
                  } // visibility


                  if (month.number !== day.date.month) {
                    day.hidden = outsideDays === 'hidden' || outsideDays === 'collapsed' || displayMonths > 1 && day.date.after(months[0].firstDate) && day.date.before(months[displayMonths - 1].lastDate);
                  }
                });
              });
            });
          }
        }, {
          key: "_updateState",
          value: function _updateState(patch) {
            // patching fields
            var state = Object.assign({}, this._state, patch);
            var startDate = state.firstDate; // min/max dates changed

            if ('minDate' in patch || 'maxDate' in patch) {
              checkMinBeforeMax(state.minDate, state.maxDate);
              state.focusDate = checkDateInRange(state.focusDate, state.minDate, state.maxDate);
              state.firstDate = checkDateInRange(state.firstDate, state.minDate, state.maxDate);
              startDate = state.focusDate;
            } // disabled


            if ('disabled' in patch) {
              state.focusVisible = false;
            } // initial rebuild via 'select()'


            if ('selectedDate' in patch && this._state.months.length === 0) {
              startDate = state.selectedDate;
            } // terminate early if only focus visibility was changed


            if ('focusVisible' in patch) {
              return state;
            } // focus date changed


            if ('focusDate' in patch) {
              state.focusDate = checkDateInRange(state.focusDate, state.minDate, state.maxDate);
              startDate = state.focusDate; // nothing to rebuild if only focus changed and it is still visible

              if (state.months.length !== 0 && state.focusDate && !state.focusDate.before(state.firstDate) && !state.focusDate.after(state.lastDate)) {
                return state;
              }
            } // first date changed


            if ('firstDate' in patch) {
              state.firstDate = checkDateInRange(state.firstDate, state.minDate, state.maxDate);
              startDate = state.firstDate;
            } // rebuilding months


            if (startDate) {
              var forceRebuild = 'dayTemplateData' in patch || 'firstDayOfWeek' in patch || 'markDisabled' in patch || 'minDate' in patch || 'maxDate' in patch || 'disabled' in patch || 'outsideDays' in patch;
              var months = buildMonths(this._calendar, startDate, state, this._i18n, forceRebuild); // updating months and boundary dates

              state.months = months;
              state.firstDate = months[0].firstDate;
              state.lastDate = months[months.length - 1].lastDate; // reset selected date if 'markDisabled' returns true

              if ('selectedDate' in patch && !isDateSelectable(state.selectedDate, state)) {
                state.selectedDate = null;
              } // adjusting focus after months were built


              if ('firstDate' in patch) {
                if (!state.focusDate || state.focusDate.before(state.firstDate) || state.focusDate.after(state.lastDate)) {
                  state.focusDate = startDate;
                }
              } // adjusting months/years for the select box navigation


              var yearChanged = !this._state.firstDate || this._state.firstDate.year !== state.firstDate.year;
              var monthChanged = !this._state.firstDate || this._state.firstDate.month !== state.firstDate.month;

              if (state.navigation === 'select') {
                // years ->  boundaries (min/max were changed)
                if ('minDate' in patch || 'maxDate' in patch || state.selectBoxes.years.length === 0 || yearChanged) {
                  state.selectBoxes.years = generateSelectBoxYears(state.firstDate, state.minDate, state.maxDate);
                } // months -> when current year or boundaries change


                if ('minDate' in patch || 'maxDate' in patch || state.selectBoxes.months.length === 0 || yearChanged) {
                  state.selectBoxes.months = generateSelectBoxMonths(this._calendar, state.firstDate, state.minDate, state.maxDate);
                }
              } else {
                state.selectBoxes = {
                  years: [],
                  months: []
                };
              } // updating navigation arrows -> boundaries change (min/max) or month/year changes


              if ((state.navigation === 'arrows' || state.navigation === 'select') && (monthChanged || yearChanged || 'minDate' in patch || 'maxDate' in patch || 'disabled' in patch)) {
                state.prevDisabled = state.disabled || prevMonthDisabled(this._calendar, state.firstDate, state.minDate);
                state.nextDisabled = state.disabled || nextMonthDisabled(this._calendar, state.lastDate, state.maxDate);
              }
            }

            return state;
          }
        }, {
          key: "model$",
          get: function get() {
            return this._model$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["filter"])(function (model) {
              return model.months.length > 0;
            }));
          }
        }, {
          key: "dateSelect$",
          get: function get() {
            return this._dateSelect$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["filter"])(function (date) {
              return date !== null;
            }));
          }
        }]);

        return NgbDatepickerService;
      }();

      NgbDatepickerService.ɵfac = function NgbDatepickerService_Factory(t) {
        return new (t || NgbDatepickerService)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](NgbCalendar), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](NgbDatepickerI18n));
      };

      NgbDatepickerService.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: NgbDatepickerService,
        factory: NgbDatepickerService.ɵfac
      });

      NgbDatepickerService.ctorParameters = function () {
        return [{
          type: NgbCalendar
        }, {
          type: NgbDatepickerI18n
        }];
      }; // clang-format on


      var NavigationEvent;

      (function (NavigationEvent) {
        NavigationEvent[NavigationEvent["PREV"] = 0] = "PREV";
        NavigationEvent[NavigationEvent["NEXT"] = 1] = "NEXT";
      })(NavigationEvent || (NavigationEvent = {}));
      /**
       * A configuration service for the [`NgbDatepicker`](#/components/datepicker/api#NgbDatepicker) component.
       *
       * You can inject this service, typically in your root component, and customize the values of its properties in
       * order to provide default values for all the datepickers used in the application.
       */


      var NgbDatepickerConfig = function NgbDatepickerConfig() {
        _classCallCheck(this, NgbDatepickerConfig);

        this.displayMonths = 1;
        this.firstDayOfWeek = 1;
        this.navigation = 'select';
        this.outsideDays = 'visible';
        this.showWeekdays = true;
        this.showWeekNumbers = false;
      };

      NgbDatepickerConfig.ɵfac = function NgbDatepickerConfig_Factory(t) {
        return new (t || NgbDatepickerConfig)();
      };

      NgbDatepickerConfig.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function NgbDatepickerConfig_Factory() {
          return new NgbDatepickerConfig();
        },
        token: NgbDatepickerConfig,
        providedIn: "root"
      });

      function NGB_DATEPICKER_DATE_ADAPTER_FACTORY() {
        return new NgbDateStructAdapter();
      }
      /**
       * An abstract service that does the conversion between the internal datepicker `NgbDateStruct` model and
       * any provided user date model `D`, ex. a string, a native date, etc.
       *
       * The adapter is used **only** for conversion when binding datepicker to a form control,
       * ex. `[(ngModel)]="userDateModel"`. Here `userDateModel` can be of any type.
       *
       * The default datepicker implementation assumes we use `NgbDateStruct` as a user model.
       *
       * See the [date format overview](#/components/datepicker/overview#date-model) for more details
       * and the [custom adapter demo](#/components/datepicker/examples#adapter) for an example.
       */


      var NgbDateAdapter = function NgbDateAdapter() {
        _classCallCheck(this, NgbDateAdapter);
      };

      NgbDateAdapter.ɵfac = function NgbDateAdapter_Factory(t) {
        return new (t || NgbDateAdapter)();
      };

      NgbDateAdapter.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: NGB_DATEPICKER_DATE_ADAPTER_FACTORY,
        token: NgbDateAdapter,
        providedIn: "root"
      });

      var NgbDateStructAdapter = /*#__PURE__*/function (_NgbDateAdapter) {
        _inherits(NgbDateStructAdapter, _NgbDateAdapter);

        var _super3 = _createSuper(NgbDateStructAdapter);

        function NgbDateStructAdapter() {
          _classCallCheck(this, NgbDateStructAdapter);

          return _super3.apply(this, arguments);
        }

        _createClass(NgbDateStructAdapter, [{
          key: "fromModel",

          /**
           * Converts a NgbDateStruct value into NgbDateStruct value
           */
          value: function fromModel(date) {
            return date && isInteger(date.year) && isInteger(date.month) && isInteger(date.day) ? {
              year: date.year,
              month: date.month,
              day: date.day
            } : null;
          }
          /**
           * Converts a NgbDateStruct value into NgbDateStruct value
           */

        }, {
          key: "toModel",
          value: function toModel(date) {
            return date && isInteger(date.year) && isInteger(date.month) && isInteger(date.day) ? {
              year: date.year,
              month: date.month,
              day: date.day
            } : null;
          }
        }]);

        return NgbDateStructAdapter;
      }(NgbDateAdapter);

      NgbDateStructAdapter.ɵfac = function NgbDateStructAdapter_Factory(t) {
        return ɵNgbDateStructAdapter_BaseFactory(t || NgbDateStructAdapter);
      };

      NgbDateStructAdapter.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: NgbDateStructAdapter,
        factory: NgbDateStructAdapter.ɵfac
      });
      var NGB_DATEPICKER_VALUE_ACCESSOR = {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"],
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
          return NgbDatepicker;
        }),
        multi: true
      };
      /**
       * A directive that marks the content template that customizes the way datepicker months are displayed
       *
       * @since 5.3.0
       */

      var NgbDatepickerContent = function NgbDatepickerContent(templateRef) {
        _classCallCheck(this, NgbDatepickerContent);

        this.templateRef = templateRef;
      };

      NgbDatepickerContent.ɵfac = function NgbDatepickerContent_Factory(t) {
        return new (t || NgbDatepickerContent)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]));
      };

      NgbDatepickerContent.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbDatepickerContent,
        selectors: [["ng-template", "ngbDatepickerContent", ""]]
      });

      NgbDatepickerContent.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
        }];
      };
      /**
       * A highly configurable component that helps you with selecting calendar dates.
       *
       * `NgbDatepicker` is meant to be displayed inline on a page or put inside a popup.
       */


      var NgbDatepicker = /*#__PURE__*/function () {
        function NgbDatepicker(_service, _calendar, i18n, config, cd, _elementRef, _ngbDateAdapter, _ngZone) {
          var _this9 = this;

          _classCallCheck(this, NgbDatepicker);

          this._service = _service;
          this._calendar = _calendar;
          this.i18n = i18n;
          this._elementRef = _elementRef;
          this._ngbDateAdapter = _ngbDateAdapter;
          this._ngZone = _ngZone;
          this._controlValue = null;
          this._destroyed$ = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
          this._publicState = {};
          /**
           * An event emitted right before the navigation happens and displayed month changes.
           *
           * See [`NgbDatepickerNavigateEvent`](#/components/datepicker/api#NgbDatepickerNavigateEvent) for the payload info.
           */

          this.navigate = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          /**
           * An event emitted when user selects a date using keyboard or mouse.
           *
           * The payload of the event is currently selected `NgbDate`.
           *
           * @since 5.2.0
           */

          this.dateSelect = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          /**
           * An event emitted when user selects a date using keyboard or mouse.
           *
           * The payload of the event is currently selected `NgbDate`.
           *
           * @deprecated 6.0.0 Please use 'dateSelect' output instead due to collision with native
           * 'select' event.
           */

          this.select = this.dateSelect;

          this.onChange = function (_) {};

          this.onTouched = function () {};

          ['dayTemplate', 'dayTemplateData', 'displayMonths', 'firstDayOfWeek', 'footerTemplate', 'markDisabled', 'minDate', 'maxDate', 'navigation', 'outsideDays', 'showWeekdays', 'showWeekNumbers', 'startDate'].forEach(function (input) {
            return _this9[input] = config[input];
          });

          _service.dateSelect$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["takeUntil"])(this._destroyed$)).subscribe(function (date) {
            _this9.dateSelect.emit(date);
          });

          _service.model$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["takeUntil"])(this._destroyed$)).subscribe(function (model) {
            var newDate = model.firstDate;
            var oldDate = _this9.model ? _this9.model.firstDate : null; // update public state

            _this9._publicState = {
              maxDate: model.maxDate,
              minDate: model.minDate,
              firstDate: model.firstDate,
              lastDate: model.lastDate,
              focusedDate: model.focusDate,
              months: model.months.map(function (viewModel) {
                return viewModel.firstDate;
              })
            };
            var navigationPrevented = false; // emitting navigation event if the first month changes

            if (!newDate.equals(oldDate)) {
              _this9.navigate.emit({
                current: oldDate ? {
                  year: oldDate.year,
                  month: oldDate.month
                } : null,
                next: {
                  year: newDate.year,
                  month: newDate.month
                },
                preventDefault: function preventDefault() {
                  return navigationPrevented = true;
                }
              }); // can't prevent the very first navigation


              if (navigationPrevented && oldDate !== null) {
                _this9._service.open(oldDate);

                return;
              }
            }

            var newSelectedDate = model.selectedDate;
            var newFocusedDate = model.focusDate;
            var oldFocusedDate = _this9.model ? _this9.model.focusDate : null;
            _this9.model = model; // handling selection change

            if (isChangedDate(newSelectedDate, _this9._controlValue)) {
              _this9._controlValue = newSelectedDate;

              _this9.onTouched();

              _this9.onChange(_this9._ngbDateAdapter.toModel(newSelectedDate));
            } // handling focus change


            if (isChangedDate(newFocusedDate, oldFocusedDate) && oldFocusedDate && model.focusVisible) {
              _this9.focus();
            }

            cd.markForCheck();
          });
        }
        /**
         *  Returns the readonly public state of the datepicker
         *
         * @since 5.2.0
         */


        _createClass(NgbDatepicker, [{
          key: "focusDate",

          /**
           *  Focuses on given date.
           */
          value: function focusDate(date) {
            this._service.focus(NgbDate.from(date));
          }
          /**
           *  Selects focused date.
           */

        }, {
          key: "focusSelect",
          value: function focusSelect() {
            this._service.focusSelect();
          }
        }, {
          key: "focus",
          value: function focus() {
            var _this10 = this;

            this._ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["take"])(1)).subscribe(function () {
              var elementToFocus = _this10._elementRef.nativeElement.querySelector('div.ngb-dp-day[tabindex="0"]');

              if (elementToFocus) {
                elementToFocus.focus();
              }
            });
          }
          /**
           * Navigates to the provided date.
           *
           * With the default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.
           * If nothing or invalid date provided calendar will open current month.
           *
           * Use the `[startDate]` input as an alternative.
           */

        }, {
          key: "navigateTo",
          value: function navigateTo(date) {
            this._service.open(NgbDate.from(date ? date.day ? date : Object.assign(Object.assign({}, date), {
              day: 1
            }) : null));
          }
        }, {
          key: "ngAfterViewInit",
          value: function ngAfterViewInit() {
            var _this11 = this;

            this._ngZone.runOutsideAngular(function () {
              var focusIns$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["fromEvent"])(_this11._contentEl.nativeElement, 'focusin');
              var focusOuts$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["fromEvent"])(_this11._contentEl.nativeElement, 'focusout');
              var nativeElement = _this11._elementRef.nativeElement; // we're changing 'focusVisible' only when entering or leaving months view
              // and ignoring all focus events where both 'target' and 'related' target are day cells

              Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["merge"])(focusIns$, focusOuts$).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["filter"])(function (_ref5) {
                var target = _ref5.target,
                    relatedTarget = _ref5.relatedTarget;
                return !(hasClassName(target, 'ngb-dp-day') && hasClassName(relatedTarget, 'ngb-dp-day') && nativeElement.contains(target) && nativeElement.contains(relatedTarget));
              }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["takeUntil"])(_this11._destroyed$)).subscribe(function (_ref6) {
                var type = _ref6.type;
                return _this11._ngZone.run(function () {
                  return _this11._service.set({
                    focusVisible: type === 'focusin'
                  });
                });
              });
            });
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._destroyed$.next();
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            var _this12 = this;

            if (this.model === undefined) {
              var inputs = {};
              ['dayTemplateData', 'displayMonths', 'markDisabled', 'firstDayOfWeek', 'navigation', 'minDate', 'maxDate', 'outsideDays'].forEach(function (name) {
                return inputs[name] = _this12[name];
              });

              this._service.set(inputs);

              this.navigateTo(this.startDate);
            }

            if (!this.dayTemplate) {
              this.dayTemplate = this._defaultDayTemplate;
            }
          }
        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            var _this13 = this;

            var inputs = {};
            ['dayTemplateData', 'displayMonths', 'markDisabled', 'firstDayOfWeek', 'navigation', 'minDate', 'maxDate', 'outsideDays'].filter(function (name) {
              return name in changes;
            }).forEach(function (name) {
              return inputs[name] = _this13[name];
            });

            this._service.set(inputs);

            if ('startDate' in changes) {
              var _changes$startDate = changes.startDate,
                  currentValue = _changes$startDate.currentValue,
                  previousValue = _changes$startDate.previousValue;

              if (isChangedMonth(previousValue, currentValue)) {
                this.navigateTo(this.startDate);
              }
            }
          }
        }, {
          key: "onDateSelect",
          value: function onDateSelect(date) {
            this._service.focus(date);

            this._service.select(date, {
              emitEvent: true
            });
          }
        }, {
          key: "onNavigateDateSelect",
          value: function onNavigateDateSelect(date) {
            this._service.open(date);
          }
        }, {
          key: "onNavigateEvent",
          value: function onNavigateEvent(event) {
            switch (event) {
              case NavigationEvent.PREV:
                this._service.open(this._calendar.getPrev(this.model.firstDate, 'm', 1));

                break;

              case NavigationEvent.NEXT:
                this._service.open(this._calendar.getNext(this.model.firstDate, 'm', 1));

                break;
            }
          }
        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.onChange = fn;
          }
        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
        }, {
          key: "setDisabledState",
          value: function setDisabledState(disabled) {
            this._service.set({
              disabled: disabled
            });
          }
        }, {
          key: "writeValue",
          value: function writeValue(value) {
            this._controlValue = NgbDate.from(this._ngbDateAdapter.fromModel(value));

            this._service.select(this._controlValue);
          }
        }, {
          key: "state",
          get: function get() {
            return this._publicState;
          }
          /**
           *  Returns the calendar service used in the specific datepicker instance.
           *
           *  @since 5.3.0
           */

        }, {
          key: "calendar",
          get: function get() {
            return this._calendar;
          }
        }]);

        return NgbDatepicker;
      }();

      NgbDatepicker.ɵfac = function NgbDatepicker_Factory(t) {
        return new (t || NgbDatepicker)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbDatepickerService), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbCalendar), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbDatepickerI18n), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbDatepickerConfig), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbDateAdapter), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]));
      };

      NgbDatepicker.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: NgbDatepicker,
        selectors: [["ngb-datepicker"]],
        contentQueries: function NgbDatepicker_ContentQueries(rf, ctx, dirIndex) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵstaticContentQuery"](dirIndex, NgbDatepickerContent, true);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.contentTemplate = _t.first);
          }
        },
        viewQuery: function NgbDatepicker_Query(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵstaticViewQuery"](_c9, true);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵstaticViewQuery"](_c10, true);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx._defaultDayTemplate = _t.first);
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx._contentEl = _t.first);
          }
        },
        inputs: {
          dayTemplate: "dayTemplate",
          dayTemplateData: "dayTemplateData",
          displayMonths: "displayMonths",
          firstDayOfWeek: "firstDayOfWeek",
          footerTemplate: "footerTemplate",
          markDisabled: "markDisabled",
          maxDate: "maxDate",
          minDate: "minDate",
          navigation: "navigation",
          outsideDays: "outsideDays",
          showWeekdays: "showWeekdays",
          showWeekNumbers: "showWeekNumbers",
          startDate: "startDate"
        },
        outputs: {
          navigate: "navigate",
          dateSelect: "dateSelect",
          select: "select"
        },
        exportAs: ["ngbDatepicker"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵProvidersFeature"]([NGB_DATEPICKER_VALUE_ACCESSOR, NgbDatepickerService]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵNgOnChangesFeature"]],
        decls: 10,
        vars: 5,
        consts: [["defaultDayTemplate", ""], ["defaultContentTemplate", ""], [1, "ngb-dp-header"], [3, "date", "months", "disabled", "showSelect", "prevDisabled", "nextDisabled", "selectBoxes", "navigate", "select", 4, "ngIf"], [1, "ngb-dp-content"], ["content", ""], [3, "ngTemplateOutlet"], ["ngbDatepickerDayView", "", 3, "date", "currentMonth", "selected", "disabled", "focused"], ["class", "ngb-dp-month", 4, "ngFor", "ngForOf"], [1, "ngb-dp-month"], ["class", "ngb-dp-month-name", 4, "ngIf"], [3, "month"], [1, "ngb-dp-month-name"], [3, "date", "months", "disabled", "showSelect", "prevDisabled", "nextDisabled", "selectBoxes", "navigate", "select"]],
        template: function NgbDatepicker_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](0, NgbDatepicker_ng_template_0_Template, 1, 5, "ng-template", null, 0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplateRefExtractor"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](2, NgbDatepicker_ng_template_2_Template, 1, 1, "ng-template", null, 1, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplateRefExtractor"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](4, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](5, NgbDatepicker_ngb_datepicker_navigation_5_Template, 1, 7, "ngb-datepicker-navigation", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](6, "div", 4, 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](8, NgbDatepicker_ng_template_8_Template, 0, 0, "ng-template", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](9, NgbDatepicker_ng_template_9_Template, 0, 0, "ng-template", 6);
          }

          if (rf & 2) {
            var _r29 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](5);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.navigation !== "none");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("ngb-dp-months", !ctx.contentTemplate);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngTemplateOutlet", (ctx.contentTemplate == null ? null : ctx.contentTemplate.templateRef) || _r29);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngTemplateOutlet", ctx.footerTemplate);
          }
        },
        directives: function directives() {
          return [_angular_common__WEBPACK_IMPORTED_MODULE_2__["NgIf"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgTemplateOutlet"], NgbDatepickerDayView, _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgForOf"], NgbDatepickerMonth, NgbDatepickerNavigation];
        },
        styles: ["ngb-datepicker{border:1px solid #dfdfdf;border-radius:.25rem;display:inline-block}ngb-datepicker-month{pointer-events:auto}ngb-datepicker.dropdown-menu{padding:0}.ngb-dp-body{z-index:1050}.ngb-dp-header{border-bottom:0;border-radius:.25rem .25rem 0 0;padding-top:.25rem;background-color:#f8f9fa;background-color:var(--light)}.ngb-dp-months{display:-ms-flexbox;display:flex}.ngb-dp-month{pointer-events:none}.ngb-dp-month-name{font-size:larger;height:2rem;line-height:2rem;text-align:center;background-color:#f8f9fa;background-color:var(--light)}.ngb-dp-month+.ngb-dp-month .ngb-dp-month-name,.ngb-dp-month+.ngb-dp-month .ngb-dp-week{padding-left:1rem}.ngb-dp-month:last-child .ngb-dp-week{padding-right:.25rem}.ngb-dp-month:first-child .ngb-dp-week{padding-left:.25rem}.ngb-dp-month .ngb-dp-week:last-child{padding-bottom:.25rem}"],
        encapsulation: 2,
        changeDetection: 0
      });

      NgbDatepicker.ctorParameters = function () {
        return [{
          type: NgbDatepickerService
        }, {
          type: NgbCalendar
        }, {
          type: NgbDatepickerI18n
        }, {
          type: NgbDatepickerConfig
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: NgbDateAdapter
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('defaultDayTemplate', {
        "static": true
      })], NgbDatepicker.prototype, "_defaultDayTemplate", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('content', {
        "static": true
      })], NgbDatepicker.prototype, "_contentEl", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"])(NgbDatepickerContent, {
        "static": true
      })], NgbDatepicker.prototype, "contentTemplate", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepicker.prototype, "dayTemplate", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepicker.prototype, "dayTemplateData", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepicker.prototype, "displayMonths", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepicker.prototype, "firstDayOfWeek", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepicker.prototype, "footerTemplate", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepicker.prototype, "markDisabled", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepicker.prototype, "maxDate", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepicker.prototype, "minDate", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepicker.prototype, "navigation", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepicker.prototype, "outsideDays", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepicker.prototype, "showWeekdays", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepicker.prototype, "showWeekNumbers", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepicker.prototype, "startDate", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbDatepicker.prototype, "navigate", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbDatepicker.prototype, "dateSelect", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbDatepicker.prototype, "select", void 0);
      var Key;

      (function (Key) {
        Key[Key["Tab"] = 9] = "Tab";
        Key[Key["Enter"] = 13] = "Enter";
        Key[Key["Escape"] = 27] = "Escape";
        Key[Key["Space"] = 32] = "Space";
        Key[Key["PageUp"] = 33] = "PageUp";
        Key[Key["PageDown"] = 34] = "PageDown";
        Key[Key["End"] = 35] = "End";
        Key[Key["Home"] = 36] = "Home";
        Key[Key["ArrowLeft"] = 37] = "ArrowLeft";
        Key[Key["ArrowUp"] = 38] = "ArrowUp";
        Key[Key["ArrowRight"] = 39] = "ArrowRight";
        Key[Key["ArrowDown"] = 40] = "ArrowDown";
      })(Key || (Key = {}));
      /**
       * A service that represents the keyboard navigation.
       *
       * Default keyboard shortcuts [are documented in the overview](#/components/datepicker/overview#keyboard-shortcuts)
       *
       * @since 5.2.0
       */


      var NgbDatepickerKeyboardService = /*#__PURE__*/function () {
        function NgbDatepickerKeyboardService() {
          _classCallCheck(this, NgbDatepickerKeyboardService);
        }

        _createClass(NgbDatepickerKeyboardService, [{
          key: "processKey",

          /**
           * Processes a keyboard event.
           */
          value: function processKey(event, datepicker) {
            var state = datepicker.state,
                calendar = datepicker.calendar; // tslint:disable-next-line:deprecation

            switch (event.which) {
              case Key.PageUp:
                datepicker.focusDate(calendar.getPrev(state.focusedDate, event.shiftKey ? 'y' : 'm', 1));
                break;

              case Key.PageDown:
                datepicker.focusDate(calendar.getNext(state.focusedDate, event.shiftKey ? 'y' : 'm', 1));
                break;

              case Key.End:
                datepicker.focusDate(event.shiftKey ? state.maxDate : state.lastDate);
                break;

              case Key.Home:
                datepicker.focusDate(event.shiftKey ? state.minDate : state.firstDate);
                break;

              case Key.ArrowLeft:
                datepicker.focusDate(calendar.getPrev(state.focusedDate, 'd', 1));
                break;

              case Key.ArrowUp:
                datepicker.focusDate(calendar.getPrev(state.focusedDate, 'd', calendar.getDaysPerWeek()));
                break;

              case Key.ArrowRight:
                datepicker.focusDate(calendar.getNext(state.focusedDate, 'd', 1));
                break;

              case Key.ArrowDown:
                datepicker.focusDate(calendar.getNext(state.focusedDate, 'd', calendar.getDaysPerWeek()));
                break;

              case Key.Enter:
              case Key.Space:
                datepicker.focusSelect();
                break;

              default:
                return;
            }

            event.preventDefault();
            event.stopPropagation();
          }
        }]);

        return NgbDatepickerKeyboardService;
      }();

      NgbDatepickerKeyboardService.ɵfac = function NgbDatepickerKeyboardService_Factory(t) {
        return new (t || NgbDatepickerKeyboardService)();
      };

      NgbDatepickerKeyboardService.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function NgbDatepickerKeyboardService_Factory() {
          return new NgbDatepickerKeyboardService();
        },
        token: NgbDatepickerKeyboardService,
        providedIn: "root"
      });
      /**
       * A component that renders one month including all the days, weekdays and week numbers. Can be used inside
       * the `<ng-template ngbDatepickerMonths></ng-template>` when you want to customize months layout.
       *
       * For a usage example, see [custom month layout demo](#/components/datepicker/examples#custommonth)
       *
       * @since 5.3.0
       */

      var NgbDatepickerMonth = /*#__PURE__*/function () {
        function NgbDatepickerMonth(i18n, datepicker, _keyboardService, _service) {
          _classCallCheck(this, NgbDatepickerMonth);

          this.i18n = i18n;
          this.datepicker = datepicker;
          this._keyboardService = _keyboardService;
          this._service = _service;
        }
        /**
         * The first date of month to be rendered.
         *
         * This month must one of the months present in the
         * [datepicker state](#/components/datepicker/api#NgbDatepickerState).
         */


        _createClass(NgbDatepickerMonth, [{
          key: "onKeyDown",
          value: function onKeyDown(event) {
            this._keyboardService.processKey(event, this.datepicker);
          }
        }, {
          key: "doSelect",
          value: function doSelect(day) {
            if (!day.context.disabled && !day.hidden) {
              this.datepicker.onDateSelect(day.date);
            }
          }
        }, {
          key: "month",
          set: function set(month) {
            this.viewModel = this._service.getMonth(month);
          }
        }]);

        return NgbDatepickerMonth;
      }();

      NgbDatepickerMonth.ɵfac = function NgbDatepickerMonth_Factory(t) {
        return new (t || NgbDatepickerMonth)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbDatepickerI18n), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbDatepicker), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbDatepickerKeyboardService), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbDatepickerService));
      };

      NgbDatepickerMonth.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: NgbDatepickerMonth,
        selectors: [["ngb-datepicker-month"]],
        hostAttrs: ["role", "grid"],
        hostBindings: function NgbDatepickerMonth_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("keydown", function NgbDatepickerMonth_keydown_HostBindingHandler($event) {
              return ctx.onKeyDown($event);
            });
          }
        },
        inputs: {
          month: "month"
        },
        decls: 2,
        vars: 2,
        consts: [["class", "ngb-dp-week ngb-dp-weekdays", "role", "row", 4, "ngIf"], ["ngFor", "", 3, "ngForOf"], ["role", "row", 1, "ngb-dp-week", "ngb-dp-weekdays"], ["class", "ngb-dp-weekday ngb-dp-showweek", 4, "ngIf"], ["class", "ngb-dp-weekday small", "role", "columnheader", 4, "ngFor", "ngForOf"], [1, "ngb-dp-weekday", "ngb-dp-showweek"], ["role", "columnheader", 1, "ngb-dp-weekday", "small"], ["class", "ngb-dp-week", "role", "row", 4, "ngIf"], ["role", "row", 1, "ngb-dp-week"], ["class", "ngb-dp-week-number small text-muted", 4, "ngIf"], ["class", "ngb-dp-day", "role", "gridcell", 3, "disabled", "tabindex", "hidden", "ngb-dp-today", "click", 4, "ngFor", "ngForOf"], [1, "ngb-dp-week-number", "small", "text-muted"], ["role", "gridcell", 1, "ngb-dp-day", 3, "tabindex", "click"], [3, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"]],
        template: function NgbDatepickerMonth_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](0, NgbDatepickerMonth_div_0_Template, 3, 2, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, NgbDatepickerMonth_ng_template_1_Template, 1, 1, "ng-template", 1);
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.datepicker.showWeekdays);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx.viewModel.weeks);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["NgIf"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgForOf"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgTemplateOutlet"]],
        styles: ["ngb-datepicker-month{display:block}.ngb-dp-week-number,.ngb-dp-weekday{line-height:2rem;text-align:center;font-style:italic}.ngb-dp-weekday{color:#5bc0de;color:var(--info)}.ngb-dp-week{border-radius:.25rem;display:-ms-flexbox;display:flex}.ngb-dp-weekdays{border-bottom:1px solid rgba(0,0,0,.125);border-radius:0;background-color:#f8f9fa;background-color:var(--light)}.ngb-dp-day,.ngb-dp-week-number,.ngb-dp-weekday{width:2rem;height:2rem}.ngb-dp-day{cursor:pointer}.ngb-dp-day.disabled,.ngb-dp-day.hidden{cursor:default;pointer-events:none}.ngb-dp-day[tabindex=\"0\"]{z-index:1}"],
        encapsulation: 2
      });

      NgbDatepickerMonth.ctorParameters = function () {
        return [{
          type: NgbDatepickerI18n
        }, {
          type: NgbDatepicker
        }, {
          type: NgbDatepickerKeyboardService
        }, {
          type: NgbDatepickerService
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepickerMonth.prototype, "month", null);

      var NgbDatepickerNavigation = /*#__PURE__*/function () {
        function NgbDatepickerNavigation(i18n) {
          _classCallCheck(this, NgbDatepickerNavigation);

          this.i18n = i18n;
          this.navigation = NavigationEvent;
          this.months = [];
          this.navigate = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          this.select = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        }

        _createClass(NgbDatepickerNavigation, [{
          key: "onClickPrev",
          value: function onClickPrev(event) {
            event.currentTarget.focus();
            this.navigate.emit(this.navigation.PREV);
          }
        }, {
          key: "onClickNext",
          value: function onClickNext(event) {
            event.currentTarget.focus();
            this.navigate.emit(this.navigation.NEXT);
          }
        }]);

        return NgbDatepickerNavigation;
      }();

      NgbDatepickerNavigation.ɵfac = function NgbDatepickerNavigation_Factory(t) {
        return new (t || NgbDatepickerNavigation)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbDatepickerI18n));
      };

      NgbDatepickerNavigation.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: NgbDatepickerNavigation,
        selectors: [["ngb-datepicker-navigation"]],
        inputs: {
          months: "months",
          date: "date",
          disabled: "disabled",
          showSelect: "showSelect",
          prevDisabled: "prevDisabled",
          nextDisabled: "nextDisabled",
          selectBoxes: "selectBoxes"
        },
        outputs: {
          navigate: "navigate",
          select: "select"
        },
        decls: 10,
        vars: 4,
        consts: [[1, "ngb-dp-arrow"], ["type", "button", 1, "btn", "btn-link", "ngb-dp-arrow-btn", 3, "disabled", "click", 6, "aria-label", "title"], [1, "ngb-dp-navigation-chevron"], ["class", "ngb-dp-navigation-select", 3, "date", "disabled", "months", "years", "select", 4, "ngIf"], [4, "ngIf"], [1, "ngb-dp-arrow", "right"], [1, "ngb-dp-navigation-select", 3, "date", "disabled", "months", "years", "select"], ["ngFor", "", 3, "ngForOf"], ["class", "ngb-dp-arrow", 4, "ngIf"], [1, "ngb-dp-month-name"]],
        template: function NgbDatepickerNavigation_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "button", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18nAttributes"](2, _c15);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function NgbDatepickerNavigation_Template_button_click_1_listener($event) {
              return ctx.onClickPrev($event);
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](3, "span", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](4, NgbDatepickerNavigation_ngb_datepicker_navigation_select_4_Template, 1, 4, "ngb-datepicker-navigation-select", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](5, NgbDatepickerNavigation_5_Template, 1, 1, undefined, 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](6, "div", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](7, "button", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18nAttributes"](8, _c20);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function NgbDatepickerNavigation_Template_button_click_7_listener($event) {
              return ctx.onClickNext($event);
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](9, "span", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("disabled", ctx.prevDisabled);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.showSelect);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", !ctx.showSelect);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("disabled", ctx.nextDisabled);
          }
        },
        directives: function directives() {
          return [_angular_common__WEBPACK_IMPORTED_MODULE_2__["NgIf"], NgbDatepickerNavigationSelect, _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgForOf"]];
        },
        styles: ["ngb-datepicker-navigation{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.ngb-dp-navigation-chevron{border-style:solid;border-width:.2em .2em 0 0;display:inline-block;width:.75em;height:.75em;margin-left:.25em;margin-right:.15em;-webkit-transform:rotate(-135deg);transform:rotate(-135deg)}.right .ngb-dp-navigation-chevron{-webkit-transform:rotate(45deg);transform:rotate(45deg);margin-left:.15em;margin-right:.25em}.ngb-dp-arrow{display:-ms-flexbox;display:flex;-ms-flex:1 1 auto;flex:1 1 auto;padding-right:0;padding-left:0;margin:0;width:2rem;height:2rem}.ngb-dp-arrow.right{-ms-flex-pack:end;justify-content:flex-end}.ngb-dp-arrow-btn{padding:0 .25rem;margin:0 .5rem;border:none;background-color:transparent;z-index:1}.ngb-dp-arrow-btn:focus{outline-width:1px;outline-style:auto}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.ngb-dp-arrow-btn:focus{outline-style:solid}}.ngb-dp-month-name{font-size:larger;height:2rem;line-height:2rem;text-align:center}.ngb-dp-navigation-select{display:-ms-flexbox;display:flex;-ms-flex:1 1 9rem;flex:1 1 9rem}"],
        encapsulation: 2,
        changeDetection: 0
      });

      NgbDatepickerNavigation.ctorParameters = function () {
        return [{
          type: NgbDatepickerI18n
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepickerNavigation.prototype, "date", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepickerNavigation.prototype, "disabled", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepickerNavigation.prototype, "months", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepickerNavigation.prototype, "showSelect", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepickerNavigation.prototype, "prevDisabled", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepickerNavigation.prototype, "nextDisabled", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepickerNavigation.prototype, "selectBoxes", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbDatepickerNavigation.prototype, "navigate", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbDatepickerNavigation.prototype, "select", void 0);

      var isContainedIn = function isContainedIn(element, array) {
        return array ? array.some(function (item) {
          return item.contains(element);
        }) : false;
      };

      var ɵ0 = isContainedIn;

      var matchesSelectorIfAny = function matchesSelectorIfAny(element, selector) {
        return !selector || closest(element, selector) != null;
      };

      var ɵ1 = matchesSelectorIfAny;

      var ɵ2 = function ɵ2() {
        var isIOS = function isIOS() {
          return /iPad|iPhone|iPod/.test(navigator.userAgent) || /Macintosh/.test(navigator.userAgent) && navigator.maxTouchPoints && navigator.maxTouchPoints > 2;
        };

        var isAndroid = function isAndroid() {
          return /Android/.test(navigator.userAgent);
        };

        return typeof navigator !== 'undefined' ? !!navigator.userAgent && (isIOS() || isAndroid()) : false;
      }; // we have to add a more significant delay to avoid re-opening when handling (click) on a toggling element
      // TODO: use proper Angular platform detection when NgbAutoClose becomes a service and we can inject PLATFORM_ID


      var isMobile = ɵ2(); // setting 'ngbAutoClose' synchronously on mobile results in immediate popup closing
      // when tapping on the triggering element

      var wrapAsyncForMobile = function wrapAsyncForMobile(fn) {
        return isMobile ? function () {
          return setTimeout(function () {
            return fn();
          }, 100);
        } : fn;
      };

      var ɵ3 = wrapAsyncForMobile;

      function ngbAutoClose(zone, document, type, close, closed$, insideElements, ignoreElements, insideSelector) {
        // closing on ESC and outside clicks
        if (type) {
          zone.runOutsideAngular(wrapAsyncForMobile(function () {
            var shouldCloseOnClick = function shouldCloseOnClick(event) {
              var element = event.target;

              if (event.button === 2 || isContainedIn(element, ignoreElements)) {
                return false;
              }

              if (type === 'inside') {
                return isContainedIn(element, insideElements) && matchesSelectorIfAny(element, insideSelector);
              } else if (type === 'outside') {
                return !isContainedIn(element, insideElements);
              } else
                /* if (type === true) */
                {
                  return matchesSelectorIfAny(element, insideSelector) || !isContainedIn(element, insideElements);
                }
            };

            var escapes$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["fromEvent"])(document, 'keydown').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["takeUntil"])(closed$), // tslint:disable-next-line:deprecation
            Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["filter"])(function (e) {
              return e.which === Key.Escape;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["tap"])(function (e) {
              return e.preventDefault();
            })); // we have to pre-calculate 'shouldCloseOnClick' on 'mousedown',
            // because on 'mouseup' DOM nodes might be detached

            var mouseDowns$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["fromEvent"])(document, 'mousedown').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["map"])(shouldCloseOnClick), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["takeUntil"])(closed$));
            var closeableClicks$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["fromEvent"])(document, 'mouseup').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["withLatestFrom"])(mouseDowns$), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["filter"])(function (_ref7) {
              var _ref8 = _slicedToArray(_ref7, 2),
                  _ = _ref8[0],
                  shouldClose = _ref8[1];

              return shouldClose;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["delay"])(0), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["takeUntil"])(closed$));
            Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["race"])([escapes$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["map"])(function (_) {
              return 0;
            }
            /* ESCAPE */
            )), closeableClicks$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["map"])(function (_) {
              return 1;
            }
            /* CLICK */
            ))]).subscribe(function (source) {
              return zone.run(function () {
                return close(source);
              });
            });
          }));
        }
      }

      var FOCUSABLE_ELEMENTS_SELECTOR = ['a[href]', 'button:not([disabled])', 'input:not([disabled]):not([type="hidden"])', 'select:not([disabled])', 'textarea:not([disabled])', '[contenteditable]', '[tabindex]:not([tabindex="-1"])'].join(', ');
      /**
       * Returns first and last focusable elements inside of a given element based on specific CSS selector
       */

      function getFocusableBoundaryElements(element) {
        var list = Array.from(element.querySelectorAll(FOCUSABLE_ELEMENTS_SELECTOR)).filter(function (el) {
          return el.tabIndex !== -1;
        });
        return [list[0], list[list.length - 1]];
      }
      /**
       * Function that enforces browser focus to be trapped inside a DOM element.
       *
       * Works only for clicks inside the element and navigation with 'Tab', ignoring clicks outside of the element
       *
       * @param zone Angular zone
       * @param element The element around which focus will be trapped inside
       * @param stopFocusTrap$ The observable stream. When completed the focus trap will clean up listeners
       * and free internal resources
       * @param refocusOnClick Put the focus back to the last focused element whenever a click occurs on element (default to
       * false)
       */


      var ngbFocusTrap = function ngbFocusTrap(zone, element, stopFocusTrap$) {
        var refocusOnClick = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        zone.runOutsideAngular(function () {
          // last focused element
          var lastFocusedElement$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["fromEvent"])(element, 'focusin').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["takeUntil"])(stopFocusTrap$), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["map"])(function (e) {
            return e.target;
          })); // 'tab' / 'shift+tab' stream

          Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["fromEvent"])(element, 'keydown').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["takeUntil"])(stopFocusTrap$), // tslint:disable:deprecation
          Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["filter"])(function (e) {
            return e.which === Key.Tab;
          }), // tslint:enable:deprecation
          Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["withLatestFrom"])(lastFocusedElement$)).subscribe(function (_ref9) {
            var _ref10 = _slicedToArray(_ref9, 2),
                tabEvent = _ref10[0],
                focusedElement = _ref10[1];

            var _getFocusableBoundary = getFocusableBoundaryElements(element),
                _getFocusableBoundary2 = _slicedToArray(_getFocusableBoundary, 2),
                first = _getFocusableBoundary2[0],
                last = _getFocusableBoundary2[1];

            if ((focusedElement === first || focusedElement === element) && tabEvent.shiftKey) {
              last.focus();
              tabEvent.preventDefault();
            }

            if (focusedElement === last && !tabEvent.shiftKey) {
              first.focus();
              tabEvent.preventDefault();
            }
          }); // inside click

          if (refocusOnClick) {
            Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["fromEvent"])(element, 'click').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["takeUntil"])(stopFocusTrap$), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["withLatestFrom"])(lastFocusedElement$), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["map"])(function (arr) {
              return arr[1];
            })).subscribe(function (lastFocusedElement) {
              return lastFocusedElement.focus();
            });
          }
        });
      }; // previous version:
      // https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js


      var Positioning = /*#__PURE__*/function () {
        function Positioning() {
          _classCallCheck(this, Positioning);
        }

        _createClass(Positioning, [{
          key: "getAllStyles",
          value: function getAllStyles(element) {
            return window.getComputedStyle(element);
          }
        }, {
          key: "getStyle",
          value: function getStyle(element, prop) {
            return this.getAllStyles(element)[prop];
          }
        }, {
          key: "isStaticPositioned",
          value: function isStaticPositioned(element) {
            return (this.getStyle(element, 'position') || 'static') === 'static';
          }
        }, {
          key: "offsetParent",
          value: function offsetParent(element) {
            var offsetParentEl = element.offsetParent || document.documentElement;

            while (offsetParentEl && offsetParentEl !== document.documentElement && this.isStaticPositioned(offsetParentEl)) {
              offsetParentEl = offsetParentEl.offsetParent;
            }

            return offsetParentEl || document.documentElement;
          }
        }, {
          key: "position",
          value: function position(element) {
            var round = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var elPosition;
            var parentOffset = {
              width: 0,
              height: 0,
              top: 0,
              bottom: 0,
              left: 0,
              right: 0
            };

            if (this.getStyle(element, 'position') === 'fixed') {
              elPosition = element.getBoundingClientRect();
              elPosition = {
                top: elPosition.top,
                bottom: elPosition.bottom,
                left: elPosition.left,
                right: elPosition.right,
                height: elPosition.height,
                width: elPosition.width
              };
            } else {
              var offsetParentEl = this.offsetParent(element);
              elPosition = this.offset(element, false);

              if (offsetParentEl !== document.documentElement) {
                parentOffset = this.offset(offsetParentEl, false);
              }

              parentOffset.top += offsetParentEl.clientTop;
              parentOffset.left += offsetParentEl.clientLeft;
            }

            elPosition.top -= parentOffset.top;
            elPosition.bottom -= parentOffset.top;
            elPosition.left -= parentOffset.left;
            elPosition.right -= parentOffset.left;

            if (round) {
              elPosition.top = Math.round(elPosition.top);
              elPosition.bottom = Math.round(elPosition.bottom);
              elPosition.left = Math.round(elPosition.left);
              elPosition.right = Math.round(elPosition.right);
            }

            return elPosition;
          }
        }, {
          key: "offset",
          value: function offset(element) {
            var round = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var elBcr = element.getBoundingClientRect();
            var viewportOffset = {
              top: window.pageYOffset - document.documentElement.clientTop,
              left: window.pageXOffset - document.documentElement.clientLeft
            };
            var elOffset = {
              height: elBcr.height || element.offsetHeight,
              width: elBcr.width || element.offsetWidth,
              top: elBcr.top + viewportOffset.top,
              bottom: elBcr.bottom + viewportOffset.top,
              left: elBcr.left + viewportOffset.left,
              right: elBcr.right + viewportOffset.left
            };

            if (round) {
              elOffset.height = Math.round(elOffset.height);
              elOffset.width = Math.round(elOffset.width);
              elOffset.top = Math.round(elOffset.top);
              elOffset.bottom = Math.round(elOffset.bottom);
              elOffset.left = Math.round(elOffset.left);
              elOffset.right = Math.round(elOffset.right);
            }

            return elOffset;
          }
          /*
            Return false if the element to position is outside the viewport
          */

        }, {
          key: "positionElements",
          value: function positionElements(hostElement, targetElement, placement, appendToBody) {
            var _placement$split = placement.split('-'),
                _placement$split2 = _slicedToArray(_placement$split, 2),
                _placement$split2$ = _placement$split2[0],
                placementPrimary = _placement$split2$ === void 0 ? 'top' : _placement$split2$,
                _placement$split2$2 = _placement$split2[1],
                placementSecondary = _placement$split2$2 === void 0 ? 'center' : _placement$split2$2;

            var hostElPosition = appendToBody ? this.offset(hostElement, false) : this.position(hostElement, false);
            var targetElStyles = this.getAllStyles(targetElement);
            var marginTop = parseFloat(targetElStyles.marginTop);
            var marginBottom = parseFloat(targetElStyles.marginBottom);
            var marginLeft = parseFloat(targetElStyles.marginLeft);
            var marginRight = parseFloat(targetElStyles.marginRight);
            var topPosition = 0;
            var leftPosition = 0;

            switch (placementPrimary) {
              case 'top':
                topPosition = hostElPosition.top - (targetElement.offsetHeight + marginTop + marginBottom);
                break;

              case 'bottom':
                topPosition = hostElPosition.top + hostElPosition.height;
                break;

              case 'left':
                leftPosition = hostElPosition.left - (targetElement.offsetWidth + marginLeft + marginRight);
                break;

              case 'right':
                leftPosition = hostElPosition.left + hostElPosition.width;
                break;
            }

            switch (placementSecondary) {
              case 'top':
                topPosition = hostElPosition.top;
                break;

              case 'bottom':
                topPosition = hostElPosition.top + hostElPosition.height - targetElement.offsetHeight;
                break;

              case 'left':
                leftPosition = hostElPosition.left;
                break;

              case 'right':
                leftPosition = hostElPosition.left + hostElPosition.width - targetElement.offsetWidth;
                break;

              case 'center':
                if (placementPrimary === 'top' || placementPrimary === 'bottom') {
                  leftPosition = hostElPosition.left + hostElPosition.width / 2 - targetElement.offsetWidth / 2;
                } else {
                  topPosition = hostElPosition.top + hostElPosition.height / 2 - targetElement.offsetHeight / 2;
                }

                break;
            } /// The translate3d/gpu acceleration render a blurry text on chrome, the next line is commented until a browser fix
            // targetElement.style.transform = `translate3d(${Math.round(leftPosition)}px, ${Math.floor(topPosition)}px, 0px)`;


            targetElement.style.transform = "translate(".concat(Math.round(leftPosition), "px, ").concat(Math.round(topPosition), "px)"); // Check if the targetElement is inside the viewport

            var targetElBCR = targetElement.getBoundingClientRect();
            var html = document.documentElement;
            var windowHeight = window.innerHeight || html.clientHeight;
            var windowWidth = window.innerWidth || html.clientWidth;
            return targetElBCR.left >= 0 && targetElBCR.top >= 0 && targetElBCR.right <= windowWidth && targetElBCR.bottom <= windowHeight;
          }
        }]);

        return Positioning;
      }();

      var placementSeparator = /\s+/;
      var positionService = new Positioning();
      /*
       * Accept the placement array and applies the appropriate placement dependent on the viewport.
       * Returns the applied placement.
       * In case of auto placement, placements are selected in order
       *   'top', 'bottom', 'left', 'right',
       *   'top-left', 'top-right',
       *   'bottom-left', 'bottom-right',
       *   'left-top', 'left-bottom',
       *   'right-top', 'right-bottom'.
       * */

      function positionElements(hostElement, targetElement, placement, appendToBody, baseClass) {
        var placementVals = Array.isArray(placement) ? placement : placement.split(placementSeparator);
        var allowedPlacements = ['top', 'bottom', 'left', 'right', 'top-left', 'top-right', 'bottom-left', 'bottom-right', 'left-top', 'left-bottom', 'right-top', 'right-bottom'];
        var classList = targetElement.classList;

        var addClassesToTarget = function addClassesToTarget(targetPlacement) {
          var _targetPlacement$spli = targetPlacement.split('-'),
              _targetPlacement$spli2 = _slicedToArray(_targetPlacement$spli, 2),
              primary = _targetPlacement$spli2[0],
              secondary = _targetPlacement$spli2[1];

          var classes = [];

          if (baseClass) {
            classes.push("".concat(baseClass, "-").concat(primary));

            if (secondary) {
              classes.push("".concat(baseClass, "-").concat(primary, "-").concat(secondary));
            }

            classes.forEach(function (classname) {
              classList.add(classname);
            });
          }

          return classes;
        }; // Remove old placement classes to avoid issues


        if (baseClass) {
          allowedPlacements.forEach(function (placementToRemove) {
            classList.remove("".concat(baseClass, "-").concat(placementToRemove));
          });
        } // replace auto placement with other placements


        var hasAuto = placementVals.findIndex(function (val) {
          return val === 'auto';
        });

        if (hasAuto >= 0) {
          allowedPlacements.forEach(function (obj) {
            if (placementVals.find(function (val) {
              return val.search('^' + obj) !== -1;
            }) == null) {
              placementVals.splice(hasAuto++, 1, obj);
            }
          });
        } // coordinates where to position
        // Required for transform:


        var style = targetElement.style;
        style.position = 'absolute';
        style.top = '0';
        style.left = '0';
        style['will-change'] = 'transform';
        var testPlacement = null;
        var isInViewport = false;

        var _iterator2 = _createForOfIteratorHelper(placementVals),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            testPlacement = _step2.value;
            var addedClasses = addClassesToTarget(testPlacement);

            if (positionService.positionElements(hostElement, targetElement, testPlacement, appendToBody)) {
              isInViewport = true;
              break;
            } // Remove the baseClasses for further calculation


            if (baseClass) {
              addedClasses.forEach(function (classname) {
                classList.remove(classname);
              });
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        if (!isInViewport) {
          // If nothing match, the first placement is the default one
          testPlacement = placementVals[0];
          addClassesToTarget(testPlacement);
          positionService.positionElements(hostElement, targetElement, testPlacement, appendToBody);
        }

        return testPlacement;
      }

      function NGB_DATEPICKER_PARSER_FORMATTER_FACTORY() {
        return new NgbDateISOParserFormatter();
      }
      /**
       * An abstract service for parsing and formatting dates for the
       * [`NgbInputDatepicker`](#/components/datepicker/api#NgbInputDatepicker) directive.
       * Converts between the internal `NgbDateStruct` model presentation and a `string` that is displayed in the
       * input element.
       *
       * When user types something in the input this service attempts to parse it into a `NgbDateStruct` object.
       * And vice versa, when users selects a date in the calendar with the mouse, it must be displayed as a `string`
       * in the input.
       *
       * Default implementation uses the ISO 8601 format, but you can provide another implementation via DI
       * to use an alternative string format or a custom parsing logic.
       *
       * See the [date format overview](#/components/datepicker/overview#date-model) for more details.
       */


      var NgbDateParserFormatter = function NgbDateParserFormatter() {
        _classCallCheck(this, NgbDateParserFormatter);
      };

      NgbDateParserFormatter.ɵfac = function NgbDateParserFormatter_Factory(t) {
        return new (t || NgbDateParserFormatter)();
      };

      NgbDateParserFormatter.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: NGB_DATEPICKER_PARSER_FORMATTER_FACTORY,
        token: NgbDateParserFormatter,
        providedIn: "root"
      });

      var NgbDateISOParserFormatter = /*#__PURE__*/function (_NgbDateParserFormatt) {
        _inherits(NgbDateISOParserFormatter, _NgbDateParserFormatt);

        var _super4 = _createSuper(NgbDateISOParserFormatter);

        function NgbDateISOParserFormatter() {
          _classCallCheck(this, NgbDateISOParserFormatter);

          return _super4.apply(this, arguments);
        }

        _createClass(NgbDateISOParserFormatter, [{
          key: "parse",
          value: function parse(value) {
            if (value != null) {
              var dateParts = value.trim().split('-');

              if (dateParts.length === 1 && isNumber(dateParts[0])) {
                return {
                  year: toInteger(dateParts[0]),
                  month: null,
                  day: null
                };
              } else if (dateParts.length === 2 && isNumber(dateParts[0]) && isNumber(dateParts[1])) {
                return {
                  year: toInteger(dateParts[0]),
                  month: toInteger(dateParts[1]),
                  day: null
                };
              } else if (dateParts.length === 3 && isNumber(dateParts[0]) && isNumber(dateParts[1]) && isNumber(dateParts[2])) {
                return {
                  year: toInteger(dateParts[0]),
                  month: toInteger(dateParts[1]),
                  day: toInteger(dateParts[2])
                };
              }
            }

            return null;
          }
        }, {
          key: "format",
          value: function format(date) {
            return date ? "".concat(date.year, "-").concat(isNumber(date.month) ? padNumber(date.month) : '', "-").concat(isNumber(date.day) ? padNumber(date.day) : '') : '';
          }
        }]);

        return NgbDateISOParserFormatter;
      }(NgbDateParserFormatter);

      NgbDateISOParserFormatter.ɵfac = function NgbDateISOParserFormatter_Factory(t) {
        return ɵNgbDateISOParserFormatter_BaseFactory(t || NgbDateISOParserFormatter);
      };

      NgbDateISOParserFormatter.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: NgbDateISOParserFormatter,
        factory: NgbDateISOParserFormatter.ɵfac
      });
      /**
       * A configuration service for the [`NgbDatepickerInput`](#/components/datepicker/api#NgbDatepicker) component.
       *
       * You can inject this service, typically in your root component, and customize the values of its properties in
       * order to provide default values for all the datepicker inputs used in the application.
       *
       * @since 5.2.0
       */

      var NgbInputDatepickerConfig = /*#__PURE__*/function (_NgbDatepickerConfig) {
        _inherits(NgbInputDatepickerConfig, _NgbDatepickerConfig);

        var _super5 = _createSuper(NgbInputDatepickerConfig);

        function NgbInputDatepickerConfig() {
          var _this14;

          _classCallCheck(this, NgbInputDatepickerConfig);

          _this14 = _super5.apply(this, arguments);
          _this14.autoClose = true;
          _this14.placement = ['bottom-left', 'bottom-right', 'top-left', 'top-right'];
          _this14.restoreFocus = true;
          return _this14;
        }

        return NgbInputDatepickerConfig;
      }(NgbDatepickerConfig);

      NgbInputDatepickerConfig.ɵfac = function NgbInputDatepickerConfig_Factory(t) {
        return ɵNgbInputDatepickerConfig_BaseFactory(t || NgbInputDatepickerConfig);
      };

      NgbInputDatepickerConfig.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function NgbInputDatepickerConfig_Factory() {
          return new NgbInputDatepickerConfig();
        },
        token: NgbInputDatepickerConfig,
        providedIn: "root"
      });
      var NGB_DATEPICKER_VALUE_ACCESSOR$1 = {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"],
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
          return NgbInputDatepicker;
        }),
        multi: true
      };
      var NGB_DATEPICKER_VALIDATOR = {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALIDATORS"],
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
          return NgbInputDatepicker;
        }),
        multi: true
      };
      /**
       * A directive that allows to stick a datepicker popup to an input field.
       *
       * Manages interaction with the input field itself, does value formatting and provides forms integration.
       */

      var NgbInputDatepicker = /*#__PURE__*/function () {
        function NgbInputDatepicker(_parserFormatter, _elRef, _vcRef, _renderer, _cfr, _ngZone, _calendar, _dateAdapter, _document, _changeDetector, config) {
          var _this15 = this;

          _classCallCheck(this, NgbInputDatepicker);

          this._parserFormatter = _parserFormatter;
          this._elRef = _elRef;
          this._vcRef = _vcRef;
          this._renderer = _renderer;
          this._cfr = _cfr;
          this._ngZone = _ngZone;
          this._calendar = _calendar;
          this._dateAdapter = _dateAdapter;
          this._document = _document;
          this._changeDetector = _changeDetector;
          this._cRef = null;
          this._disabled = false;
          this._elWithFocus = null;
          this._model = null;
          /**
           * An event emitted when user selects a date using keyboard or mouse.
           *
           * The payload of the event is currently selected `NgbDate`.
           *
           * @since 1.1.1
           */

          this.dateSelect = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          /**
           * Event emitted right after the navigation happens and displayed month changes.
           *
           * See [`NgbDatepickerNavigateEvent`](#/components/datepicker/api#NgbDatepickerNavigateEvent) for the payload info.
           */

          this.navigate = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          /**
           * An event fired after closing datepicker window.
           *
           * @since 4.2.0
           */

          this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();

          this._onChange = function (_) {};

          this._onTouched = function () {};

          this._validatorChange = function () {};

          ['autoClose', 'container', 'positionTarget', 'placement'].forEach(function (input) {
            return _this15[input] = config[input];
          });
          this._zoneSubscription = _ngZone.onStable.subscribe(function () {
            return _this15._updatePopupPosition();
          });
        }

        _createClass(NgbInputDatepicker, [{
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this._onChange = fn;
          }
        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this._onTouched = fn;
          }
        }, {
          key: "registerOnValidatorChange",
          value: function registerOnValidatorChange(fn) {
            this._validatorChange = fn;
          }
        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this.disabled = isDisabled;
          }
        }, {
          key: "validate",
          value: function validate(c) {
            var value = c.value;

            if (value != null) {
              var ngbDate = this._fromDateStruct(this._dateAdapter.fromModel(value));

              if (!ngbDate) {
                return {
                  'ngbDate': {
                    invalid: value
                  }
                };
              }

              if (this.minDate && ngbDate.before(NgbDate.from(this.minDate))) {
                return {
                  'ngbDate': {
                    minDate: {
                      minDate: this.minDate,
                      actual: value
                    }
                  }
                };
              }

              if (this.maxDate && ngbDate.after(NgbDate.from(this.maxDate))) {
                return {
                  'ngbDate': {
                    maxDate: {
                      maxDate: this.maxDate,
                      actual: value
                    }
                  }
                };
              }
            }

            return null;
          }
        }, {
          key: "writeValue",
          value: function writeValue(value) {
            this._model = this._fromDateStruct(this._dateAdapter.fromModel(value));

            this._writeModelValue(this._model);
          }
        }, {
          key: "manualDateChange",
          value: function manualDateChange(value) {
            var updateView = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var inputValueChanged = value !== this._inputValue;

            if (inputValueChanged) {
              this._inputValue = value;
              this._model = this._fromDateStruct(this._parserFormatter.parse(value));
            }

            if (inputValueChanged || !updateView) {
              this._onChange(this._model ? this._dateAdapter.toModel(this._model) : value === '' ? null : value);
            }

            if (updateView && this._model) {
              this._writeModelValue(this._model);
            }
          }
        }, {
          key: "isOpen",
          value: function isOpen() {
            return !!this._cRef;
          }
          /**
           * Opens the datepicker popup.
           *
           * If the related form control contains a valid date, the corresponding month will be opened.
           */

        }, {
          key: "open",
          value: function open() {
            var _this16 = this;

            if (!this.isOpen()) {
              var cf = this._cfr.resolveComponentFactory(NgbDatepicker);

              this._cRef = this._vcRef.createComponent(cf);

              this._applyPopupStyling(this._cRef.location.nativeElement);

              this._applyDatepickerInputs(this._cRef.instance);

              this._subscribeForDatepickerOutputs(this._cRef.instance);

              this._cRef.instance.ngOnInit();

              this._cRef.instance.writeValue(this._dateAdapter.toModel(this._model)); // date selection event handling


              this._cRef.instance.registerOnChange(function (selectedDate) {
                _this16.writeValue(selectedDate);

                _this16._onChange(selectedDate);

                _this16._onTouched();
              });

              this._cRef.changeDetectorRef.detectChanges();

              this._cRef.instance.setDisabledState(this.disabled);

              if (this.container === 'body') {
                this._document.querySelector(this.container).appendChild(this._cRef.location.nativeElement);
              } // focus handling


              this._elWithFocus = this._document.activeElement;
              ngbFocusTrap(this._ngZone, this._cRef.location.nativeElement, this.closed, true);

              this._cRef.instance.focus();

              ngbAutoClose(this._ngZone, this._document, this.autoClose, function () {
                return _this16.close();
              }, this.closed, [], [this._elRef.nativeElement, this._cRef.location.nativeElement]);
            }
          }
          /**
           * Closes the datepicker popup.
           */

        }, {
          key: "close",
          value: function close() {
            if (this.isOpen()) {
              this._vcRef.remove(this._vcRef.indexOf(this._cRef.hostView));

              this._cRef = null;
              this.closed.emit();

              this._changeDetector.markForCheck(); // restore focus


              var elementToFocus = this._elWithFocus;

              if (isString(this.restoreFocus)) {
                elementToFocus = this._document.querySelector(this.restoreFocus);
              } else if (this.restoreFocus !== undefined) {
                elementToFocus = this.restoreFocus;
              } // in IE document.activeElement can contain an object without 'focus()' sometimes


              if (elementToFocus && elementToFocus['focus']) {
                elementToFocus.focus();
              } else {
                this._document.body.focus();
              }
            }
          }
          /**
           * Toggles the datepicker popup.
           */

        }, {
          key: "toggle",
          value: function toggle() {
            if (this.isOpen()) {
              this.close();
            } else {
              this.open();
            }
          }
          /**
           * Navigates to the provided date.
           *
           * With the default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.
           * If nothing or invalid date provided calendar will open current month.
           *
           * Use the `[startDate]` input as an alternative.
           */

        }, {
          key: "navigateTo",
          value: function navigateTo(date) {
            if (this.isOpen()) {
              this._cRef.instance.navigateTo(date);
            }
          }
        }, {
          key: "onBlur",
          value: function onBlur() {
            this._onTouched();
          }
        }, {
          key: "onFocus",
          value: function onFocus() {
            this._elWithFocus = this._elRef.nativeElement;
          }
        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            if (changes['minDate'] || changes['maxDate']) {
              this._validatorChange();

              if (this.isOpen()) {
                if (changes['minDate']) {
                  this._cRef.instance.minDate = this.minDate;
                }

                if (changes['maxDate']) {
                  this._cRef.instance.maxDate = this.maxDate;
                }

                this._cRef.instance.ngOnChanges(changes);
              }
            }
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.close();

            this._zoneSubscription.unsubscribe();
          }
        }, {
          key: "_applyDatepickerInputs",
          value: function _applyDatepickerInputs(datepickerInstance) {
            var _this17 = this;

            ['dayTemplate', 'dayTemplateData', 'displayMonths', 'firstDayOfWeek', 'footerTemplate', 'markDisabled', 'minDate', 'maxDate', 'navigation', 'outsideDays', 'showNavigation', 'showWeekdays', 'showWeekNumbers'].forEach(function (optionName) {
              if (_this17[optionName] !== undefined) {
                datepickerInstance[optionName] = _this17[optionName];
              }
            });
            datepickerInstance.startDate = this.startDate || this._model;
          }
        }, {
          key: "_applyPopupStyling",
          value: function _applyPopupStyling(nativeElement) {
            this._renderer.addClass(nativeElement, 'dropdown-menu');

            this._renderer.addClass(nativeElement, 'show');

            if (this.container === 'body') {
              this._renderer.addClass(nativeElement, 'ngb-dp-body');
            }
          }
        }, {
          key: "_subscribeForDatepickerOutputs",
          value: function _subscribeForDatepickerOutputs(datepickerInstance) {
            var _this18 = this;

            datepickerInstance.navigate.subscribe(function (navigateEvent) {
              return _this18.navigate.emit(navigateEvent);
            });
            datepickerInstance.dateSelect.subscribe(function (date) {
              _this18.dateSelect.emit(date);

              if (_this18.autoClose === true || _this18.autoClose === 'inside') {
                _this18.close();
              }
            });
          }
        }, {
          key: "_writeModelValue",
          value: function _writeModelValue(model) {
            var value = this._parserFormatter.format(model);

            this._inputValue = value;

            this._renderer.setProperty(this._elRef.nativeElement, 'value', value);

            if (this.isOpen()) {
              this._cRef.instance.writeValue(this._dateAdapter.toModel(model));

              this._onTouched();
            }
          }
        }, {
          key: "_fromDateStruct",
          value: function _fromDateStruct(date) {
            var ngbDate = date ? new NgbDate(date.year, date.month, date.day) : null;
            return this._calendar.isValid(ngbDate) ? ngbDate : null;
          }
        }, {
          key: "_updatePopupPosition",
          value: function _updatePopupPosition() {
            if (!this._cRef) {
              return;
            }

            var hostElement;

            if (isString(this.positionTarget)) {
              hostElement = this._document.querySelector(this.positionTarget);
            } else if (this.positionTarget instanceof HTMLElement) {
              hostElement = this.positionTarget;
            } else {
              hostElement = this._elRef.nativeElement;
            }

            if (this.positionTarget && !hostElement) {
              throw new Error('ngbDatepicker could not find element declared in [positionTarget] to position against.');
            }

            positionElements(hostElement, this._cRef.location.nativeElement, this.placement, this.container === 'body');
          }
        }, {
          key: "disabled",
          get: function get() {
            return this._disabled;
          },
          set: function set(value) {
            this._disabled = value === '' || value && value !== 'false';

            if (this.isOpen()) {
              this._cRef.instance.setDisabledState(this._disabled);
            }
          }
        }]);

        return NgbInputDatepicker;
      }();

      NgbInputDatepicker.ɵfac = function NgbInputDatepicker_Factory(t) {
        return new (t || NgbInputDatepicker)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbDateParserFormatter), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ComponentFactoryResolver"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbCalendar), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbDateAdapter), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbInputDatepickerConfig));
      };

      NgbInputDatepicker.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbInputDatepicker,
        selectors: [["input", "ngbDatepicker", ""]],
        hostVars: 1,
        hostBindings: function NgbInputDatepicker_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("input", function NgbInputDatepicker_input_HostBindingHandler($event) {
              return ctx.manualDateChange($event.target.value);
            })("change", function NgbInputDatepicker_change_HostBindingHandler($event) {
              return ctx.manualDateChange($event.target.value, true);
            })("focus", function NgbInputDatepicker_focus_HostBindingHandler() {
              return ctx.onFocus();
            })("blur", function NgbInputDatepicker_blur_HostBindingHandler() {
              return ctx.onBlur();
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵhostProperty"]("disabled", ctx.disabled);
          }
        },
        inputs: {
          disabled: "disabled",
          autoClose: "autoClose",
          dayTemplate: "dayTemplate",
          dayTemplateData: "dayTemplateData",
          displayMonths: "displayMonths",
          firstDayOfWeek: "firstDayOfWeek",
          footerTemplate: "footerTemplate",
          markDisabled: "markDisabled",
          minDate: "minDate",
          maxDate: "maxDate",
          navigation: "navigation",
          outsideDays: "outsideDays",
          placement: "placement",
          restoreFocus: "restoreFocus",
          showWeekdays: "showWeekdays",
          showWeekNumbers: "showWeekNumbers",
          startDate: "startDate",
          container: "container",
          positionTarget: "positionTarget"
        },
        outputs: {
          dateSelect: "dateSelect",
          navigate: "navigate",
          closed: "closed"
        },
        exportAs: ["ngbDatepicker"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵProvidersFeature"]([NGB_DATEPICKER_VALUE_ACCESSOR$1, NGB_DATEPICKER_VALIDATOR, {
          provide: NgbDatepickerConfig,
          useExisting: NgbInputDatepickerConfig
        }]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵNgOnChangesFeature"]]
      });

      NgbInputDatepicker.ctorParameters = function () {
        return [{
          type: NgbDateParserFormatter
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ComponentFactoryResolver"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
        }, {
          type: NgbCalendar
        }, {
          type: NgbDateAdapter
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
        }, {
          type: NgbInputDatepickerConfig
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbInputDatepicker.prototype, "autoClose", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbInputDatepicker.prototype, "dayTemplate", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbInputDatepicker.prototype, "dayTemplateData", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbInputDatepicker.prototype, "displayMonths", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbInputDatepicker.prototype, "firstDayOfWeek", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbInputDatepicker.prototype, "footerTemplate", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbInputDatepicker.prototype, "markDisabled", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbInputDatepicker.prototype, "minDate", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbInputDatepicker.prototype, "maxDate", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbInputDatepicker.prototype, "navigation", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbInputDatepicker.prototype, "outsideDays", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbInputDatepicker.prototype, "placement", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbInputDatepicker.prototype, "restoreFocus", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbInputDatepicker.prototype, "showWeekdays", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbInputDatepicker.prototype, "showWeekNumbers", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbInputDatepicker.prototype, "startDate", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbInputDatepicker.prototype, "container", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbInputDatepicker.prototype, "positionTarget", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbInputDatepicker.prototype, "dateSelect", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbInputDatepicker.prototype, "navigate", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbInputDatepicker.prototype, "closed", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbInputDatepicker.prototype, "disabled", null);
      NgbInputDatepicker = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(8, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]))], NgbInputDatepicker);

      var NgbDatepickerDayView = /*#__PURE__*/function () {
        function NgbDatepickerDayView(i18n) {
          _classCallCheck(this, NgbDatepickerDayView);

          this.i18n = i18n;
        }

        _createClass(NgbDatepickerDayView, [{
          key: "isMuted",
          value: function isMuted() {
            return !this.selected && (this.date.month !== this.currentMonth || this.disabled);
          }
        }]);

        return NgbDatepickerDayView;
      }();

      NgbDatepickerDayView.ɵfac = function NgbDatepickerDayView_Factory(t) {
        return new (t || NgbDatepickerDayView)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbDatepickerI18n));
      };

      NgbDatepickerDayView.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: NgbDatepickerDayView,
        selectors: [["", "ngbDatepickerDayView", ""]],
        hostAttrs: [1, "btn-light"],
        hostVars: 10,
        hostBindings: function NgbDatepickerDayView_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("bg-primary", ctx.selected)("text-white", ctx.selected)("text-muted", ctx.isMuted())("outside", ctx.isMuted())("active", ctx.focused);
          }
        },
        inputs: {
          currentMonth: "currentMonth",
          date: "date",
          disabled: "disabled",
          focused: "focused",
          selected: "selected"
        },
        attrs: _c21,
        decls: 1,
        vars: 1,
        template: function NgbDatepickerDayView_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](0);
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate"](ctx.i18n.getDayNumerals(ctx.date));
          }
        },
        styles: ["[ngbDatepickerDayView]{text-align:center;width:2rem;height:2rem;line-height:2rem;border-radius:.25rem;background:0 0}[ngbDatepickerDayView].outside{opacity:.5}"],
        encapsulation: 2,
        changeDetection: 0
      });

      NgbDatepickerDayView.ctorParameters = function () {
        return [{
          type: NgbDatepickerI18n
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepickerDayView.prototype, "currentMonth", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepickerDayView.prototype, "date", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepickerDayView.prototype, "disabled", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepickerDayView.prototype, "focused", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepickerDayView.prototype, "selected", void 0);

      var NgbDatepickerNavigationSelect = /*#__PURE__*/function () {
        function NgbDatepickerNavigationSelect(i18n, _renderer) {
          _classCallCheck(this, NgbDatepickerNavigationSelect);

          this.i18n = i18n;
          this._renderer = _renderer;
          this.select = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          this._month = -1;
          this._year = -1;
        }

        _createClass(NgbDatepickerNavigationSelect, [{
          key: "changeMonth",
          value: function changeMonth(month) {
            this.select.emit(new NgbDate(this.date.year, toInteger(month), 1));
          }
        }, {
          key: "changeYear",
          value: function changeYear(year) {
            this.select.emit(new NgbDate(toInteger(year), this.date.month, 1));
          }
        }, {
          key: "ngAfterViewChecked",
          value: function ngAfterViewChecked() {
            if (this.date) {
              if (this.date.month !== this._month) {
                this._month = this.date.month;

                this._renderer.setProperty(this.monthSelect.nativeElement, 'value', this._month);
              }

              if (this.date.year !== this._year) {
                this._year = this.date.year;

                this._renderer.setProperty(this.yearSelect.nativeElement, 'value', this._year);
              }
            }
          }
        }]);

        return NgbDatepickerNavigationSelect;
      }();

      NgbDatepickerNavigationSelect.ɵfac = function NgbDatepickerNavigationSelect_Factory(t) {
        return new (t || NgbDatepickerNavigationSelect)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbDatepickerI18n), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]));
      };

      NgbDatepickerNavigationSelect.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: NgbDatepickerNavigationSelect,
        selectors: [["ngb-datepicker-navigation-select"]],
        viewQuery: function NgbDatepickerNavigationSelect_Query(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵstaticViewQuery"](_c22, true, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵstaticViewQuery"](_c23, true, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.monthSelect = _t.first);
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.yearSelect = _t.first);
          }
        },
        inputs: {
          date: "date",
          disabled: "disabled",
          months: "months",
          years: "years"
        },
        outputs: {
          select: "select"
        },
        decls: 8,
        vars: 4,
        consts: [[1, "custom-select", 3, "disabled", "change", 6, "aria-label", "title"], ["month", ""], [3, "value", 4, "ngFor", "ngForOf"], ["year", ""], [3, "value"]],
        template: function NgbDatepickerNavigationSelect_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "select", 0, 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18nAttributes"](2, _c28);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("change", function NgbDatepickerNavigationSelect_Template_select_change_0_listener($event) {
              return ctx.changeMonth($event.target.value);
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](3, NgbDatepickerNavigationSelect_option_3_Template, 2, 3, "option", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](4, "select", 0, 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18nAttributes"](6, _c33);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("change", function NgbDatepickerNavigationSelect_Template_select_change_4_listener($event) {
              return ctx.changeYear($event.target.value);
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](7, NgbDatepickerNavigationSelect_option_7_Template, 2, 2, "option", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("disabled", ctx.disabled);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx.months);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("disabled", ctx.disabled);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx.years);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["NgForOf"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgSelectOption"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ɵangular_packages_forms_forms_x"]],
        styles: ["ngb-datepicker-navigation-select>.custom-select{-ms-flex:1 1 auto;flex:1 1 auto;padding:0 .5rem;font-size:.875rem;height:1.85rem}ngb-datepicker-navigation-select>.custom-select:focus{z-index:1}ngb-datepicker-navigation-select>.custom-select::-ms-value{background-color:transparent!important}"],
        encapsulation: 2,
        changeDetection: 0
      });

      NgbDatepickerNavigationSelect.ctorParameters = function () {
        return [{
          type: NgbDatepickerI18n
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepickerNavigationSelect.prototype, "date", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepickerNavigationSelect.prototype, "disabled", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepickerNavigationSelect.prototype, "months", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDatepickerNavigationSelect.prototype, "years", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbDatepickerNavigationSelect.prototype, "select", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('month', {
        "static": true,
        read: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
      })], NgbDatepickerNavigationSelect.prototype, "monthSelect", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('year', {
        "static": true,
        read: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
      })], NgbDatepickerNavigationSelect.prototype, "yearSelect", void 0);

      var NgbCalendarHijri = /*#__PURE__*/function (_NgbCalendar2) {
        _inherits(NgbCalendarHijri, _NgbCalendar2);

        var _super6 = _createSuper(NgbCalendarHijri);

        function NgbCalendarHijri() {
          _classCallCheck(this, NgbCalendarHijri);

          return _super6.apply(this, arguments);
        }

        _createClass(NgbCalendarHijri, [{
          key: "getDaysPerWeek",
          value: function getDaysPerWeek() {
            return 7;
          }
        }, {
          key: "getMonths",
          value: function getMonths() {
            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
          }
        }, {
          key: "getWeeksPerMonth",
          value: function getWeeksPerMonth() {
            return 6;
          }
        }, {
          key: "getNext",
          value: function getNext(date) {
            var period = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'd';
            var number = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
            date = new NgbDate(date.year, date.month, date.day);

            switch (period) {
              case 'y':
                date = this._setYear(date, date.year + number);
                date.month = 1;
                date.day = 1;
                return date;

              case 'm':
                date = this._setMonth(date, date.month + number);
                date.day = 1;
                return date;

              case 'd':
                return this._setDay(date, date.day + number);

              default:
                return date;
            }
          }
        }, {
          key: "getPrev",
          value: function getPrev(date) {
            var period = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'd';
            var number = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
            return this.getNext(date, period, -number);
          }
        }, {
          key: "getWeekday",
          value: function getWeekday(date) {
            var day = this.toGregorian(date).getDay(); // in JS Date Sun=0, in ISO 8601 Sun=7

            return day === 0 ? 7 : day;
          }
        }, {
          key: "getWeekNumber",
          value: function getWeekNumber(week, firstDayOfWeek) {
            // in JS Date Sun=0, in ISO 8601 Sun=7
            if (firstDayOfWeek === 7) {
              firstDayOfWeek = 0;
            }

            var thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;
            var date = week[thursdayIndex];
            var jsDate = this.toGregorian(date);
            jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7)); // Thursday

            var time = jsDate.getTime();
            var MuhDate = this.toGregorian(new NgbDate(date.year, 1, 1)); // Compare with Muharram 1

            return Math.floor(Math.round((time - MuhDate.getTime()) / 86400000) / 7) + 1;
          }
        }, {
          key: "getToday",
          value: function getToday() {
            return this.fromGregorian(new Date());
          }
        }, {
          key: "isValid",
          value: function isValid(date) {
            return date != null && isNumber(date.year) && isNumber(date.month) && isNumber(date.day) && !isNaN(this.toGregorian(date).getTime());
          }
        }, {
          key: "_setDay",
          value: function _setDay(date, day) {
            day = +day;
            var mDays = this.getDaysPerMonth(date.month, date.year);

            if (day <= 0) {
              while (day <= 0) {
                date = this._setMonth(date, date.month - 1);
                mDays = this.getDaysPerMonth(date.month, date.year);
                day += mDays;
              }
            } else if (day > mDays) {
              while (day > mDays) {
                day -= mDays;
                date = this._setMonth(date, date.month + 1);
                mDays = this.getDaysPerMonth(date.month, date.year);
              }
            }

            date.day = day;
            return date;
          }
        }, {
          key: "_setMonth",
          value: function _setMonth(date, month) {
            month = +month;
            date.year = date.year + Math.floor((month - 1) / 12);
            date.month = Math.floor(((month - 1) % 12 + 12) % 12) + 1;
            return date;
          }
        }, {
          key: "_setYear",
          value: function _setYear(date, year) {
            date.year = +year;
            return date;
          }
        }]);

        return NgbCalendarHijri;
      }(NgbCalendar);

      NgbCalendarHijri.ɵfac = function NgbCalendarHijri_Factory(t) {
        return ɵNgbCalendarHijri_BaseFactory(t || NgbCalendarHijri);
      };

      NgbCalendarHijri.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: NgbCalendarHijri,
        factory: NgbCalendarHijri.ɵfac
      });
      /**
       * Checks if islamic year is a leap year
       */

      function isIslamicLeapYear(hYear) {
        return (14 + 11 * hYear) % 30 < 11;
      }
      /**
       * Checks if gregorian years is a leap year
       */


      function isGregorianLeapYear(gDate) {
        var year = gDate.getFullYear();
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
      }
      /**
       * Returns the start of Hijri Month.
       * `hMonth` is 0 for Muharram, 1 for Safar, etc.
       * `hYear` is any Hijri hYear.
       */


      function getIslamicMonthStart(hYear, hMonth) {
        return Math.ceil(29.5 * hMonth) + (hYear - 1) * 354 + Math.floor((3 + 11 * hYear) / 30.0);
      }
      /**
       * Returns the start of Hijri year.
       * `year` is any Hijri year.
       */


      function getIslamicYearStart(year) {
        return (year - 1) * 354 + Math.floor((3 + 11 * year) / 30.0);
      }

      function mod(a, b) {
        return a - b * Math.floor(a / b);
      }
      /**
       * The civil calendar is one type of Hijri calendars used in islamic countries.
       * Uses a fixed cycle of alternating 29- and 30-day months,
       * with a leap day added to the last month of 11 out of every 30 years.
       * http://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types
       * All the calculations here are based on the equations from "Calendrical Calculations" By Edward M. Reingold, Nachum
       * Dershowitz.
       */


      var GREGORIAN_EPOCH = 1721425.5;
      var ISLAMIC_EPOCH = 1948439.5;

      var NgbCalendarIslamicCivil = /*#__PURE__*/function (_NgbCalendarHijri) {
        _inherits(NgbCalendarIslamicCivil, _NgbCalendarHijri);

        var _super7 = _createSuper(NgbCalendarIslamicCivil);

        function NgbCalendarIslamicCivil() {
          _classCallCheck(this, NgbCalendarIslamicCivil);

          return _super7.apply(this, arguments);
        }

        _createClass(NgbCalendarIslamicCivil, [{
          key: "fromGregorian",

          /**
           * Returns the equivalent islamic(civil) date value for a give input Gregorian date.
           * `gDate` is a JS Date to be converted to Hijri.
           */
          value: function fromGregorian(gDate) {
            var gYear = gDate.getFullYear(),
                gMonth = gDate.getMonth(),
                gDay = gDate.getDate();
            var julianDay = GREGORIAN_EPOCH - 1 + 365 * (gYear - 1) + Math.floor((gYear - 1) / 4) + -Math.floor((gYear - 1) / 100) + Math.floor((gYear - 1) / 400) + Math.floor((367 * (gMonth + 1) - 362) / 12 + (gMonth + 1 <= 2 ? 0 : isGregorianLeapYear(gDate) ? -1 : -2) + gDay);
            julianDay = Math.floor(julianDay) + 0.5;
            var days = julianDay - ISLAMIC_EPOCH;
            var hYear = Math.floor((30 * days + 10646) / 10631.0);
            var hMonth = Math.ceil((days - 29 - getIslamicYearStart(hYear)) / 29.5);
            hMonth = Math.min(hMonth, 11);
            var hDay = Math.ceil(days - getIslamicMonthStart(hYear, hMonth)) + 1;
            return new NgbDate(hYear, hMonth + 1, hDay);
          }
          /**
           * Returns the equivalent JS date value for a give input islamic(civil) date.
           * `hDate` is an islamic(civil) date to be converted to Gregorian.
           */

        }, {
          key: "toGregorian",
          value: function toGregorian(hDate) {
            var hYear = hDate.year;
            var hMonth = hDate.month - 1;
            var hDay = hDate.day;
            var julianDay = hDay + Math.ceil(29.5 * hMonth) + (hYear - 1) * 354 + Math.floor((3 + 11 * hYear) / 30) + ISLAMIC_EPOCH - 1;
            var wjd = Math.floor(julianDay - 0.5) + 0.5,
                depoch = wjd - GREGORIAN_EPOCH,
                quadricent = Math.floor(depoch / 146097),
                dqc = mod(depoch, 146097),
                cent = Math.floor(dqc / 36524),
                dcent = mod(dqc, 36524),
                quad = Math.floor(dcent / 1461),
                dquad = mod(dcent, 1461),
                yindex = Math.floor(dquad / 365);
            var year = quadricent * 400 + cent * 100 + quad * 4 + yindex;

            if (!(cent === 4 || yindex === 4)) {
              year++;
            }

            var gYearStart = GREGORIAN_EPOCH + 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) + Math.floor((year - 1) / 400);
            var yearday = wjd - gYearStart;
            var tjd = GREGORIAN_EPOCH - 1 + 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) + Math.floor((year - 1) / 400) + Math.floor(739 / 12 + (isGregorianLeapYear(new Date(year, 3, 1)) ? -1 : -2) + 1);
            var leapadj = wjd < tjd ? 0 : isGregorianLeapYear(new Date(year, 3, 1)) ? 1 : 2;
            var month = Math.floor(((yearday + leapadj) * 12 + 373) / 367);
            var tjd2 = GREGORIAN_EPOCH - 1 + 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) + Math.floor((year - 1) / 400) + Math.floor((367 * month - 362) / 12 + (month <= 2 ? 0 : isGregorianLeapYear(new Date(year, month - 1, 1)) ? -1 : -2) + 1);
            var day = wjd - tjd2 + 1;
            return new Date(year, month - 1, day);
          }
          /**
           * Returns the number of days in a specific Hijri month.
           * `month` is 1 for Muharram, 2 for Safar, etc.
           * `year` is any Hijri year.
           */

        }, {
          key: "getDaysPerMonth",
          value: function getDaysPerMonth(month, year) {
            year = year + Math.floor(month / 13);
            month = (month - 1) % 12 + 1;
            var length = 29 + month % 2;

            if (month === 12 && isIslamicLeapYear(year)) {
              length++;
            }

            return length;
          }
        }]);

        return NgbCalendarIslamicCivil;
      }(NgbCalendarHijri);

      NgbCalendarIslamicCivil.ɵfac = function NgbCalendarIslamicCivil_Factory(t) {
        return ɵNgbCalendarIslamicCivil_BaseFactory(t || NgbCalendarIslamicCivil);
      };

      NgbCalendarIslamicCivil.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: NgbCalendarIslamicCivil,
        factory: NgbCalendarIslamicCivil.ɵfac
      });
      /**
       * Umalqura calendar is one type of Hijri calendars used in islamic countries.
       * This Calendar is used by Saudi Arabia for administrative purpose.
       * Unlike tabular calendars, the algorithm involves astronomical calculation, but it's still deterministic.
       * http://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types
       */

      var GREGORIAN_FIRST_DATE = new Date(1882, 10, 12);
      var GREGORIAN_LAST_DATE = new Date(2174, 10, 25);
      var HIJRI_BEGIN = 1300;
      var HIJRI_END = 1600;
      var ONE_DAY = 1000 * 60 * 60 * 24;
      var MONTH_LENGTH = [// 1300-1304
      '101010101010', '110101010100', '111011001001', '011011010100', '011011101010', // 1305-1309
      '001101101100', '101010101101', '010101010101', '011010101001', '011110010010', // 1310-1314
      '101110101001', '010111010100', '101011011010', '010101011100', '110100101101', // 1315-1319
      '011010010101', '011101001010', '101101010100', '101101101010', '010110101101', // 1320-1324
      '010010101110', '101001001111', '010100010111', '011010001011', '011010100101', // 1325-1329
      '101011010101', '001011010110', '100101011011', '010010011101', '101001001101', // 1330-1334
      '110100100110', '110110010101', '010110101100', '100110110110', '001010111010', // 1335-1339
      '101001011011', '010100101011', '101010010101', '011011001010', '101011101001', // 1340-1344
      '001011110100', '100101110110', '001010110110', '100101010110', '101011001010', // 1345-1349
      '101110100100', '101111010010', '010111011001', '001011011100', '100101101101', // 1350-1354
      '010101001101', '101010100101', '101101010010', '101110100101', '010110110100', // 1355-1359
      '100110110110', '010101010111', '001010010111', '010101001011', '011010100011', // 1360-1364
      '011101010010', '101101100101', '010101101010', '101010101011', '010100101011', // 1365-1369
      '110010010101', '110101001010', '110110100101', '010111001010', '101011010110', // 1370-1374
      '100101010111', '010010101011', '100101001011', '101010100101', '101101010010', // 1375-1379
      '101101101010', '010101110101', '001001110110', '100010110111', '010001011011', // 1380-1384
      '010101010101', '010110101001', '010110110100', '100111011010', '010011011101', // 1385-1389
      '001001101110', '100100110110', '101010101010', '110101010100', '110110110010', // 1390-1394
      '010111010101', '001011011010', '100101011011', '010010101011', '101001010101', // 1395-1399
      '101101001001', '101101100100', '101101110001', '010110110100', '101010110101', // 1400-1404
      '101001010101', '110100100101', '111010010010', '111011001001', '011011010100', // 1405-1409
      '101011101001', '100101101011', '010010101011', '101010010011', '110101001001', // 1410-1414
      '110110100100', '110110110010', '101010111001', '010010111010', '101001011011', // 1415-1419
      '010100101011', '101010010101', '101100101010', '101101010101', '010101011100', // 1420-1424
      '010010111101', '001000111101', '100100011101', '101010010101', '101101001010', // 1425-1429
      '101101011010', '010101101101', '001010110110', '100100111011', '010010011011', // 1430-1434
      '011001010101', '011010101001', '011101010100', '101101101010', '010101101100', // 1435-1439
      '101010101101', '010101010101', '101100101001', '101110010010', '101110101001', // 1440-1444
      '010111010100', '101011011010', '010101011010', '101010101011', '010110010101', // 1445-1449
      '011101001001', '011101100100', '101110101010', '010110110101', '001010110110', // 1450-1454
      '101001010110', '111001001101', '101100100101', '101101010010', '101101101010', // 1455-1459
      '010110101101', '001010101110', '100100101111', '010010010111', '011001001011', // 1460-1464
      '011010100101', '011010101100', '101011010110', '010101011101', '010010011101', // 1465-1469
      '101001001101', '110100010110', '110110010101', '010110101010', '010110110101', // 1470-1474
      '001011011010', '100101011011', '010010101101', '010110010101', '011011001010', // 1475-1479
      '011011100100', '101011101010', '010011110101', '001010110110', '100101010110', // 1480-1484
      '101010101010', '101101010100', '101111010010', '010111011001', '001011101010', // 1485-1489
      '100101101101', '010010101101', '101010010101', '101101001010', '101110100101', // 1490-1494
      '010110110010', '100110110101', '010011010110', '101010010111', '010101000111', // 1495-1499
      '011010010011', '011101001001', '101101010101', '010101101010', '101001101011', // 1500-1504
      '010100101011', '101010001011', '110101000110', '110110100011', '010111001010', // 1505-1509
      '101011010110', '010011011011', '001001101011', '100101001011', '101010100101', // 1510-1514
      '101101010010', '101101101001', '010101110101', '000101110110', '100010110111', // 1515-1519
      '001001011011', '010100101011', '010101100101', '010110110100', '100111011010', // 1520-1524
      '010011101101', '000101101101', '100010110110', '101010100110', '110101010010', // 1525-1529
      '110110101001', '010111010100', '101011011010', '100101011011', '010010101011', // 1530-1534
      '011001010011', '011100101001', '011101100010', '101110101001', '010110110010', // 1535-1539
      '101010110101', '010101010101', '101100100101', '110110010010', '111011001001', // 1540-1544
      '011011010010', '101011101001', '010101101011', '010010101011', '101001010101', // 1545-1549
      '110100101001', '110101010100', '110110101010', '100110110101', '010010111010', // 1550-1554
      '101000111011', '010010011011', '101001001101', '101010101010', '101011010101', // 1555-1559
      '001011011010', '100101011101', '010001011110', '101000101110', '110010011010', // 1560-1564
      '110101010101', '011010110010', '011010111001', '010010111010', '101001011101', // 1565-1569
      '010100101101', '101010010101', '101101010010', '101110101000', '101110110100', // 1570-1574
      '010110111001', '001011011010', '100101011010', '101101001010', '110110100100', // 1575-1579
      '111011010001', '011011101000', '101101101010', '010101101101', '010100110101', // 1580-1584
      '011010010101', '110101001010', '110110101000', '110111010100', '011011011010', // 1585-1589
      '010101011011', '001010011101', '011000101011', '101100010101', '101101001010', // 1590-1594
      '101110010101', '010110101010', '101010101110', '100100101110', '110010001111', // 1595-1599
      '010100100111', '011010010101', '011010101010', '101011010110', '010101011101', // 1600
      '001010011101'];

      function getDaysDiff(date1, date2) {
        // Ignores the time part in date1 and date2:
        var time1 = Date.UTC(date1.getFullYear(), date1.getMonth(), date1.getDate());
        var time2 = Date.UTC(date2.getFullYear(), date2.getMonth(), date2.getDate());
        var diff = Math.abs(time1 - time2);
        return Math.round(diff / ONE_DAY);
      }

      var NgbCalendarIslamicUmalqura = /*#__PURE__*/function (_NgbCalendarIslamicCi) {
        _inherits(NgbCalendarIslamicUmalqura, _NgbCalendarIslamicCi);

        var _super8 = _createSuper(NgbCalendarIslamicUmalqura);

        function NgbCalendarIslamicUmalqura() {
          _classCallCheck(this, NgbCalendarIslamicUmalqura);

          return _super8.apply(this, arguments);
        }

        _createClass(NgbCalendarIslamicUmalqura, [{
          key: "fromGregorian",

          /**
          * Returns the equivalent islamic(Umalqura) date value for a give input Gregorian date.
          * `gdate` is s JS Date to be converted to Hijri.
          */
          value: function fromGregorian(gDate) {
            var hDay = 1,
                hMonth = 0,
                hYear = 1300;
            var daysDiff = getDaysDiff(gDate, GREGORIAN_FIRST_DATE);

            if (gDate.getTime() - GREGORIAN_FIRST_DATE.getTime() >= 0 && gDate.getTime() - GREGORIAN_LAST_DATE.getTime() <= 0) {
              var year = 1300;

              for (var i = 0; i < MONTH_LENGTH.length; i++, year++) {
                for (var j = 0; j < 12; j++) {
                  var numOfDays = +MONTH_LENGTH[i][j] + 29;

                  if (daysDiff <= numOfDays) {
                    hDay = daysDiff + 1;

                    if (hDay > numOfDays) {
                      hDay = 1;
                      j++;
                    }

                    if (j > 11) {
                      j = 0;
                      year++;
                    }

                    hMonth = j;
                    hYear = year;
                    return new NgbDate(hYear, hMonth + 1, hDay);
                  }

                  daysDiff = daysDiff - numOfDays;
                }
              }

              return null;
            } else {
              return _get(_getPrototypeOf(NgbCalendarIslamicUmalqura.prototype), "fromGregorian", this).call(this, gDate);
            }
          }
          /**
          * Converts the current Hijri date to Gregorian.
          */

        }, {
          key: "toGregorian",
          value: function toGregorian(hDate) {
            var hYear = hDate.year;
            var hMonth = hDate.month - 1;
            var hDay = hDate.day;
            var gDate = new Date(GREGORIAN_FIRST_DATE);
            var dayDiff = hDay - 1;

            if (hYear >= HIJRI_BEGIN && hYear <= HIJRI_END) {
              for (var y = 0; y < hYear - HIJRI_BEGIN; y++) {
                for (var m = 0; m < 12; m++) {
                  dayDiff += +MONTH_LENGTH[y][m] + 29;
                }
              }

              for (var _m = 0; _m < hMonth; _m++) {
                dayDiff += +MONTH_LENGTH[hYear - HIJRI_BEGIN][_m] + 29;
              }

              gDate.setDate(GREGORIAN_FIRST_DATE.getDate() + dayDiff);
            } else {
              gDate = _get(_getPrototypeOf(NgbCalendarIslamicUmalqura.prototype), "toGregorian", this).call(this, hDate);
            }

            return gDate;
          }
          /**
          * Returns the number of days in a specific Hijri hMonth.
          * `hMonth` is 1 for Muharram, 2 for Safar, etc.
          * `hYear` is any Hijri hYear.
          */

        }, {
          key: "getDaysPerMonth",
          value: function getDaysPerMonth(hMonth, hYear) {
            if (hYear >= HIJRI_BEGIN && hYear <= HIJRI_END) {
              var pos = hYear - HIJRI_BEGIN;
              return +MONTH_LENGTH[pos][hMonth - 1] + 29;
            }

            return _get(_getPrototypeOf(NgbCalendarIslamicUmalqura.prototype), "getDaysPerMonth", this).call(this, hMonth, hYear);
          }
        }]);

        return NgbCalendarIslamicUmalqura;
      }(NgbCalendarIslamicCivil);

      NgbCalendarIslamicUmalqura.ɵfac = function NgbCalendarIslamicUmalqura_Factory(t) {
        return ɵNgbCalendarIslamicUmalqura_BaseFactory(t || NgbCalendarIslamicUmalqura);
      };

      NgbCalendarIslamicUmalqura.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: NgbCalendarIslamicUmalqura,
        factory: NgbCalendarIslamicUmalqura.ɵfac
      });
      /**
       * Returns the equivalent JS date value for a give input Jalali date.
       * `jalaliDate` is an Jalali date to be converted to Gregorian.
       */

      function toGregorian(jalaliDate) {
        var jdn = jalaliToJulian(jalaliDate.year, jalaliDate.month, jalaliDate.day);
        var date = julianToGregorian(jdn);
        date.setHours(6, 30, 3, 200);
        return date;
      }
      /**
       * Returns the equivalent jalali date value for a give input Gregorian date.
       * `gdate` is a JS Date to be converted to jalali.
       * utc to local
       */


      function fromGregorian(gdate) {
        var g2d = gregorianToJulian(gdate.getFullYear(), gdate.getMonth() + 1, gdate.getDate());
        return julianToJalali(g2d);
      }

      function setJalaliYear(date, yearValue) {
        date.year = +yearValue;
        return date;
      }

      function setJalaliMonth(date, month) {
        month = +month;
        date.year = date.year + Math.floor((month - 1) / 12);
        date.month = Math.floor(((month - 1) % 12 + 12) % 12) + 1;
        return date;
      }

      function setJalaliDay(date, day) {
        var mDays = getDaysPerMonth(date.month, date.year);

        if (day <= 0) {
          while (day <= 0) {
            date = setJalaliMonth(date, date.month - 1);
            mDays = getDaysPerMonth(date.month, date.year);
            day += mDays;
          }
        } else if (day > mDays) {
          while (day > mDays) {
            day -= mDays;
            date = setJalaliMonth(date, date.month + 1);
            mDays = getDaysPerMonth(date.month, date.year);
          }
        }

        date.day = day;
        return date;
      }

      function mod$1(a, b) {
        return a - b * Math.floor(a / b);
      }

      function div(a, b) {
        return Math.trunc(a / b);
      }
      /*
       This function determines if the Jalali (Persian) year is
       leap (366-day long) or is the common year (365 days), and
       finds the day in March (Gregorian calendar) of the first
       day of the Jalali year (jalaliYear).
       @param jalaliYear Jalali calendar year (-61 to 3177)
       @return
       leap: number of years since the last leap year (0 to 4)
       gYear: Gregorian year of the beginning of Jalali year
       march: the March day of Farvardin the 1st (1st day of jalaliYear)
       @see: http://www.astro.uni.torun.pl/~kb/Papers/EMP/PersianC-EMP.htm
       @see: http://www.fourmilab.ch/documents/calendar/
       */


      function jalCal(jalaliYear) {
        // Jalali years starting the 33-year rule.
        var breaks = [-61, 9, 38, 199, 426, 686, 756, 818, 1111, 1181, 1210, 1635, 2060, 2097, 2192, 2262, 2324, 2394, 2456, 3178];
        var breaksLength = breaks.length;
        var gYear = jalaliYear + 621;
        var leapJ = -14;
        var jp = breaks[0];

        if (jalaliYear < jp || jalaliYear >= breaks[breaksLength - 1]) {
          throw new Error('Invalid Jalali year ' + jalaliYear);
        } // Find the limiting years for the Jalali year jalaliYear.


        var jump;

        for (var i = 1; i < breaksLength; i += 1) {
          var jm = breaks[i];
          jump = jm - jp;

          if (jalaliYear < jm) {
            break;
          }

          leapJ = leapJ + div(jump, 33) * 8 + div(mod$1(jump, 33), 4);
          jp = jm;
        }

        var n = jalaliYear - jp; // Find the number of leap years from AD 621 to the beginning
        // of the current Jalali year in the Persian calendar.

        leapJ = leapJ + div(n, 33) * 8 + div(mod$1(n, 33) + 3, 4);

        if (mod$1(jump, 33) === 4 && jump - n === 4) {
          leapJ += 1;
        } // And the same in the Gregorian calendar (until the year gYear).


        var leapG = div(gYear, 4) - div((div(gYear, 100) + 1) * 3, 4) - 150; // Determine the Gregorian date of Farvardin the 1st.

        var march = 20 + leapJ - leapG; // Find how many years have passed since the last leap year.

        if (jump - n < 6) {
          n = n - jump + div(jump + 4, 33) * 33;
        }

        var leap = mod$1(mod$1(n + 1, 33) - 1, 4);

        if (leap === -1) {
          leap = 4;
        }

        return {
          leap: leap,
          gy: gYear,
          march: march
        };
      }
      /*
       Calculates Gregorian and Julian calendar dates from the Julian Day number
       (jdn) for the period since jdn=-34839655 (i.e. the year -100100 of both
       calendars) to some millions years ahead of the present.
       @param jdn Julian Day number
       @return
       gYear: Calendar year (years BC numbered 0, -1, -2, ...)
       gMonth: Calendar month (1 to 12)
       gDay: Calendar day of the month M (1 to 28/29/30/31)
       */


      function julianToGregorian(julianDayNumber) {
        var j = 4 * julianDayNumber + 139361631;
        j = j + div(div(4 * julianDayNumber + 183187720, 146097) * 3, 4) * 4 - 3908;
        var i = div(mod$1(j, 1461), 4) * 5 + 308;
        var gDay = div(mod$1(i, 153), 5) + 1;
        var gMonth = mod$1(div(i, 153), 12) + 1;
        var gYear = div(j, 1461) - 100100 + div(8 - gMonth, 6);
        return new Date(gYear, gMonth - 1, gDay);
      }
      /*
       Converts a date of the Jalali calendar to the Julian Day number.
       @param jy Jalali year (1 to 3100)
       @param jm Jalali month (1 to 12)
       @param jd Jalali day (1 to 29/31)
       @return Julian Day number
       */


      function gregorianToJulian(gy, gm, gd) {
        var d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4) + div(153 * mod$1(gm + 9, 12) + 2, 5) + gd - 34840408;
        d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752;
        return d;
      }
      /*
       Converts the Julian Day number to a date in the Jalali calendar.
       @param julianDayNumber Julian Day number
       @return
       jalaliYear: Jalali year (1 to 3100)
       jalaliMonth: Jalali month (1 to 12)
       jalaliDay: Jalali day (1 to 29/31)
       */


      function julianToJalali(julianDayNumber) {
        var gy = julianToGregorian(julianDayNumber).getFullYear() // Calculate Gregorian year (gy).
        ,
            jalaliYear = gy - 621,
            r = jalCal(jalaliYear),
            gregorianDay = gregorianToJulian(gy, 3, r.march),
            jalaliDay,
            jalaliMonth,
            numberOfDays; // Find number of days that passed since 1 Farvardin.

        numberOfDays = julianDayNumber - gregorianDay;

        if (numberOfDays >= 0) {
          if (numberOfDays <= 185) {
            // The first 6 months.
            jalaliMonth = 1 + div(numberOfDays, 31);
            jalaliDay = mod$1(numberOfDays, 31) + 1;
            return new NgbDate(jalaliYear, jalaliMonth, jalaliDay);
          } else {
            // The remaining months.
            numberOfDays -= 186;
          }
        } else {
          // Previous Jalali year.
          jalaliYear -= 1;
          numberOfDays += 179;

          if (r.leap === 1) {
            numberOfDays += 1;
          }
        }

        jalaliMonth = 7 + div(numberOfDays, 30);
        jalaliDay = mod$1(numberOfDays, 30) + 1;
        return new NgbDate(jalaliYear, jalaliMonth, jalaliDay);
      }
      /*
       Converts a date of the Jalali calendar to the Julian Day number.
       @param jYear Jalali year (1 to 3100)
       @param jMonth Jalali month (1 to 12)
       @param jDay Jalali day (1 to 29/31)
       @return Julian Day number
       */


      function jalaliToJulian(jYear, jMonth, jDay) {
        var r = jalCal(jYear);
        return gregorianToJulian(r.gy, 3, r.march) + (jMonth - 1) * 31 - div(jMonth, 7) * (jMonth - 7) + jDay - 1;
      }
      /**
       * Returns the number of days in a specific jalali month.
       */


      function getDaysPerMonth(month, year) {
        if (month <= 6) {
          return 31;
        }

        if (month <= 11) {
          return 30;
        }

        if (jalCal(year).leap === 0) {
          return 30;
        }

        return 29;
      }

      var NgbCalendarPersian = /*#__PURE__*/function (_NgbCalendar3) {
        _inherits(NgbCalendarPersian, _NgbCalendar3);

        var _super9 = _createSuper(NgbCalendarPersian);

        function NgbCalendarPersian() {
          _classCallCheck(this, NgbCalendarPersian);

          return _super9.apply(this, arguments);
        }

        _createClass(NgbCalendarPersian, [{
          key: "getDaysPerWeek",
          value: function getDaysPerWeek() {
            return 7;
          }
        }, {
          key: "getMonths",
          value: function getMonths() {
            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
          }
        }, {
          key: "getWeeksPerMonth",
          value: function getWeeksPerMonth() {
            return 6;
          }
        }, {
          key: "getNext",
          value: function getNext(date) {
            var period = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'd';
            var number = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
            date = new NgbDate(date.year, date.month, date.day);

            switch (period) {
              case 'y':
                date = setJalaliYear(date, date.year + number);
                date.month = 1;
                date.day = 1;
                return date;

              case 'm':
                date = setJalaliMonth(date, date.month + number);
                date.day = 1;
                return date;

              case 'd':
                return setJalaliDay(date, date.day + number);

              default:
                return date;
            }
          }
        }, {
          key: "getPrev",
          value: function getPrev(date) {
            var period = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'd';
            var number = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
            return this.getNext(date, period, -number);
          }
        }, {
          key: "getWeekday",
          value: function getWeekday(date) {
            var day = toGregorian(date).getDay(); // in JS Date Sun=0, in ISO 8601 Sun=7

            return day === 0 ? 7 : day;
          }
        }, {
          key: "getWeekNumber",
          value: function getWeekNumber(week, firstDayOfWeek) {
            // in JS Date Sun=0, in ISO 8601 Sun=7
            if (firstDayOfWeek === 7) {
              firstDayOfWeek = 0;
            }

            var thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;
            var date = week[thursdayIndex];
            var jsDate = toGregorian(date);
            jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7)); // Thursday

            var time = jsDate.getTime();
            var startDate = toGregorian(new NgbDate(date.year, 1, 1));
            return Math.floor(Math.round((time - startDate.getTime()) / 86400000) / 7) + 1;
          }
        }, {
          key: "getToday",
          value: function getToday() {
            return fromGregorian(new Date());
          }
        }, {
          key: "isValid",
          value: function isValid(date) {
            return date != null && isInteger(date.year) && isInteger(date.month) && isInteger(date.day) && !isNaN(toGregorian(date).getTime());
          }
        }]);

        return NgbCalendarPersian;
      }(NgbCalendar);

      NgbCalendarPersian.ɵfac = function NgbCalendarPersian_Factory(t) {
        return ɵNgbCalendarPersian_BaseFactory(t || NgbCalendarPersian);
      };

      NgbCalendarPersian.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: NgbCalendarPersian,
        factory: NgbCalendarPersian.ɵfac
      });
      var PARTS_PER_HOUR = 1080;
      var PARTS_PER_DAY = 24 * PARTS_PER_HOUR;
      var PARTS_FRACTIONAL_MONTH = 12 * PARTS_PER_HOUR + 793;
      var PARTS_PER_MONTH = 29 * PARTS_PER_DAY + PARTS_FRACTIONAL_MONTH;
      var BAHARAD = 11 * PARTS_PER_HOUR + 204;
      var HEBREW_DAY_ON_JAN_1_1970 = 2092591;
      var GREGORIAN_EPOCH$1 = 1721425.5;

      function isGregorianLeapYear$1(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
      }

      function numberOfFirstDayInYear(year) {
        var monthsBeforeYear = Math.floor((235 * year - 234) / 19);
        var fractionalMonthsBeforeYear = monthsBeforeYear * PARTS_FRACTIONAL_MONTH + BAHARAD;
        var dayNumber = monthsBeforeYear * 29 + Math.floor(fractionalMonthsBeforeYear / PARTS_PER_DAY);
        var timeOfDay = fractionalMonthsBeforeYear % PARTS_PER_DAY;
        var dayOfWeek = dayNumber % 7; // 0 == Monday

        if (dayOfWeek === 2 || dayOfWeek === 4 || dayOfWeek === 6) {
          dayNumber++;
          dayOfWeek = dayNumber % 7;
        }

        if (dayOfWeek === 1 && timeOfDay > 15 * PARTS_PER_HOUR + 204 && !isHebrewLeapYear(year)) {
          dayNumber += 2;
        } else if (dayOfWeek === 0 && timeOfDay > 21 * PARTS_PER_HOUR + 589 && isHebrewLeapYear(year - 1)) {
          dayNumber++;
        }

        return dayNumber;
      }

      function getDaysInGregorianMonth(month, year) {
        var days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

        if (isGregorianLeapYear$1(year)) {
          days[1]++;
        }

        return days[month - 1];
      }

      function getHebrewMonths(year) {
        return isHebrewLeapYear(year) ? 13 : 12;
      }
      /**
       * Returns the number of days in a specific Hebrew year.
       * `year` is any Hebrew year.
       */


      function getDaysInHebrewYear(year) {
        return numberOfFirstDayInYear(year + 1) - numberOfFirstDayInYear(year);
      }

      function isHebrewLeapYear(year) {
        if (year != null) {
          var b = (year * 12 + 17) % 19;
          return b >= (b < 0 ? -7 : 12);
        }

        return false;
      }
      /**
       * Returns the number of days in a specific Hebrew month.
       * `month` is 1 for Nisan, 2 for Iyar etc. Note: Hebrew leap year contains 13 months.
       * `year` is any Hebrew year.
       */


      function getDaysInHebrewMonth(month, year) {
        var yearLength = numberOfFirstDayInYear(year + 1) - numberOfFirstDayInYear(year);
        var yearType = (yearLength <= 380 ? yearLength : yearLength - 30) - 353;
        var leapYear = isHebrewLeapYear(year);
        var daysInMonth = leapYear ? [30, 29, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29] : [30, 29, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29];

        if (yearType > 0) {
          daysInMonth[2]++; // Kislev gets an extra day in normal or complete years.
        }

        if (yearType > 1) {
          daysInMonth[1]++; // Heshvan gets an extra day in complete years only.
        }

        return daysInMonth[month - 1];
      }

      function getDayNumberInHebrewYear(date) {
        var numberOfDay = 0;

        for (var i = 1; i < date.month; i++) {
          numberOfDay += getDaysInHebrewMonth(i, date.year);
        }

        return numberOfDay + date.day;
      }

      function setHebrewMonth(date, val) {
        var after = val >= 0;

        if (!after) {
          val = -val;
        }

        while (val > 0) {
          if (after) {
            if (val > getHebrewMonths(date.year) - date.month) {
              val -= getHebrewMonths(date.year) - date.month + 1;
              date.year++;
              date.month = 1;
            } else {
              date.month += val;
              val = 0;
            }
          } else {
            if (val >= date.month) {
              date.year--;
              val -= date.month;
              date.month = getHebrewMonths(date.year);
            } else {
              date.month -= val;
              val = 0;
            }
          }
        }

        return date;
      }

      function setHebrewDay(date, val) {
        var after = val >= 0;

        if (!after) {
          val = -val;
        }

        while (val > 0) {
          if (after) {
            if (val > getDaysInHebrewYear(date.year) - getDayNumberInHebrewYear(date)) {
              val -= getDaysInHebrewYear(date.year) - getDayNumberInHebrewYear(date) + 1;
              date.year++;
              date.month = 1;
              date.day = 1;
            } else if (val > getDaysInHebrewMonth(date.month, date.year) - date.day) {
              val -= getDaysInHebrewMonth(date.month, date.year) - date.day + 1;
              date.month++;
              date.day = 1;
            } else {
              date.day += val;
              val = 0;
            }
          } else {
            if (val >= date.day) {
              val -= date.day;
              date.month--;

              if (date.month === 0) {
                date.year--;
                date.month = getHebrewMonths(date.year);
              }

              date.day = getDaysInHebrewMonth(date.month, date.year);
            } else {
              date.day -= val;
              val = 0;
            }
          }
        }

        return date;
      }
      /**
       * Returns the equivalent Hebrew date value for a give input Gregorian date.
       * `gdate` is a JS Date to be converted to Hebrew date.
       */


      function fromGregorian$1(gdate) {
        var date = new Date(gdate);
        var gYear = date.getFullYear(),
            gMonth = date.getMonth(),
            gDay = date.getDate();
        var julianDay = GREGORIAN_EPOCH$1 - 1 + 365 * (gYear - 1) + Math.floor((gYear - 1) / 4) - Math.floor((gYear - 1) / 100) + Math.floor((gYear - 1) / 400) + Math.floor((367 * (gMonth + 1) - 362) / 12 + (gMonth + 1 <= 2 ? 0 : isGregorianLeapYear$1(gYear) ? -1 : -2) + gDay);
        julianDay = Math.floor(julianDay + 0.5);
        var daysSinceHebEpoch = julianDay - 347997;
        var monthsSinceHebEpoch = Math.floor(daysSinceHebEpoch * PARTS_PER_DAY / PARTS_PER_MONTH);
        var hYear = Math.floor((monthsSinceHebEpoch * 19 + 234) / 235) + 1;
        var firstDayOfThisYear = numberOfFirstDayInYear(hYear);
        var dayOfYear = daysSinceHebEpoch - firstDayOfThisYear;

        while (dayOfYear < 1) {
          hYear--;
          firstDayOfThisYear = numberOfFirstDayInYear(hYear);
          dayOfYear = daysSinceHebEpoch - firstDayOfThisYear;
        }

        var hMonth = 1;
        var hDay = dayOfYear;

        while (hDay > getDaysInHebrewMonth(hMonth, hYear)) {
          hDay -= getDaysInHebrewMonth(hMonth, hYear);
          hMonth++;
        }

        return new NgbDate(hYear, hMonth, hDay);
      }
      /**
       * Returns the equivalent JS date value for a given Hebrew date.
       * `hebrewDate` is an Hebrew date to be converted to Gregorian.
       */


      function toGregorian$1(hebrewDate) {
        var hYear = hebrewDate.year;
        var hMonth = hebrewDate.month;
        var hDay = hebrewDate.day;
        var days = numberOfFirstDayInYear(hYear);

        for (var i = 1; i < hMonth; i++) {
          days += getDaysInHebrewMonth(i, hYear);
        }

        days += hDay;
        var diffDays = days - HEBREW_DAY_ON_JAN_1_1970;
        var after = diffDays >= 0;

        if (!after) {
          diffDays = -diffDays;
        }

        var gYear = 1970;
        var gMonth = 1;
        var gDay = 1;

        while (diffDays > 0) {
          if (after) {
            if (diffDays >= (isGregorianLeapYear$1(gYear) ? 366 : 365)) {
              diffDays -= isGregorianLeapYear$1(gYear) ? 366 : 365;
              gYear++;
            } else if (diffDays >= getDaysInGregorianMonth(gMonth, gYear)) {
              diffDays -= getDaysInGregorianMonth(gMonth, gYear);
              gMonth++;
            } else {
              gDay += diffDays;
              diffDays = 0;
            }
          } else {
            if (diffDays >= (isGregorianLeapYear$1(gYear - 1) ? 366 : 365)) {
              diffDays -= isGregorianLeapYear$1(gYear - 1) ? 366 : 365;
              gYear--;
            } else {
              if (gMonth > 1) {
                gMonth--;
              } else {
                gMonth = 12;
                gYear--;
              }

              if (diffDays >= getDaysInGregorianMonth(gMonth, gYear)) {
                diffDays -= getDaysInGregorianMonth(gMonth, gYear);
              } else {
                gDay = getDaysInGregorianMonth(gMonth, gYear) - diffDays + 1;
                diffDays = 0;
              }
            }
          }
        }

        return new Date(gYear, gMonth - 1, gDay);
      }

      function hebrewNumerals(numerals) {
        if (!numerals) {
          return '';
        }

        var hArray0_9 = ['', "\u05D0", "\u05D1", "\u05D2", "\u05D3", "\u05D4", "\u05D5", "\u05D6", "\u05D7", "\u05D8"];
        var hArray10_19 = ["\u05D9", "\u05D9\u05D0", "\u05D9\u05D1", "\u05D9\u05D2", "\u05D9\u05D3", "\u05D8\u05D5", "\u05D8\u05D6", "\u05D9\u05D6", "\u05D9\u05D7", "\u05D9\u05D8"];
        var hArray20_90 = ['', '', "\u05DB", "\u05DC", "\u05DE", "\u05E0", "\u05E1", "\u05E2", "\u05E4", "\u05E6"];
        var hArray100_900 = ['', "\u05E7", "\u05E8", "\u05E9", "\u05EA", "\u05EA\u05E7", "\u05EA\u05E8", "\u05EA\u05E9", "\u05EA\u05EA", "\u05EA\u05EA\u05E7"];
        var hArray1000_9000 = ['', "\u05D0", "\u05D1", "\u05D1\u05D0", "\u05D1\u05D1", "\u05D4", "\u05D4\u05D0", "\u05D4\u05D1", "\u05D4\u05D1\u05D0", "\u05D4\u05D1\u05D1"];
        var geresh = "\u05F3",
            gershaim = "\u05F4";
        var mem = 0;
        var result = [];
        var step = 0;

        while (numerals > 0) {
          var m = numerals % 10;

          if (step === 0) {
            mem = m;
          } else if (step === 1) {
            if (m !== 1) {
              result.unshift(hArray20_90[m], hArray0_9[mem]);
            } else {
              result.unshift(hArray10_19[mem]);
            }
          } else if (step === 2) {
            result.unshift(hArray100_900[m]);
          } else {
            if (m !== 5) {
              result.unshift(hArray1000_9000[m], geresh, ' ');
            }

            break;
          }

          numerals = Math.floor(numerals / 10);

          if (step === 0 && numerals === 0) {
            result.unshift(hArray0_9[m]);
          }

          step++;
        }

        result = result.join('').split('');

        if (result.length === 1) {
          result.push(geresh);
        } else if (result.length > 1) {
          result.splice(result.length - 1, 0, gershaim);
        }

        return result.join('');
      }
      /**
       * @since 3.2.0
       */


      var NgbCalendarHebrew = /*#__PURE__*/function (_NgbCalendar4) {
        _inherits(NgbCalendarHebrew, _NgbCalendar4);

        var _super10 = _createSuper(NgbCalendarHebrew);

        function NgbCalendarHebrew() {
          _classCallCheck(this, NgbCalendarHebrew);

          return _super10.apply(this, arguments);
        }

        _createClass(NgbCalendarHebrew, [{
          key: "getDaysPerWeek",
          value: function getDaysPerWeek() {
            return 7;
          }
        }, {
          key: "getMonths",
          value: function getMonths(year) {
            if (year && isHebrewLeapYear(year)) {
              return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];
            } else {
              return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
            }
          }
        }, {
          key: "getWeeksPerMonth",
          value: function getWeeksPerMonth() {
            return 6;
          }
        }, {
          key: "isValid",
          value: function isValid(date) {
            if (date != null) {
              var b = isNumber(date.year) && isNumber(date.month) && isNumber(date.day);
              b = b && date.month > 0 && date.month <= (isHebrewLeapYear(date.year) ? 13 : 12);
              b = b && date.day > 0 && date.day <= getDaysInHebrewMonth(date.month, date.year);
              return b && !isNaN(toGregorian$1(date).getTime());
            }

            return false;
          }
        }, {
          key: "getNext",
          value: function getNext(date) {
            var period = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'd';
            var number = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
            date = new NgbDate(date.year, date.month, date.day);

            switch (period) {
              case 'y':
                date.year += number;
                date.month = 1;
                date.day = 1;
                return date;

              case 'm':
                date = setHebrewMonth(date, number);
                date.day = 1;
                return date;

              case 'd':
                return setHebrewDay(date, number);

              default:
                return date;
            }
          }
        }, {
          key: "getPrev",
          value: function getPrev(date) {
            var period = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'd';
            var number = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
            return this.getNext(date, period, -number);
          }
        }, {
          key: "getWeekday",
          value: function getWeekday(date) {
            var day = toGregorian$1(date).getDay(); // in JS Date Sun=0, in ISO 8601 Sun=7

            return day === 0 ? 7 : day;
          }
        }, {
          key: "getWeekNumber",
          value: function getWeekNumber(week, firstDayOfWeek) {
            var date = week[week.length - 1];
            return Math.ceil(getDayNumberInHebrewYear(date) / 7);
          }
        }, {
          key: "getToday",
          value: function getToday() {
            return fromGregorian$1(new Date());
          }
          /**
           * @since 3.4.0
           */

        }, {
          key: "toGregorian",
          value: function toGregorian(date) {
            return fromJSDate(toGregorian$1(date));
          }
          /**
           * @since 3.4.0
           */

        }, {
          key: "fromGregorian",
          value: function fromGregorian(date) {
            return fromGregorian$1(toJSDate(date));
          }
        }]);

        return NgbCalendarHebrew;
      }(NgbCalendar);

      NgbCalendarHebrew.ɵfac = function NgbCalendarHebrew_Factory(t) {
        return ɵNgbCalendarHebrew_BaseFactory(t || NgbCalendarHebrew);
      };

      NgbCalendarHebrew.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: NgbCalendarHebrew,
        factory: NgbCalendarHebrew.ɵfac
      });
      var WEEKDAYS = ['שני', 'שלישי', 'רביעי', 'חמישי', 'שישי', 'שבת', 'ראשון'];
      var MONTHS = ['תשרי', 'חשון', 'כסלו', 'טבת', 'שבט', 'אדר', 'ניסן', 'אייר', 'סיון', 'תמוז', 'אב', 'אלול'];
      var MONTHS_LEAP = ['תשרי', 'חשון', 'כסלו', 'טבת', 'שבט', 'אדר א׳', 'אדר ב׳', 'ניסן', 'אייר', 'סיון', 'תמוז', 'אב', 'אלול'];
      /**
       * @since 3.2.0
       */

      var NgbDatepickerI18nHebrew = /*#__PURE__*/function (_NgbDatepickerI18n2) {
        _inherits(NgbDatepickerI18nHebrew, _NgbDatepickerI18n2);

        var _super11 = _createSuper(NgbDatepickerI18nHebrew);

        function NgbDatepickerI18nHebrew() {
          _classCallCheck(this, NgbDatepickerI18nHebrew);

          return _super11.apply(this, arguments);
        }

        _createClass(NgbDatepickerI18nHebrew, [{
          key: "getMonthShortName",
          value: function getMonthShortName(month, year) {
            return this.getMonthFullName(month, year);
          }
        }, {
          key: "getMonthFullName",
          value: function getMonthFullName(month, year) {
            return isHebrewLeapYear(year) ? MONTHS_LEAP[month - 1] || '' : MONTHS[month - 1] || '';
          }
        }, {
          key: "getWeekdayShortName",
          value: function getWeekdayShortName(weekday) {
            return WEEKDAYS[weekday - 1] || '';
          }
        }, {
          key: "getDayAriaLabel",
          value: function getDayAriaLabel(date) {
            return "".concat(hebrewNumerals(date.day), " ").concat(this.getMonthFullName(date.month, date.year), " ").concat(hebrewNumerals(date.year));
          }
        }, {
          key: "getDayNumerals",
          value: function getDayNumerals(date) {
            return hebrewNumerals(date.day);
          }
        }, {
          key: "getWeekNumerals",
          value: function getWeekNumerals(weekNumber) {
            return hebrewNumerals(weekNumber);
          }
        }, {
          key: "getYearNumerals",
          value: function getYearNumerals(year) {
            return hebrewNumerals(year);
          }
        }]);

        return NgbDatepickerI18nHebrew;
      }(NgbDatepickerI18n);

      NgbDatepickerI18nHebrew.ɵfac = function NgbDatepickerI18nHebrew_Factory(t) {
        return ɵNgbDatepickerI18nHebrew_BaseFactory(t || NgbDatepickerI18nHebrew);
      };

      NgbDatepickerI18nHebrew.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: NgbDatepickerI18nHebrew,
        factory: NgbDatepickerI18nHebrew.ɵfac
      });
      /**
       * [`NgbDateAdapter`](#/components/datepicker/api#NgbDateAdapter) implementation that uses
       * native javascript dates as a user date model.
       */

      var NgbDateNativeAdapter = /*#__PURE__*/function (_NgbDateAdapter2) {
        _inherits(NgbDateNativeAdapter, _NgbDateAdapter2);

        var _super12 = _createSuper(NgbDateNativeAdapter);

        function NgbDateNativeAdapter() {
          _classCallCheck(this, NgbDateNativeAdapter);

          return _super12.apply(this, arguments);
        }

        _createClass(NgbDateNativeAdapter, [{
          key: "fromModel",

          /**
           * Converts a native `Date` to a `NgbDateStruct`.
           */
          value: function fromModel(date) {
            return date instanceof Date && !isNaN(date.getTime()) ? this._fromNativeDate(date) : null;
          }
          /**
           * Converts a `NgbDateStruct` to a native `Date`.
           */

        }, {
          key: "toModel",
          value: function toModel(date) {
            return date && isInteger(date.year) && isInteger(date.month) && isInteger(date.day) ? this._toNativeDate(date) : null;
          }
        }, {
          key: "_fromNativeDate",
          value: function _fromNativeDate(date) {
            return {
              year: date.getFullYear(),
              month: date.getMonth() + 1,
              day: date.getDate()
            };
          }
        }, {
          key: "_toNativeDate",
          value: function _toNativeDate(date) {
            var jsDate = new Date(date.year, date.month - 1, date.day, 12); // avoid 30 -> 1930 conversion

            jsDate.setFullYear(date.year);
            return jsDate;
          }
        }]);

        return NgbDateNativeAdapter;
      }(NgbDateAdapter);

      NgbDateNativeAdapter.ɵfac = function NgbDateNativeAdapter_Factory(t) {
        return ɵNgbDateNativeAdapter_BaseFactory(t || NgbDateNativeAdapter);
      };

      NgbDateNativeAdapter.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: NgbDateNativeAdapter,
        factory: NgbDateNativeAdapter.ɵfac
      });
      /**
       * Same as [`NgbDateNativeAdapter`](#/components/datepicker/api#NgbDateNativeAdapter), but with UTC dates.
       *
       * @since 3.2.0
       */

      var NgbDateNativeUTCAdapter = /*#__PURE__*/function (_NgbDateNativeAdapter) {
        _inherits(NgbDateNativeUTCAdapter, _NgbDateNativeAdapter);

        var _super13 = _createSuper(NgbDateNativeUTCAdapter);

        function NgbDateNativeUTCAdapter() {
          _classCallCheck(this, NgbDateNativeUTCAdapter);

          return _super13.apply(this, arguments);
        }

        _createClass(NgbDateNativeUTCAdapter, [{
          key: "_fromNativeDate",
          value: function _fromNativeDate(date) {
            return {
              year: date.getUTCFullYear(),
              month: date.getUTCMonth() + 1,
              day: date.getUTCDate()
            };
          }
        }, {
          key: "_toNativeDate",
          value: function _toNativeDate(date) {
            var jsDate = new Date(Date.UTC(date.year, date.month - 1, date.day)); // avoid 30 -> 1930 conversion

            jsDate.setUTCFullYear(date.year);
            return jsDate;
          }
        }]);

        return NgbDateNativeUTCAdapter;
      }(NgbDateNativeAdapter);

      NgbDateNativeUTCAdapter.ɵfac = function NgbDateNativeUTCAdapter_Factory(t) {
        return ɵNgbDateNativeUTCAdapter_BaseFactory(t || NgbDateNativeUTCAdapter);
      };

      NgbDateNativeUTCAdapter.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: NgbDateNativeUTCAdapter,
        factory: NgbDateNativeUTCAdapter.ɵfac
      });

      var NgbDatepickerModule = function NgbDatepickerModule() {
        _classCallCheck(this, NgbDatepickerModule);
      };

      NgbDatepickerModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: NgbDatepickerModule
      });
      NgbDatepickerModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function NgbDatepickerModule_Factory(t) {
          return new (t || NgbDatepickerModule)();
        },
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"]]]
      });
      /**
       * A configuration service for the [`NgbDropdown`](#/components/dropdown/api#NgbDropdown) component.
       *
       * You can inject this service, typically in your root component, and customize the values of its properties in
       * order to provide default values for all the dropdowns used in the application.
       */

      var NgbDropdownConfig = function NgbDropdownConfig() {
        _classCallCheck(this, NgbDropdownConfig);

        this.autoClose = true;
        this.placement = ['bottom-left', 'bottom-right', 'top-left', 'top-right'];
      };

      NgbDropdownConfig.ɵfac = function NgbDropdownConfig_Factory(t) {
        return new (t || NgbDropdownConfig)();
      };

      NgbDropdownConfig.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function NgbDropdownConfig_Factory() {
          return new NgbDropdownConfig();
        },
        token: NgbDropdownConfig,
        providedIn: "root"
      });
      var NgbDropdownToggle_1;

      var NgbNavbar = function NgbNavbar() {
        _classCallCheck(this, NgbNavbar);
      };

      NgbNavbar.ɵfac = function NgbNavbar_Factory(t) {
        return new (t || NgbNavbar)();
      };

      NgbNavbar.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbNavbar,
        selectors: [["", 8, "navbar"]]
      });
      /**
       * A directive you should put on a dropdown item to enable keyboard navigation.
       * Arrow keys will move focus between items marked with this directive.
       *
       * @since 4.1.0
       */

      var NgbDropdownItem = /*#__PURE__*/function () {
        function NgbDropdownItem(elementRef) {
          _classCallCheck(this, NgbDropdownItem);

          this.elementRef = elementRef;
          this._disabled = false;
        }

        _createClass(NgbDropdownItem, [{
          key: "disabled",
          set: function set(value) {
            this._disabled = value === '' || value === true; // accept an empty attribute as true
          },
          get: function get() {
            return this._disabled;
          }
        }]);

        return NgbDropdownItem;
      }();

      NgbDropdownItem.ɵfac = function NgbDropdownItem_Factory(t) {
        return new (t || NgbDropdownItem)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]));
      };

      NgbDropdownItem.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbDropdownItem,
        selectors: [["", "ngbDropdownItem", ""]],
        hostAttrs: [1, "dropdown-item"],
        hostVars: 2,
        hostBindings: function NgbDropdownItem_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("disabled", ctx.disabled);
          }
        },
        inputs: {
          disabled: "disabled"
        }
      });

      NgbDropdownItem.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDropdownItem.prototype, "disabled", null);
      /**
       * A directive that wraps dropdown menu content and dropdown items.
       */

      var NgbDropdownMenu = function NgbDropdownMenu(dropdown, _elementRef) {
        _classCallCheck(this, NgbDropdownMenu);

        this.dropdown = dropdown;
        this.placement = 'bottom';
        this.isOpen = false;
        this.nativeElement = _elementRef.nativeElement;
      };

      NgbDropdownMenu.ɵfac = function NgbDropdownMenu_Factory(t) {
        return new (t || NgbDropdownMenu)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
          return NgbDropdown;
        })), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]));
      };

      NgbDropdownMenu.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbDropdownMenu,
        selectors: [["", "ngbDropdownMenu", ""]],
        contentQueries: function NgbDropdownMenu_ContentQueries(rf, ctx, dirIndex) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, NgbDropdownItem, false);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.menuItems = _t);
          }
        },
        hostVars: 5,
        hostBindings: function NgbDropdownMenu_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("keydown.ArrowUp", function NgbDropdownMenu_keydown_ArrowUp_HostBindingHandler($event) {
              return ctx.dropdown.onKeyDown($event);
            })("keydown.ArrowDown", function NgbDropdownMenu_keydown_ArrowDown_HostBindingHandler($event) {
              return ctx.dropdown.onKeyDown($event);
            })("keydown.Home", function NgbDropdownMenu_keydown_Home_HostBindingHandler($event) {
              return ctx.dropdown.onKeyDown($event);
            })("keydown.End", function NgbDropdownMenu_keydown_End_HostBindingHandler($event) {
              return ctx.dropdown.onKeyDown($event);
            })("keydown.Enter", function NgbDropdownMenu_keydown_Enter_HostBindingHandler($event) {
              return ctx.dropdown.onKeyDown($event);
            })("keydown.Space", function NgbDropdownMenu_keydown_Space_HostBindingHandler($event) {
              return ctx.dropdown.onKeyDown($event);
            })("keydown.Tab", function NgbDropdownMenu_keydown_Tab_HostBindingHandler($event) {
              return ctx.dropdown.onKeyDown($event);
            })("keydown.Shift.Tab", function NgbDropdownMenu_keydown_Shift_Tab_HostBindingHandler($event) {
              return ctx.dropdown.onKeyDown($event);
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("x-placement", ctx.placement);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("dropdown-menu", true)("show", ctx.dropdown.isOpen());
          }
        }
      });

      NgbDropdownMenu.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
              return NgbDropdown;
            })]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"])(NgbDropdownItem)], NgbDropdownMenu.prototype, "menuItems", void 0);
      NgbDropdownMenu = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(0, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
        return NgbDropdown;
      })))], NgbDropdownMenu);
      /**
       * A directive to mark an element to which dropdown menu will be anchored.
       *
       * This is a simple version of the `NgbDropdownToggle` directive.
       * It plays the same role, but doesn't listen to click events to toggle dropdown menu thus enabling support
       * for events other than click.
       *
       * @since 1.1.0
       */

      var NgbDropdownAnchor = function NgbDropdownAnchor(dropdown, _elementRef) {
        _classCallCheck(this, NgbDropdownAnchor);

        this.dropdown = dropdown;
        this.nativeElement = _elementRef.nativeElement;
      };

      NgbDropdownAnchor.ɵfac = function NgbDropdownAnchor_Factory(t) {
        return new (t || NgbDropdownAnchor)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
          return NgbDropdown;
        })), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]));
      };

      NgbDropdownAnchor.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbDropdownAnchor,
        selectors: [["", "ngbDropdownAnchor", ""]],
        hostAttrs: ["aria-haspopup", "true", 1, "dropdown-toggle"],
        hostVars: 1,
        hostBindings: function NgbDropdownAnchor_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("aria-expanded", ctx.dropdown.isOpen());
          }
        }
      });

      NgbDropdownAnchor.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
              return NgbDropdown;
            })]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }];
      };

      NgbDropdownAnchor = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(0, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
        return NgbDropdown;
      })))], NgbDropdownAnchor);
      /**
       * A directive to mark an element that will toggle dropdown via the `click` event.
       *
       * You can also use `NgbDropdownAnchor` as an alternative.
       */

      var NgbDropdownToggle = NgbDropdownToggle_1 = /*#__PURE__*/function (_NgbDropdownAnchor) {
        _inherits(NgbDropdownToggle, _NgbDropdownAnchor);

        var _super14 = _createSuper(NgbDropdownToggle);

        function NgbDropdownToggle(dropdown, elementRef) {
          _classCallCheck(this, NgbDropdownToggle);

          return _super14.call(this, dropdown, elementRef);
        }

        return NgbDropdownToggle;
      }(NgbDropdownAnchor);

      NgbDropdownToggle.ɵfac = function NgbDropdownToggle_Factory(t) {
        return new (t || NgbDropdownToggle)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
          return NgbDropdown;
        })), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]));
      };

      NgbDropdownToggle.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbDropdownToggle,
        selectors: [["", "ngbDropdownToggle", ""]],
        hostAttrs: ["aria-haspopup", "true", 1, "dropdown-toggle"],
        hostVars: 1,
        hostBindings: function NgbDropdownToggle_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function NgbDropdownToggle_click_HostBindingHandler() {
              return ctx.dropdown.toggle();
            })("keydown.ArrowUp", function NgbDropdownToggle_keydown_ArrowUp_HostBindingHandler($event) {
              return ctx.dropdown.onKeyDown($event);
            })("keydown.ArrowDown", function NgbDropdownToggle_keydown_ArrowDown_HostBindingHandler($event) {
              return ctx.dropdown.onKeyDown($event);
            })("keydown.Home", function NgbDropdownToggle_keydown_Home_HostBindingHandler($event) {
              return ctx.dropdown.onKeyDown($event);
            })("keydown.End", function NgbDropdownToggle_keydown_End_HostBindingHandler($event) {
              return ctx.dropdown.onKeyDown($event);
            })("keydown.Tab", function NgbDropdownToggle_keydown_Tab_HostBindingHandler($event) {
              return ctx.dropdown.onKeyDown($event);
            })("keydown.Shift.Tab", function NgbDropdownToggle_keydown_Shift_Tab_HostBindingHandler($event) {
              return ctx.dropdown.onKeyDown($event);
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("aria-expanded", ctx.dropdown.isOpen());
          }
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵProvidersFeature"]([{
          provide: NgbDropdownAnchor,
          useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
            return NgbDropdownToggle_1;
          })
        }]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵInheritDefinitionFeature"]]
      });

      NgbDropdownToggle.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
              return NgbDropdown;
            })]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }];
      };

      NgbDropdownToggle = NgbDropdownToggle_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(0, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
        return NgbDropdown;
      })))], NgbDropdownToggle);
      /**
       * A directive that provides contextual overlays for displaying lists of links and more.
       */

      var NgbDropdown = /*#__PURE__*/function () {
        function NgbDropdown(_changeDetector, config, _document, _ngZone, _elementRef, _renderer, ngbNavbar) {
          var _this19 = this;

          _classCallCheck(this, NgbDropdown);

          this._changeDetector = _changeDetector;
          this._document = _document;
          this._ngZone = _ngZone;
          this._elementRef = _elementRef;
          this._renderer = _renderer;
          this._closed$ = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
          this._bodyContainer = null;
          /**
           * Defines whether or not the dropdown menu is opened initially.
           */

          this._open = false;
          /**
           * An event fired when the dropdown is opened or closed.
           *
           * The event payload is a `boolean`:
           * * `true` - the dropdown was opened
           * * `false` - the dropdown was closed
           */

          this.openChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          this.placement = config.placement;
          this.container = config.container;
          this.autoClose = config.autoClose;
          this.display = ngbNavbar ? 'static' : 'dynamic';
          this._zoneSubscription = _ngZone.onStable.subscribe(function () {
            _this19._positionMenu();
          });
        }

        _createClass(NgbDropdown, [{
          key: "ngAfterContentInit",
          value: function ngAfterContentInit() {
            var _this20 = this;

            this._ngZone.onStable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["take"])(1)).subscribe(function () {
              _this20._applyPlacementClasses();

              if (_this20._open) {
                _this20._setCloseHandlers();
              }
            });
          }
        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            if (changes.container && this._open) {
              this._applyContainer(this.container);
            }

            if (changes.placement && !changes.placement.isFirstChange) {
              this._applyPlacementClasses();
            }
          }
          /**
           * Checks if the dropdown menu is open.
           */

        }, {
          key: "isOpen",
          value: function isOpen() {
            return this._open;
          }
          /**
           * Opens the dropdown menu.
           */

        }, {
          key: "open",
          value: function open() {
            if (!this._open) {
              this._open = true;

              this._applyContainer(this.container);

              this.openChange.emit(true);

              this._setCloseHandlers();

              if (this._anchor) {
                this._anchor.nativeElement.focus();
              }
            }
          }
        }, {
          key: "_setCloseHandlers",
          value: function _setCloseHandlers() {
            var _this21 = this;

            ngbAutoClose(this._ngZone, this._document, this.autoClose, function (source) {
              _this21.close();

              if (source === 0
              /* ESCAPE */
              ) {
                  _this21._anchor.nativeElement.focus();
                }
            }, this._closed$, this._menu ? [this._menu.nativeElement] : [], this._anchor ? [this._anchor.nativeElement] : [], '.dropdown-item,.dropdown-divider');
          }
          /**
           * Closes the dropdown menu.
           */

        }, {
          key: "close",
          value: function close() {
            if (this._open) {
              this._open = false;

              this._resetContainer();

              this._closed$.next();

              this.openChange.emit(false);

              this._changeDetector.markForCheck();
            }
          }
          /**
           * Toggles the dropdown menu.
           */

        }, {
          key: "toggle",
          value: function toggle() {
            if (this.isOpen()) {
              this.close();
            } else {
              this.open();
            }
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._resetContainer();

            this._closed$.next();

            this._zoneSubscription.unsubscribe();
          }
        }, {
          key: "onKeyDown",
          value: function onKeyDown(event) {
            var _this22 = this;

            // tslint:disable-next-line:deprecation
            var key = event.which;

            var itemElements = this._getMenuElements();

            var position = -1;
            var itemElement = null;

            var isEventFromToggle = this._isEventFromToggle(event);

            if (!isEventFromToggle && itemElements.length) {
              itemElements.forEach(function (item, index) {
                if (item.contains(event.target)) {
                  itemElement = item;
                }

                if (item === _this22._document.activeElement) {
                  position = index;
                }
              });
            } // closing on Enter / Space


            if (key === Key.Space || key === Key.Enter) {
              if (itemElement && (this.autoClose === true || this.autoClose === 'inside')) {
                // Item is either a button or a link, so click will be triggered by the browser on Enter or Space.
                // So we have to register a one-time click handler that will fire after any user defined click handlers
                // to close the dropdown
                Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["fromEvent"])(itemElement, 'click').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["take"])(1)).subscribe(function () {
                  return _this22.close();
                });
              }

              return;
            }

            if (key === Key.Tab) {
              if (event.target && this.isOpen() && this.autoClose) {
                if (this._anchor.nativeElement === event.target) {
                  if (this.container === 'body' && !event.shiftKey) {
                    /* This case is special: user is using [Tab] from the anchor/toggle.
                       User expects the next focusable element in the dropdown menu to get focus.
                       But the menu is not a sibling to anchor/toggle, it is at the end of the body.
                       Trick is to synchronously focus the menu element, and let the [keydown.Tab] go
                       so that browser will focus the proper element (first one focusable in the menu) */
                    this._renderer.setAttribute(this._menu.nativeElement, 'tabindex', '0');

                    this._menu.nativeElement.focus();

                    this._renderer.removeAttribute(this._menu.nativeElement, 'tabindex');
                  } else if (event.shiftKey) {
                    this.close();
                  }

                  return;
                } else if (this.container === 'body') {
                  var focusableElements = this._menu.nativeElement.querySelectorAll(FOCUSABLE_ELEMENTS_SELECTOR);

                  if (event.shiftKey && event.target === focusableElements[0]) {
                    this._anchor.nativeElement.focus();

                    event.preventDefault();
                  } else if (!event.shiftKey && event.target === focusableElements[focusableElements.length - 1]) {
                    this._anchor.nativeElement.focus();

                    this.close();
                  }
                } else {
                  Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["fromEvent"])(event.target, 'focusout').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["take"])(1)).subscribe(function (_ref11) {
                    var relatedTarget = _ref11.relatedTarget;

                    if (!_this22._elementRef.nativeElement.contains(relatedTarget)) {
                      _this22.close();
                    }
                  });
                }
              }

              return;
            } // opening / navigating


            if (isEventFromToggle || itemElement) {
              this.open();

              if (itemElements.length) {
                switch (key) {
                  case Key.ArrowDown:
                    position = Math.min(position + 1, itemElements.length - 1);
                    break;

                  case Key.ArrowUp:
                    if (this._isDropup() && position === -1) {
                      position = itemElements.length - 1;
                      break;
                    }

                    position = Math.max(position - 1, 0);
                    break;

                  case Key.Home:
                    position = 0;
                    break;

                  case Key.End:
                    position = itemElements.length - 1;
                    break;
                }

                itemElements[position].focus();
              }

              event.preventDefault();
            }
          }
        }, {
          key: "_isDropup",
          value: function _isDropup() {
            return this._elementRef.nativeElement.classList.contains('dropup');
          }
        }, {
          key: "_isEventFromToggle",
          value: function _isEventFromToggle(event) {
            return this._anchor.nativeElement.contains(event.target);
          }
        }, {
          key: "_getMenuElements",
          value: function _getMenuElements() {
            var menu = this._menu;

            if (menu == null) {
              return [];
            }

            return menu.menuItems.filter(function (item) {
              return !item.disabled;
            }).map(function (item) {
              return item.elementRef.nativeElement;
            });
          }
        }, {
          key: "_positionMenu",
          value: function _positionMenu() {
            var menu = this._menu;

            if (this.isOpen() && menu) {
              this._applyPlacementClasses(this.display === 'dynamic' ? positionElements(this._anchor.nativeElement, this._bodyContainer || this._menu.nativeElement, this.placement, this.container === 'body') : this._getFirstPlacement(this.placement));
            }
          }
        }, {
          key: "_getFirstPlacement",
          value: function _getFirstPlacement(placement) {
            return Array.isArray(placement) ? placement[0] : placement.split(' ')[0];
          }
        }, {
          key: "_resetContainer",
          value: function _resetContainer() {
            var renderer = this._renderer;

            if (this._menu) {
              var dropdownElement = this._elementRef.nativeElement;
              var dropdownMenuElement = this._menu.nativeElement;
              renderer.appendChild(dropdownElement, dropdownMenuElement);
              renderer.removeStyle(dropdownMenuElement, 'position');
              renderer.removeStyle(dropdownMenuElement, 'transform');
            }

            if (this._bodyContainer) {
              renderer.removeChild(this._document.body, this._bodyContainer);
              this._bodyContainer = null;
            }
          }
        }, {
          key: "_applyContainer",
          value: function _applyContainer() {
            var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

            this._resetContainer();

            if (container === 'body') {
              var renderer = this._renderer;
              var dropdownMenuElement = this._menu.nativeElement;
              var bodyContainer = this._bodyContainer = this._bodyContainer || renderer.createElement('div'); // Override some styles to have the positionning working

              renderer.setStyle(bodyContainer, 'position', 'absolute');
              renderer.setStyle(dropdownMenuElement, 'position', 'static');
              renderer.setStyle(bodyContainer, 'z-index', '1050');
              renderer.appendChild(bodyContainer, dropdownMenuElement);
              renderer.appendChild(this._document.body, bodyContainer);
            }
          }
        }, {
          key: "_applyPlacementClasses",
          value: function _applyPlacementClasses(placement) {
            var menu = this._menu;

            if (menu) {
              if (!placement) {
                placement = this._getFirstPlacement(this.placement);
              }

              var renderer = this._renderer;
              var dropdownElement = this._elementRef.nativeElement; // remove the current placement classes

              renderer.removeClass(dropdownElement, 'dropup');
              renderer.removeClass(dropdownElement, 'dropdown');
              menu.placement = this.display === 'static' ? null : placement;
              /*
              * apply the new placement
              * in case of top use up-arrow or down-arrow otherwise
              */

              var dropdownClass = placement.search('^top') !== -1 ? 'dropup' : 'dropdown';
              renderer.addClass(dropdownElement, dropdownClass);
              var bodyContainer = this._bodyContainer;

              if (bodyContainer) {
                renderer.removeClass(bodyContainer, 'dropup');
                renderer.removeClass(bodyContainer, 'dropdown');
                renderer.addClass(bodyContainer, dropdownClass);
              }
            }
          }
        }]);

        return NgbDropdown;
      }();

      NgbDropdown.ɵfac = function NgbDropdown_Factory(t) {
        return new (t || NgbDropdown)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbDropdownConfig), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbNavbar, 8));
      };

      NgbDropdown.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbDropdown,
        selectors: [["", "ngbDropdown", ""]],
        contentQueries: function NgbDropdown_ContentQueries(rf, ctx, dirIndex) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, NgbDropdownMenu, true);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, NgbDropdownAnchor, true);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx._menu = _t.first);
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx._anchor = _t.first);
          }
        },
        hostVars: 2,
        hostBindings: function NgbDropdown_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("show", ctx.isOpen());
          }
        },
        inputs: {
          _open: ["open", "_open"],
          placement: "placement",
          container: "container",
          autoClose: "autoClose",
          display: "display"
        },
        outputs: {
          openChange: "openChange"
        },
        exportAs: ["ngbDropdown"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵNgOnChangesFeature"]]
      });

      NgbDropdown.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
        }, {
          type: NgbDropdownConfig
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]
        }, {
          type: NgbNavbar,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
          }]
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"])(NgbDropdownMenu, {
        "static": false
      })], NgbDropdown.prototype, "_menu", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"])(NgbDropdownAnchor, {
        "static": false
      })], NgbDropdown.prototype, "_anchor", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDropdown.prototype, "autoClose", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])('open')], NgbDropdown.prototype, "_open", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDropdown.prototype, "placement", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDropdown.prototype, "container", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbDropdown.prototype, "display", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbDropdown.prototype, "openChange", void 0);
      NgbDropdown = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(2, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"])), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(6, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"])())], NgbDropdown);
      var NGB_DROPDOWN_DIRECTIVES = [NgbDropdown, NgbDropdownAnchor, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownItem, NgbNavbar];

      var NgbDropdownModule = function NgbDropdownModule() {
        _classCallCheck(this, NgbDropdownModule);
      };

      NgbDropdownModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: NgbDropdownModule
      });
      NgbDropdownModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function NgbDropdownModule_Factory(t) {
          return new (t || NgbDropdownModule)();
        }
      });
      /**
       * A configuration service for the [`NgbModal`](#/components/modal/api#NgbModal) service.
       *
       * You can inject this service, typically in your root component, and customize the values of its properties in
       * order to provide default values for all modals used in the application.
      *
      * @since 3.1.0
      */

      var NgbModalConfig = function NgbModalConfig() {
        _classCallCheck(this, NgbModalConfig);

        this.backdrop = true;
        this.keyboard = true;
      };

      NgbModalConfig.ɵfac = function NgbModalConfig_Factory(t) {
        return new (t || NgbModalConfig)();
      };

      NgbModalConfig.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function NgbModalConfig_Factory() {
          return new NgbModalConfig();
        },
        token: NgbModalConfig,
        providedIn: "root"
      });

      var ContentRef = function ContentRef(nodes, viewRef, componentRef) {
        _classCallCheck(this, ContentRef);

        this.nodes = nodes;
        this.viewRef = viewRef;
        this.componentRef = componentRef;
      };

      var PopupService = /*#__PURE__*/function () {
        function PopupService(_type, _injector, _viewContainerRef, _renderer, _componentFactoryResolver, _applicationRef) {
          _classCallCheck(this, PopupService);

          this._type = _type;
          this._injector = _injector;
          this._viewContainerRef = _viewContainerRef;
          this._renderer = _renderer;
          this._componentFactoryResolver = _componentFactoryResolver;
          this._applicationRef = _applicationRef;
          this._windowRef = null;
          this._contentRef = null;
        }

        _createClass(PopupService, [{
          key: "open",
          value: function open(content, context) {
            if (!this._windowRef) {
              this._contentRef = this._getContentRef(content, context);
              this._windowRef = this._viewContainerRef.createComponent(this._componentFactoryResolver.resolveComponentFactory(this._type), this._viewContainerRef.length, this._injector, this._contentRef.nodes);
            }

            return this._windowRef;
          }
        }, {
          key: "close",
          value: function close() {
            var _a;

            if (this._windowRef) {
              this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._windowRef.hostView));

              this._windowRef = null;

              if ((_a = this._contentRef) === null || _a === void 0 ? void 0 : _a.viewRef) {
                this._applicationRef.detachView(this._contentRef.viewRef);

                this._contentRef.viewRef.destroy();

                this._contentRef = null;
              }
            }
          }
        }, {
          key: "_getContentRef",
          value: function _getContentRef(content, context) {
            if (!content) {
              return new ContentRef([]);
            } else if (content instanceof _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]) {
              var viewRef = content.createEmbeddedView(context);

              this._applicationRef.attachView(viewRef);

              return new ContentRef([viewRef.rootNodes], viewRef);
            } else {
              return new ContentRef([[this._renderer.createText("".concat(content))]]);
            }
          }
        }]);

        return PopupService;
      }();

      var noop = function noop() {};

      var ɵ0$1 = noop;
      /**
       * Utility to handle the scrollbar.
       *
       * It allows to compensate the lack of a vertical scrollbar by adding an
       * equivalent padding on the right of the body, and to remove this compensation.
       */

      var ScrollBar = /*#__PURE__*/function () {
        function ScrollBar(_document) {
          _classCallCheck(this, ScrollBar);

          this._document = _document;
        }
        /**
         * To be called right before a potential vertical scrollbar would be removed:
         *
         * - if there was a scrollbar, adds some compensation padding to the body
         * to keep the same layout as when the scrollbar is there
         * - if there was none, there is nothing to do
         *
         * @return a callback used to revert the compensation (noop if there was none,
         * otherwise a function removing the padding)
         */


        _createClass(ScrollBar, [{
          key: "compensate",
          value: function compensate() {
            var width = this._getWidth();

            return !this._isPresent(width) ? noop : this._adjustBody(width);
          }
          /**
           * Adds a padding of the given width on the right of the body.
           *
           * @return a callback used to revert the padding to its previous value
           */

        }, {
          key: "_adjustBody",
          value: function _adjustBody(scrollbarWidth) {
            var body = this._document.body;
            var userSetPaddingStyle = body.style.paddingRight;
            var actualPadding = parseFloat(window.getComputedStyle(body)['padding-right']);
            body.style['padding-right'] = "".concat(actualPadding + scrollbarWidth, "px");
            return function () {
              return body.style['padding-right'] = userSetPaddingStyle;
            };
          }
          /**
           * Tells whether a scrollbar is currently present on the body.
           *
           * @return true if scrollbar is present, false otherwise
           */

        }, {
          key: "_isPresent",
          value: function _isPresent(scrollbarWidth) {
            var rect = this._document.body.getBoundingClientRect();

            var bodyToViewportGap = window.innerWidth - (rect.left + rect.right);
            var uncertainty = 0.1 * scrollbarWidth;
            return bodyToViewportGap >= scrollbarWidth - uncertainty;
          }
          /**
           * Calculates and returns the width of a scrollbar.
           *
           * @return the width of a scrollbar on this page
           */

        }, {
          key: "_getWidth",
          value: function _getWidth() {
            var measurer = this._document.createElement('div');

            measurer.className = 'modal-scrollbar-measure';
            var body = this._document.body;
            body.appendChild(measurer);
            var width = measurer.getBoundingClientRect().width - measurer.clientWidth;
            body.removeChild(measurer);
            return width;
          }
        }]);

        return ScrollBar;
      }();

      ScrollBar.ɵfac = function ScrollBar_Factory(t) {
        return new (t || ScrollBar)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]));
      };

      ScrollBar.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
          }]
        }];
      };

      ScrollBar.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function ScrollBar_Factory() {
          return new ScrollBar(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]));
        },
        token: ScrollBar,
        providedIn: "root"
      });
      ScrollBar = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(0, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]))], ScrollBar);

      var NgbModalBackdrop = function NgbModalBackdrop() {
        _classCallCheck(this, NgbModalBackdrop);
      };

      NgbModalBackdrop.ɵfac = function NgbModalBackdrop_Factory(t) {
        return new (t || NgbModalBackdrop)();
      };

      NgbModalBackdrop.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: NgbModalBackdrop,
        selectors: [["ngb-modal-backdrop"]],
        hostAttrs: [2, "z-index", "1050"],
        hostVars: 2,
        hostBindings: function NgbModalBackdrop_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassMap"]("modal-backdrop fade show" + (ctx.backdropClass ? " " + ctx.backdropClass : ""));
          }
        },
        inputs: {
          backdropClass: "backdropClass"
        },
        decls: 0,
        vars: 0,
        template: function NgbModalBackdrop_Template(rf, ctx) {},
        encapsulation: 2
      });
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbModalBackdrop.prototype, "backdropClass", void 0);
      /**
       * A reference to the currently opened (active) modal.
       *
       * Instances of this class can be injected into your component passed as modal content.
       * So you can `.close()` or `.dismiss()` the modal window from your component.
       */

      var NgbActiveModal = /*#__PURE__*/function () {
        function NgbActiveModal() {
          _classCallCheck(this, NgbActiveModal);
        }

        _createClass(NgbActiveModal, [{
          key: "close",

          /**
           * Closes the modal with an optional `result` value.
           *
           * The `NgbMobalRef.result` promise will be resolved with the provided value.
           */
          value: function close(result) {}
          /**
           * Dismisses the modal with an optional `reason` value.
           *
           * The `NgbModalRef.result` promise will be rejected with the provided value.
           */

        }, {
          key: "dismiss",
          value: function dismiss(reason) {}
        }]);

        return NgbActiveModal;
      }();
      /**
       * A reference to the newly opened modal returned by the `NgbModal.open()` method.
       */


      var NgbModalRef = /*#__PURE__*/function () {
        function NgbModalRef(_windowCmptRef, _contentRef, _backdropCmptRef, _beforeDismiss) {
          var _this23 = this;

          _classCallCheck(this, NgbModalRef);

          this._windowCmptRef = _windowCmptRef;
          this._contentRef = _contentRef;
          this._backdropCmptRef = _backdropCmptRef;
          this._beforeDismiss = _beforeDismiss;

          _windowCmptRef.instance.dismissEvent.subscribe(function (reason) {
            _this23.dismiss(reason);
          });

          this.result = new Promise(function (resolve, reject) {
            _this23._resolve = resolve;
            _this23._reject = reject;
          });
          this.result.then(null, function () {});
        }
        /**
         * The instance of a component used for the modal content.
         *
         * When a `TemplateRef` is used as the content or when the modal is closed, will return `undefined`.
         */


        _createClass(NgbModalRef, [{
          key: "close",

          /**
           * Closes the modal with an optional `result` value.
           *
           * The `NgbMobalRef.result` promise will be resolved with the provided value.
           */
          value: function close(result) {
            if (this._windowCmptRef) {
              this._resolve(result);

              this._removeModalElements();
            }
          }
        }, {
          key: "_dismiss",
          value: function _dismiss(reason) {
            this._reject(reason);

            this._removeModalElements();
          }
          /**
           * Dismisses the modal with an optional `reason` value.
           *
           * The `NgbModalRef.result` promise will be rejected with the provided value.
           */

        }, {
          key: "dismiss",
          value: function dismiss(reason) {
            var _this24 = this;

            if (this._windowCmptRef) {
              if (!this._beforeDismiss) {
                this._dismiss(reason);
              } else {
                var dismiss = this._beforeDismiss();

                if (dismiss && dismiss.then) {
                  dismiss.then(function (result) {
                    if (result !== false) {
                      _this24._dismiss(reason);
                    }
                  }, function () {});
                } else if (dismiss !== false) {
                  this._dismiss(reason);
                }
              }
            }
          }
        }, {
          key: "_removeModalElements",
          value: function _removeModalElements() {
            var windowNativeEl = this._windowCmptRef.location.nativeElement;
            windowNativeEl.parentNode.removeChild(windowNativeEl);

            this._windowCmptRef.destroy();

            if (this._backdropCmptRef) {
              var backdropNativeEl = this._backdropCmptRef.location.nativeElement;
              backdropNativeEl.parentNode.removeChild(backdropNativeEl);

              this._backdropCmptRef.destroy();
            }

            if (this._contentRef && this._contentRef.viewRef) {
              this._contentRef.viewRef.destroy();
            }

            this._windowCmptRef = null;
            this._backdropCmptRef = null;
            this._contentRef = null;
          }
        }, {
          key: "componentInstance",
          get: function get() {
            if (this._contentRef && this._contentRef.componentRef) {
              return this._contentRef.componentRef.instance;
            }
          }
        }]);

        return NgbModalRef;
      }();

      var ModalDismissReasons;

      (function (ModalDismissReasons) {
        ModalDismissReasons[ModalDismissReasons["BACKDROP_CLICK"] = 0] = "BACKDROP_CLICK";
        ModalDismissReasons[ModalDismissReasons["ESC"] = 1] = "ESC";
      })(ModalDismissReasons || (ModalDismissReasons = {}));

      var NgbModalWindow = /*#__PURE__*/function () {
        function NgbModalWindow(_document, _elRef, _zone) {
          _classCallCheck(this, NgbModalWindow);

          this._document = _document;
          this._elRef = _elRef;
          this._zone = _zone;
          this._closed$ = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
          this._elWithFocus = null; // element that is focused prior to modal opening

          this.backdrop = true;
          this.keyboard = true;
          this.dismissEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        }

        _createClass(NgbModalWindow, [{
          key: "dismiss",
          value: function dismiss(reason) {
            this.dismissEvent.emit(reason);
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            this._elWithFocus = this._document.activeElement;
          }
        }, {
          key: "ngAfterViewInit",
          value: function ngAfterViewInit() {
            var _this25 = this;

            var nativeElement = this._elRef.nativeElement;

            this._zone.runOutsideAngular(function () {
              Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["fromEvent"])(nativeElement, 'keydown').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["takeUntil"])(_this25._closed$), // tslint:disable-next-line:deprecation
              Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["filter"])(function (e) {
                return e.which === Key.Escape && _this25.keyboard;
              })).subscribe(function (event) {
                return requestAnimationFrame(function () {
                  if (!event.defaultPrevented) {
                    _this25._zone.run(function () {
                      return _this25.dismiss(ModalDismissReasons.ESC);
                    });
                  }
                });
              }); // We're listening to 'mousedown' and 'mouseup' to prevent modal from closing when pressing the mouse
              // inside the modal dialog and releasing it outside

              var preventClose = false;
              Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["fromEvent"])(_this25._dialogEl.nativeElement, 'mousedown').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["takeUntil"])(_this25._closed$), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["tap"])(function () {
                return preventClose = false;
              }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["switchMap"])(function () {
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["fromEvent"])(nativeElement, 'mouseup').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["takeUntil"])(_this25._closed$), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["take"])(1));
              }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["filter"])(function (_ref12) {
                var target = _ref12.target;
                return nativeElement === target;
              })).subscribe(function () {
                preventClose = true;
              }); // We're listening to 'click' to dismiss modal on modal window click, except when:
              // 1. clicking on modal dialog itself
              // 2. closing was prevented by mousedown/up handlers
              // 3. clicking on scrollbar when the viewport is too small and modal doesn't fit (click is not triggered at all)

              Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["fromEvent"])(nativeElement, 'click').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["takeUntil"])(_this25._closed$)).subscribe(function (_ref13) {
                var target = _ref13.target;

                if (_this25.backdrop === true && nativeElement === target && !preventClose) {
                  _this25._zone.run(function () {
                    return _this25.dismiss(ModalDismissReasons.BACKDROP_CLICK);
                  });
                }

                preventClose = false;
              });
            });

            if (!nativeElement.contains(document.activeElement)) {
              var autoFocusable = nativeElement.querySelector("[ngbAutofocus]");
              var firstFocusable = getFocusableBoundaryElements(nativeElement)[0];
              var elementToFocus = autoFocusable || firstFocusable || nativeElement;
              elementToFocus.focus();
            }
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            var _this26 = this;

            var body = this._document.body;
            var elWithFocus = this._elWithFocus;
            var elementToFocus;

            if (elWithFocus && elWithFocus['focus'] && body.contains(elWithFocus)) {
              elementToFocus = elWithFocus;
            } else {
              elementToFocus = body;
            }

            this._zone.runOutsideAngular(function () {
              setTimeout(function () {
                return elementToFocus.focus();
              });
              _this26._elWithFocus = null;
            });

            this._closed$.next();
          }
        }]);

        return NgbModalWindow;
      }();

      NgbModalWindow.ɵfac = function NgbModalWindow_Factory(t) {
        return new (t || NgbModalWindow)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]));
      };

      NgbModalWindow.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: NgbModalWindow,
        selectors: [["ngb-modal-window"]],
        viewQuery: function NgbModalWindow_Query(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵstaticViewQuery"](_c34, true);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx._dialogEl = _t.first);
          }
        },
        hostAttrs: ["role", "dialog", "tabindex", "-1"],
        hostVars: 5,
        hostBindings: function NgbModalWindow_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("aria-modal", true)("aria-labelledby", ctx.ariaLabelledBy)("aria-describedby", ctx.ariaDescribedBy);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassMap"]("modal fade show d-block" + (ctx.windowClass ? " " + ctx.windowClass : ""));
          }
        },
        inputs: {
          backdrop: "backdrop",
          keyboard: "keyboard",
          ariaLabelledBy: "ariaLabelledBy",
          ariaDescribedBy: "ariaDescribedBy",
          centered: "centered",
          scrollable: "scrollable",
          size: "size",
          windowClass: "windowClass"
        },
        outputs: {
          dismissEvent: "dismiss"
        },
        ngContentSelectors: _c4,
        decls: 4,
        vars: 2,
        consts: [["role", "document"], ["dialog", ""], [1, "modal-content"]],
        template: function NgbModalWindow_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵprojectionDef"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 0, 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵprojection"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassMap"]("modal-dialog" + (ctx.size ? " modal-" + ctx.size : "") + (ctx.centered ? " modal-dialog-centered" : "") + (ctx.scrollable ? " modal-dialog-scrollable" : ""));
          }
        },
        styles: ["ngb-modal-window .component-host-scrollable{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;overflow:hidden}"],
        encapsulation: 2
      });

      NgbModalWindow.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('dialog', {
        "static": true
      })], NgbModalWindow.prototype, "_dialogEl", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbModalWindow.prototype, "ariaLabelledBy", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbModalWindow.prototype, "ariaDescribedBy", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbModalWindow.prototype, "backdrop", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbModalWindow.prototype, "centered", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbModalWindow.prototype, "keyboard", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbModalWindow.prototype, "scrollable", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbModalWindow.prototype, "size", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbModalWindow.prototype, "windowClass", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])('dismiss')], NgbModalWindow.prototype, "dismissEvent", void 0);
      NgbModalWindow = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(0, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]))], NgbModalWindow);

      var NgbModalStack = /*#__PURE__*/function () {
        function NgbModalStack(_applicationRef, _injector, _document, _scrollBar, _rendererFactory, _ngZone) {
          var _this27 = this;

          _classCallCheck(this, NgbModalStack);

          this._applicationRef = _applicationRef;
          this._injector = _injector;
          this._document = _document;
          this._scrollBar = _scrollBar;
          this._rendererFactory = _rendererFactory;
          this._ngZone = _ngZone;
          this._activeWindowCmptHasChanged = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
          this._ariaHiddenValues = new Map();
          this._backdropAttributes = ['backdropClass'];
          this._modalRefs = [];
          this._windowAttributes = ['ariaLabelledBy', 'ariaDescribedBy', 'backdrop', 'centered', 'keyboard', 'scrollable', 'size', 'windowClass'];
          this._windowCmpts = [];
          this._activeInstances = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"](); // Trap focus on active WindowCmpt

          this._activeWindowCmptHasChanged.subscribe(function () {
            if (_this27._windowCmpts.length) {
              var activeWindowCmpt = _this27._windowCmpts[_this27._windowCmpts.length - 1];
              ngbFocusTrap(_this27._ngZone, activeWindowCmpt.location.nativeElement, _this27._activeWindowCmptHasChanged);

              _this27._revertAriaHidden();

              _this27._setAriaHidden(activeWindowCmpt.location.nativeElement);
            }
          });
        }

        _createClass(NgbModalStack, [{
          key: "open",
          value: function open(moduleCFR, contentInjector, content, options) {
            var _this28 = this;

            var containerEl = options.container instanceof HTMLElement ? options.container : isDefined(options.container) ? this._document.querySelector(options.container) : this._document.body;

            var renderer = this._rendererFactory.createRenderer(null, null);

            var revertPaddingForScrollBar = this._scrollBar.compensate();

            var removeBodyClass = function removeBodyClass() {
              if (!_this28._modalRefs.length) {
                renderer.removeClass(_this28._document.body, 'modal-open');

                _this28._revertAriaHidden();
              }
            };

            if (!containerEl) {
              throw new Error("The specified modal container \"".concat(options.container || 'body', "\" was not found in the DOM."));
            }

            var activeModal = new NgbActiveModal();

            var contentRef = this._getContentRef(moduleCFR, options.injector || contentInjector, content, activeModal, options);

            var backdropCmptRef = options.backdrop !== false ? this._attachBackdrop(moduleCFR, containerEl) : undefined;

            var windowCmptRef = this._attachWindowComponent(moduleCFR, containerEl, contentRef);

            var ngbModalRef = new NgbModalRef(windowCmptRef, contentRef, backdropCmptRef, options.beforeDismiss);

            this._registerModalRef(ngbModalRef);

            this._registerWindowCmpt(windowCmptRef);

            ngbModalRef.result.then(revertPaddingForScrollBar, revertPaddingForScrollBar);
            ngbModalRef.result.then(removeBodyClass, removeBodyClass);

            activeModal.close = function (result) {
              ngbModalRef.close(result);
            };

            activeModal.dismiss = function (reason) {
              ngbModalRef.dismiss(reason);
            };

            this._applyWindowOptions(windowCmptRef.instance, options);

            if (this._modalRefs.length === 1) {
              renderer.addClass(this._document.body, 'modal-open');
            }

            if (backdropCmptRef && backdropCmptRef.instance) {
              this._applyBackdropOptions(backdropCmptRef.instance, options);
            }

            return ngbModalRef;
          }
        }, {
          key: "dismissAll",
          value: function dismissAll(reason) {
            this._modalRefs.forEach(function (ngbModalRef) {
              return ngbModalRef.dismiss(reason);
            });
          }
        }, {
          key: "hasOpenModals",
          value: function hasOpenModals() {
            return this._modalRefs.length > 0;
          }
        }, {
          key: "_attachBackdrop",
          value: function _attachBackdrop(moduleCFR, containerEl) {
            var backdropFactory = moduleCFR.resolveComponentFactory(NgbModalBackdrop);
            var backdropCmptRef = backdropFactory.create(this._injector);

            this._applicationRef.attachView(backdropCmptRef.hostView);

            containerEl.appendChild(backdropCmptRef.location.nativeElement);
            return backdropCmptRef;
          }
        }, {
          key: "_attachWindowComponent",
          value: function _attachWindowComponent(moduleCFR, containerEl, contentRef) {
            var windowFactory = moduleCFR.resolveComponentFactory(NgbModalWindow);
            var windowCmptRef = windowFactory.create(this._injector, contentRef.nodes);

            this._applicationRef.attachView(windowCmptRef.hostView);

            containerEl.appendChild(windowCmptRef.location.nativeElement);
            return windowCmptRef;
          }
        }, {
          key: "_applyWindowOptions",
          value: function _applyWindowOptions(windowInstance, options) {
            this._windowAttributes.forEach(function (optionName) {
              if (isDefined(options[optionName])) {
                windowInstance[optionName] = options[optionName];
              }
            });
          }
        }, {
          key: "_applyBackdropOptions",
          value: function _applyBackdropOptions(backdropInstance, options) {
            this._backdropAttributes.forEach(function (optionName) {
              if (isDefined(options[optionName])) {
                backdropInstance[optionName] = options[optionName];
              }
            });
          }
        }, {
          key: "_getContentRef",
          value: function _getContentRef(moduleCFR, contentInjector, content, activeModal, options) {
            if (!content) {
              return new ContentRef([]);
            } else if (content instanceof _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]) {
              return this._createFromTemplateRef(content, activeModal);
            } else if (isString(content)) {
              return this._createFromString(content);
            } else {
              return this._createFromComponent(moduleCFR, contentInjector, content, activeModal, options);
            }
          }
        }, {
          key: "_createFromTemplateRef",
          value: function _createFromTemplateRef(content, activeModal) {
            var context = {
              $implicit: activeModal,
              close: function close(result) {
                activeModal.close(result);
              },
              dismiss: function dismiss(reason) {
                activeModal.dismiss(reason);
              }
            };
            var viewRef = content.createEmbeddedView(context);

            this._applicationRef.attachView(viewRef);

            return new ContentRef([viewRef.rootNodes], viewRef);
          }
        }, {
          key: "_createFromString",
          value: function _createFromString(content) {
            var component = this._document.createTextNode("".concat(content));

            return new ContentRef([[component]]);
          }
        }, {
          key: "_createFromComponent",
          value: function _createFromComponent(moduleCFR, contentInjector, content, context, options) {
            var contentCmptFactory = moduleCFR.resolveComponentFactory(content);

            var modalContentInjector = _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"].create({
              providers: [{
                provide: NgbActiveModal,
                useValue: context
              }],
              parent: contentInjector
            });

            var componentRef = contentCmptFactory.create(modalContentInjector);
            var componentNativeEl = componentRef.location.nativeElement;

            if (options.scrollable) {
              componentNativeEl.classList.add('component-host-scrollable');
            }

            this._applicationRef.attachView(componentRef.hostView); // FIXME: we should here get rid of the component nativeElement
            // and use `[Array.from(componentNativeEl.childNodes)]` instead and remove the above CSS class.


            return new ContentRef([[componentNativeEl]], componentRef.hostView, componentRef);
          }
        }, {
          key: "_setAriaHidden",
          value: function _setAriaHidden(element) {
            var _this29 = this;

            var parent = element.parentElement;

            if (parent && element !== this._document.body) {
              Array.from(parent.children).forEach(function (sibling) {
                if (sibling !== element && sibling.nodeName !== 'SCRIPT') {
                  _this29._ariaHiddenValues.set(sibling, sibling.getAttribute('aria-hidden'));

                  sibling.setAttribute('aria-hidden', 'true');
                }
              });

              this._setAriaHidden(parent);
            }
          }
        }, {
          key: "_revertAriaHidden",
          value: function _revertAriaHidden() {
            this._ariaHiddenValues.forEach(function (value, element) {
              if (value) {
                element.setAttribute('aria-hidden', value);
              } else {
                element.removeAttribute('aria-hidden');
              }
            });

            this._ariaHiddenValues.clear();
          }
        }, {
          key: "_registerModalRef",
          value: function _registerModalRef(ngbModalRef) {
            var _this30 = this;

            var unregisterModalRef = function unregisterModalRef() {
              var index = _this30._modalRefs.indexOf(ngbModalRef);

              if (index > -1) {
                _this30._modalRefs.splice(index, 1);

                _this30._activeInstances.emit(_this30._modalRefs);
              }
            };

            this._modalRefs.push(ngbModalRef);

            this._activeInstances.emit(this._modalRefs);

            ngbModalRef.result.then(unregisterModalRef, unregisterModalRef);
          }
        }, {
          key: "_registerWindowCmpt",
          value: function _registerWindowCmpt(ngbWindowCmpt) {
            var _this31 = this;

            this._windowCmpts.push(ngbWindowCmpt);

            this._activeWindowCmptHasChanged.next();

            ngbWindowCmpt.onDestroy(function () {
              var index = _this31._windowCmpts.indexOf(ngbWindowCmpt);

              if (index > -1) {
                _this31._windowCmpts.splice(index, 1);

                _this31._activeWindowCmptHasChanged.next();
              }
            });
          }
        }, {
          key: "activeInstances",
          get: function get() {
            return this._activeInstances;
          }
        }]);

        return NgbModalStack;
      }();

      NgbModalStack.ɵfac = function NgbModalStack_Factory(t) {
        return new (t || NgbModalStack)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](ScrollBar), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["RendererFactory2"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]));
      };

      NgbModalStack.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
          }]
        }, {
          type: ScrollBar
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["RendererFactory2"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
        }];
      };

      NgbModalStack.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function NgbModalStack_Factory() {
          return new NgbModalStack(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["INJECTOR"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(ScrollBar), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["RendererFactory2"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]));
        },
        token: NgbModalStack,
        providedIn: "root"
      });
      NgbModalStack = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(2, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]))], NgbModalStack);
      /**
       * A service for opening modal windows.
       *
       * Creating a modal is straightforward: create a component or a template and pass it as an argument to
       * the `.open()` method.
       */

      var NgbModal = /*#__PURE__*/function () {
        function NgbModal(_moduleCFR, _injector, _modalStack, _config) {
          _classCallCheck(this, NgbModal);

          this._moduleCFR = _moduleCFR;
          this._injector = _injector;
          this._modalStack = _modalStack;
          this._config = _config;
        }
        /**
         * Opens a new modal window with the specified content and supplied options.
         *
         * Content can be provided as a `TemplateRef` or a component type. If you pass a component type as content,
         * then instances of those components can be injected with an instance of the `NgbActiveModal` class. You can then
         * use `NgbActiveModal` methods to close / dismiss modals from "inside" of your component.
         *
         * Also see the [`NgbModalOptions`](#/components/modal/api#NgbModalOptions) for the list of supported options.
         */


        _createClass(NgbModal, [{
          key: "open",
          value: function open(content) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var combinedOptions = Object.assign({}, this._config, options);
            return this._modalStack.open(this._moduleCFR, this._injector, content, combinedOptions);
          }
          /**
           * Returns an observable that holds the active modal instances.
           */

        }, {
          key: "dismissAll",

          /**
           * Dismisses all currently displayed modal windows with the supplied reason.
           *
           * @since 3.1.0
           */
          value: function dismissAll(reason) {
            this._modalStack.dismissAll(reason);
          }
          /**
           * Indicates if there are currently any open modal windows in the application.
           *
           * @since 3.3.0
           */

        }, {
          key: "hasOpenModals",
          value: function hasOpenModals() {
            return this._modalStack.hasOpenModals();
          }
        }, {
          key: "activeInstances",
          get: function get() {
            return this._modalStack.activeInstances;
          }
        }]);

        return NgbModal;
      }();

      NgbModal.ɵfac = function NgbModal_Factory(t) {
        return new (t || NgbModal)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ComponentFactoryResolver"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](NgbModalStack), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](NgbModalConfig));
      };

      NgbModal.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ComponentFactoryResolver"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"]
        }, {
          type: NgbModalStack
        }, {
          type: NgbModalConfig
        }];
      };

      NgbModal.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function NgbModal_Factory() {
          return new NgbModal(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ComponentFactoryResolver"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["INJECTOR"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(NgbModalStack), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(NgbModalConfig));
        },
        token: NgbModal,
        providedIn: "root"
      });

      var NgbModalModule = function NgbModalModule() {
        _classCallCheck(this, NgbModalModule);
      };

      NgbModalModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: NgbModalModule
      });
      NgbModalModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function NgbModalModule_Factory(t) {
          return new (t || NgbModalModule)();
        },
        providers: [NgbModal]
      });
      /**
       * A configuration service for the [`NgbNav`](#/components/nav/api#NgbNav) component.
       *
       * You can inject this service, typically in your root component, and customize the values of its properties in
       * order to provide default values for all the navs used in the application.
       *
       * @since 5.2.0
       */

      var NgbNavConfig = function NgbNavConfig() {
        _classCallCheck(this, NgbNavConfig);

        this.destroyOnHide = true;
        this.orientation = 'horizontal';
        this.roles = 'tablist';
        this.keyboard = false;
      };

      NgbNavConfig.ɵfac = function NgbNavConfig_Factory(t) {
        return new (t || NgbNavConfig)();
      };

      NgbNavConfig.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function NgbNavConfig_Factory() {
          return new NgbNavConfig();
        },
        token: NgbNavConfig,
        providedIn: "root"
      });

      var isValidNavId = function isValidNavId(id) {
        return isDefined(id) && id !== '';
      };

      var ɵ0$2 = isValidNavId;
      var navCounter = 0;
      /**
       * This directive must be used to wrap content to be displayed in the nav.
       *
       * @since 5.2.0
       */

      var NgbNavContent = function NgbNavContent(templateRef) {
        _classCallCheck(this, NgbNavContent);

        this.templateRef = templateRef;
      };

      NgbNavContent.ɵfac = function NgbNavContent_Factory(t) {
        return new (t || NgbNavContent)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]));
      };

      NgbNavContent.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbNavContent,
        selectors: [["ng-template", "ngbNavContent", ""]]
      });

      NgbNavContent.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
        }];
      };
      /**
       * The directive used to group nav link and related nav content. As well as set nav identifier and some options.
       *
       * @since 5.2.0
       */


      var NgbNavItem = /*#__PURE__*/function () {
        function NgbNavItem(nav, elementRef) {
          _classCallCheck(this, NgbNavItem);

          this.elementRef = elementRef;
          /**
           * If `true`, the current nav item is disabled and can't be toggled by user.
           *
           * Nevertheless disabled nav can be selected programmatically via the `.select()` method and the `[activeId]` binding.
           */

          this.disabled = false; // TODO: cf https://github.com/angular/angular/issues/30106

          this._nav = nav;
        }

        _createClass(NgbNavItem, [{
          key: "ngAfterContentChecked",
          value: function ngAfterContentChecked() {
            // We are using @ContentChildren instead of @ContentChild as in the Angular version being used
            // only @ContentChildren allows us to specify the {descendants: false} option.
            // Without {descendants: false} we are hitting bugs described in:
            // https://github.com/ng-bootstrap/ng-bootstrap/issues/2240
            this.contentTpl = this.contentTpls.first;
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            if (!isDefined(this.domId)) {
              this.domId = "ngb-nav-".concat(navCounter++);
            }
          }
        }, {
          key: "isPanelInDom",
          value: function isPanelInDom() {
            return (isDefined(this.destroyOnHide) ? !this.destroyOnHide : !this._nav.destroyOnHide) || this.active;
          }
        }, {
          key: "active",
          get: function get() {
            return this._nav.activeId === this.id;
          }
        }, {
          key: "id",
          get: function get() {
            return isValidNavId(this._id) ? this._id : this.domId;
          }
        }, {
          key: "panelDomId",
          get: function get() {
            return "".concat(this.domId, "-panel");
          }
        }]);

        return NgbNavItem;
      }();

      NgbNavItem.ɵfac = function NgbNavItem_Factory(t) {
        return new (t || NgbNavItem)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
          return NgbNav;
        })), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]));
      };

      NgbNavItem.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbNavItem,
        selectors: [["", "ngbNavItem", ""]],
        contentQueries: function NgbNavItem_ContentQueries(rf, ctx, dirIndex) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, NgbNavContent, false);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.contentTpls = _t);
          }
        },
        hostVars: 2,
        hostBindings: function NgbNavItem_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("nav-item", true);
          }
        },
        inputs: {
          disabled: "disabled",
          domId: "domId",
          destroyOnHide: "destroyOnHide",
          _id: ["ngbNavItem", "_id"]
        },
        exportAs: ["ngbNavItem"]
      });

      NgbNavItem.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
              return NgbNav;
            })]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbNavItem.prototype, "destroyOnHide", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbNavItem.prototype, "disabled", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbNavItem.prototype, "domId", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])('ngbNavItem')], NgbNavItem.prototype, "_id", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"])(NgbNavContent, {
        descendants: false
      })], NgbNavItem.prototype, "contentTpls", void 0);
      NgbNavItem = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(0, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
        return NgbNav;
      })))], NgbNavItem);
      /**
       * A nav directive that helps with implementing tabbed navigation components.
       *
       * @since 5.2.0
       */

      var NgbNav = /*#__PURE__*/function () {
        function NgbNav(role, config, _cd, _document) {
          _classCallCheck(this, NgbNav);

          this.role = role;
          this._cd = _cd;
          this._document = _document;
          /**
           * The event emitted after the active nav changes
           * The payload of the event is the newly active nav id
           *
           * If you want to prevent nav change, you should use `(navChange)` event
           */

          this.activeIdChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          /**
           * The nav change event emitted right before the nav change happens on user click.
           *
           * This event won't be emitted if nav is changed programmatically via `[activeId]` or `.select()`.
           *
           * See [`NgbNavChangeEvent`](#/components/nav/api#NgbNavChangeEvent) for payload details.
           */

          this.navChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          this.destroyOnHide = config.destroyOnHide;
          this.orientation = config.orientation;
          this.roles = config.roles;
          this.keyboard = config.keyboard;
        }

        _createClass(NgbNav, [{
          key: "click",
          value: function click(item) {
            if (!item.disabled) {
              this._updateActiveId(item.id);
            }
          }
        }, {
          key: "onKeyDown",
          value: function onKeyDown(event) {
            var _this32 = this;

            if (this.roles !== 'tablist' || !this.keyboard) {
              return;
            } // tslint:disable-next-line: deprecation


            var key = event.which;
            var enabledLinks = this.links.filter(function (link) {
              return !link.navItem.disabled;
            });
            var length = enabledLinks.length;
            var position = -1;
            enabledLinks.forEach(function (link, index) {
              if (link.elRef.nativeElement === _this32._document.activeElement) {
                position = index;
              }
            });

            if (length) {
              switch (key) {
                case Key.ArrowLeft:
                  if (this.orientation === 'vertical') {
                    return;
                  }

                  position = (position - 1 + length) % length;
                  break;

                case Key.ArrowRight:
                  if (this.orientation === 'vertical') {
                    return;
                  }

                  position = (position + 1) % length;
                  break;

                case Key.ArrowDown:
                  if (this.orientation === 'horizontal') {
                    return;
                  }

                  position = (position + 1) % length;
                  break;

                case Key.ArrowUp:
                  if (this.orientation === 'horizontal') {
                    return;
                  }

                  position = (position - 1 + length) % length;
                  break;

                case Key.Home:
                  position = 0;
                  break;

                case Key.End:
                  position = length - 1;
                  break;
              }

              if (this.keyboard === 'changeWithArrows') {
                this.select(enabledLinks[position].navItem.id);
              }

              enabledLinks[position].elRef.nativeElement.focus();
              event.preventDefault();
            }
          }
          /**
           * Selects the nav with the given id and shows its associated pane.
           * Any other nav that was previously selected becomes unselected and its associated pane is hidden.
           */

        }, {
          key: "select",
          value: function select(id) {
            this._updateActiveId(id, false);
          }
        }, {
          key: "ngAfterContentInit",
          value: function ngAfterContentInit() {
            if (!isDefined(this.activeId)) {
              var _nextId = this.items.first ? this.items.first.id : null;

              if (isValidNavId(_nextId)) {
                this._updateActiveId(_nextId, false);

                this._cd.detectChanges();
              }
            }
          }
        }, {
          key: "_updateActiveId",
          value: function _updateActiveId(nextId) {
            var emitNavChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (this.activeId !== nextId) {
              var defaultPrevented = false;

              if (emitNavChange) {
                this.navChange.emit({
                  activeId: this.activeId,
                  nextId: nextId,
                  preventDefault: function preventDefault() {
                    defaultPrevented = true;
                  }
                });
              }

              if (!defaultPrevented) {
                this.activeId = nextId;
                this.activeIdChange.emit(nextId);
              }
            }
          }
        }]);

        return NgbNav;
      }();

      NgbNav.ɵfac = function NgbNav_Factory(t) {
        return new (t || NgbNav)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinjectAttribute"]('role'), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbNavConfig), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]));
      };

      NgbNav.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbNav,
        selectors: [["", "ngbNav", ""]],
        contentQueries: function NgbNav_ContentQueries(rf, ctx, dirIndex) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, NgbNavItem, false);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, NgbNavLink, true);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.items = _t);
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.links = _t);
          }
        },
        hostVars: 6,
        hostBindings: function NgbNav_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("keydown.arrowLeft", function NgbNav_keydown_arrowLeft_HostBindingHandler($event) {
              return ctx.onKeyDown($event);
            })("keydown.arrowRight", function NgbNav_keydown_arrowRight_HostBindingHandler($event) {
              return ctx.onKeyDown($event);
            })("keydown.arrowDown", function NgbNav_keydown_arrowDown_HostBindingHandler($event) {
              return ctx.onKeyDown($event);
            })("keydown.arrowUp", function NgbNav_keydown_arrowUp_HostBindingHandler($event) {
              return ctx.onKeyDown($event);
            })("keydown.Home", function NgbNav_keydown_Home_HostBindingHandler($event) {
              return ctx.onKeyDown($event);
            })("keydown.End", function NgbNav_keydown_End_HostBindingHandler($event) {
              return ctx.onKeyDown($event);
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("aria-orientation", ctx.orientation === "vertical" && ctx.roles === "tablist" ? "vertical" : undefined)("role", ctx.role ? ctx.role : ctx.roles ? "tablist" : undefined);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("nav", true)("flex-column", ctx.orientation === "vertical");
          }
        },
        inputs: {
          destroyOnHide: "destroyOnHide",
          orientation: "orientation",
          roles: "roles",
          keyboard: "keyboard",
          activeId: "activeId"
        },
        outputs: {
          activeIdChange: "activeIdChange",
          navChange: "navChange"
        },
        exportAs: ["ngbNav"]
      });

      NgbNav.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Attribute"],
            args: ['role']
          }]
        }, {
          type: NgbNavConfig
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
          }]
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbNav.prototype, "activeId", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbNav.prototype, "activeIdChange", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbNav.prototype, "destroyOnHide", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbNav.prototype, "orientation", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbNav.prototype, "roles", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbNav.prototype, "keyboard", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"])(NgbNavItem)], NgbNav.prototype, "items", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"])(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
        return NgbNavLink;
      }), {
        descendants: true
      })], NgbNav.prototype, "links", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbNav.prototype, "navChange", void 0);
      NgbNav = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(0, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Attribute"])('role')), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(3, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]))], NgbNav);
      /**
       * A directive to put on the nav link.
       *
       * @since 5.2.0
       */

      var NgbNavLink = /*#__PURE__*/function () {
        function NgbNavLink(role, navItem, nav, elRef) {
          _classCallCheck(this, NgbNavLink);

          this.role = role;
          this.navItem = navItem;
          this.nav = nav;
          this.elRef = elRef;
        }

        _createClass(NgbNavLink, [{
          key: "hasNavItemClass",
          value: function hasNavItemClass() {
            // with alternative markup we have to add `.nav-item` class, because `ngbNavItem` is on the ng-container
            return this.navItem.elementRef.nativeElement.nodeType === Node.COMMENT_NODE;
          }
        }]);

        return NgbNavLink;
      }();

      NgbNavLink.ɵfac = function NgbNavLink_Factory(t) {
        return new (t || NgbNavLink)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinjectAttribute"]('role'), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbNavItem), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbNav), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]));
      };

      NgbNavLink.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbNavLink,
        selectors: [["a", "ngbNavLink", ""]],
        hostAttrs: ["href", ""],
        hostVars: 14,
        hostBindings: function NgbNavLink_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function NgbNavLink_click_HostBindingHandler($event) {
              ctx.nav.click(ctx.navItem);
              return $event.preventDefault();
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵhostProperty"]("id", ctx.navItem.domId);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("role", ctx.role ? ctx.role : ctx.nav.roles ? "tab" : undefined)("tabindex", ctx.navItem.disabled ? 0 - 1 : undefined)("aria-controls", ctx.navItem.isPanelInDom() ? ctx.navItem.panelDomId : null)("aria-selected", ctx.navItem.active)("aria-disabled", ctx.navItem.disabled);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("nav-link", true)("nav-item", ctx.hasNavItemClass())("active", ctx.navItem.active)("disabled", ctx.navItem.disabled);
          }
        }
      });

      NgbNavLink.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Attribute"],
            args: ['role']
          }]
        }, {
          type: NgbNavItem
        }, {
          type: NgbNav
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }];
      };

      NgbNavLink = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(0, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Attribute"])('role'))], NgbNavLink);
      /**
       * The outlet where currently active nav content will be displayed.
       *
       * @since 5.2.0
       */

      var NgbNavOutlet = function NgbNavOutlet() {
        _classCallCheck(this, NgbNavOutlet);
      };

      NgbNavOutlet.ɵfac = function NgbNavOutlet_Factory(t) {
        return new (t || NgbNavOutlet)();
      };

      NgbNavOutlet.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: NgbNavOutlet,
        selectors: [["", "ngbNavOutlet", ""]],
        hostVars: 2,
        hostBindings: function NgbNavOutlet_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("tab-content", true);
          }
        },
        inputs: {
          paneRole: "paneRole",
          nav: ["ngbNavOutlet", "nav"]
        },
        attrs: _c35,
        decls: 1,
        vars: 1,
        consts: [["ngFor", "", 3, "ngForOf"], ["class", "tab-pane", 3, "id", "active", 4, "ngIf"], [1, "tab-pane", 3, "id"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"]],
        template: function NgbNavOutlet_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](0, NgbNavOutlet_ng_template_0_Template, 1, 1, "ng-template", 0);
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx.nav.items);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["NgForOf"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgIf"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgTemplateOutlet"]],
        encapsulation: 2
      });
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbNavOutlet.prototype, "paneRole", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])('ngbNavOutlet')], NgbNavOutlet.prototype, "nav", void 0);
      var NGB_NAV_DIRECTIVES = [NgbNavContent, NgbNav, NgbNavItem, NgbNavLink, NgbNavOutlet];

      var NgbNavModule = function NgbNavModule() {
        _classCallCheck(this, NgbNavModule);
      };

      NgbNavModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: NgbNavModule
      });
      NgbNavModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function NgbNavModule_Factory(t) {
          return new (t || NgbNavModule)();
        },
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]]]
      });
      /**
       * A configuration service for the [`NgbPagination`](#/components/pagination/api#NgbPagination) component.
       *
       * You can inject this service, typically in your root component, and customize the values of its properties in
       * order to provide default values for all the paginations used in the application.
       */

      var NgbPaginationConfig = function NgbPaginationConfig() {
        _classCallCheck(this, NgbPaginationConfig);

        this.disabled = false;
        this.boundaryLinks = false;
        this.directionLinks = true;
        this.ellipses = true;
        this.maxSize = 0;
        this.pageSize = 10;
        this.rotate = false;
      };

      NgbPaginationConfig.ɵfac = function NgbPaginationConfig_Factory(t) {
        return new (t || NgbPaginationConfig)();
      };

      NgbPaginationConfig.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function NgbPaginationConfig_Factory() {
          return new NgbPaginationConfig();
        },
        token: NgbPaginationConfig,
        providedIn: "root"
      });
      /**
       * A directive to match the 'ellipsis' link template
       *
       * @since 4.1.0
       */

      var NgbPaginationEllipsis = function NgbPaginationEllipsis(templateRef) {
        _classCallCheck(this, NgbPaginationEllipsis);

        this.templateRef = templateRef;
      };

      NgbPaginationEllipsis.ɵfac = function NgbPaginationEllipsis_Factory(t) {
        return new (t || NgbPaginationEllipsis)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]));
      };

      NgbPaginationEllipsis.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbPaginationEllipsis,
        selectors: [["ng-template", "ngbPaginationEllipsis", ""]]
      });

      NgbPaginationEllipsis.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
        }];
      };
      /**
       * A directive to match the 'first' link template
       *
       * @since 4.1.0
       */


      var NgbPaginationFirst = function NgbPaginationFirst(templateRef) {
        _classCallCheck(this, NgbPaginationFirst);

        this.templateRef = templateRef;
      };

      NgbPaginationFirst.ɵfac = function NgbPaginationFirst_Factory(t) {
        return new (t || NgbPaginationFirst)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]));
      };

      NgbPaginationFirst.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbPaginationFirst,
        selectors: [["ng-template", "ngbPaginationFirst", ""]]
      });

      NgbPaginationFirst.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
        }];
      };
      /**
       * A directive to match the 'last' link template
       *
       * @since 4.1.0
       */


      var NgbPaginationLast = function NgbPaginationLast(templateRef) {
        _classCallCheck(this, NgbPaginationLast);

        this.templateRef = templateRef;
      };

      NgbPaginationLast.ɵfac = function NgbPaginationLast_Factory(t) {
        return new (t || NgbPaginationLast)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]));
      };

      NgbPaginationLast.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbPaginationLast,
        selectors: [["ng-template", "ngbPaginationLast", ""]]
      });

      NgbPaginationLast.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
        }];
      };
      /**
       * A directive to match the 'next' link template
       *
       * @since 4.1.0
       */


      var NgbPaginationNext = function NgbPaginationNext(templateRef) {
        _classCallCheck(this, NgbPaginationNext);

        this.templateRef = templateRef;
      };

      NgbPaginationNext.ɵfac = function NgbPaginationNext_Factory(t) {
        return new (t || NgbPaginationNext)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]));
      };

      NgbPaginationNext.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbPaginationNext,
        selectors: [["ng-template", "ngbPaginationNext", ""]]
      });

      NgbPaginationNext.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
        }];
      };
      /**
       * A directive to match the page 'number' link template
       *
       * @since 4.1.0
       */


      var NgbPaginationNumber = function NgbPaginationNumber(templateRef) {
        _classCallCheck(this, NgbPaginationNumber);

        this.templateRef = templateRef;
      };

      NgbPaginationNumber.ɵfac = function NgbPaginationNumber_Factory(t) {
        return new (t || NgbPaginationNumber)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]));
      };

      NgbPaginationNumber.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbPaginationNumber,
        selectors: [["ng-template", "ngbPaginationNumber", ""]]
      });

      NgbPaginationNumber.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
        }];
      };
      /**
       * A directive to match the 'previous' link template
       *
       * @since 4.1.0
       */


      var NgbPaginationPrevious = function NgbPaginationPrevious(templateRef) {
        _classCallCheck(this, NgbPaginationPrevious);

        this.templateRef = templateRef;
      };

      NgbPaginationPrevious.ɵfac = function NgbPaginationPrevious_Factory(t) {
        return new (t || NgbPaginationPrevious)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]));
      };

      NgbPaginationPrevious.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbPaginationPrevious,
        selectors: [["ng-template", "ngbPaginationPrevious", ""]]
      });

      NgbPaginationPrevious.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
        }];
      };
      /**
       * A component that displays page numbers and allows to customize them in several ways.
       */


      var NgbPagination = /*#__PURE__*/function () {
        function NgbPagination(config) {
          _classCallCheck(this, NgbPagination);

          this.pageCount = 0;
          this.pages = [];
          /**
           *  The current page.
           *
           *  Page numbers start with `1`.
           */

          this.page = 1;
          /**
           *  An event fired when the page is changed. Will fire only if collection size is set and all values are valid.
           *
           *  Event payload is the number of the newly selected page.
           *
           *  Page numbers start with `1`.
           */

          this.pageChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"](true);
          this.disabled = config.disabled;
          this.boundaryLinks = config.boundaryLinks;
          this.directionLinks = config.directionLinks;
          this.ellipses = config.ellipses;
          this.maxSize = config.maxSize;
          this.pageSize = config.pageSize;
          this.rotate = config.rotate;
          this.size = config.size;
        }

        _createClass(NgbPagination, [{
          key: "hasPrevious",
          value: function hasPrevious() {
            return this.page > 1;
          }
        }, {
          key: "hasNext",
          value: function hasNext() {
            return this.page < this.pageCount;
          }
        }, {
          key: "nextDisabled",
          value: function nextDisabled() {
            return !this.hasNext() || this.disabled;
          }
        }, {
          key: "previousDisabled",
          value: function previousDisabled() {
            return !this.hasPrevious() || this.disabled;
          }
        }, {
          key: "selectPage",
          value: function selectPage(pageNumber) {
            this._updatePages(pageNumber);
          }
        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            this._updatePages(this.page);
          }
        }, {
          key: "isEllipsis",
          value: function isEllipsis(pageNumber) {
            return pageNumber === -1;
          }
          /**
           * Appends ellipses and first/last page number to the displayed pages
           */

        }, {
          key: "_applyEllipses",
          value: function _applyEllipses(start, end) {
            if (this.ellipses) {
              if (start > 0) {
                // The first page will always be included. If the displayed range
                // starts after the third page, then add ellipsis. But if the range
                // starts on the third page, then add the second page instead of
                // an ellipsis, because the ellipsis would only hide a single page.
                if (start > 2) {
                  this.pages.unshift(-1);
                } else if (start === 2) {
                  this.pages.unshift(2);
                }

                this.pages.unshift(1);
              }

              if (end < this.pageCount) {
                // The last page will always be included. If the displayed range
                // ends before the third-last page, then add ellipsis. But if the range
                // ends on third-last page, then add the second-last page instead of
                // an ellipsis, because the ellipsis would only hide a single page.
                if (end < this.pageCount - 2) {
                  this.pages.push(-1);
                } else if (end === this.pageCount - 2) {
                  this.pages.push(this.pageCount - 1);
                }

                this.pages.push(this.pageCount);
              }
            }
          }
          /**
           * Rotates page numbers based on maxSize items visible.
           * Currently selected page stays in the middle:
           *
           * Ex. for selected page = 6:
           * [5,*6*,7] for maxSize = 3
           * [4,5,*6*,7] for maxSize = 4
           */

        }, {
          key: "_applyRotation",
          value: function _applyRotation() {
            var start = 0;
            var end = this.pageCount;
            var leftOffset = Math.floor(this.maxSize / 2);
            var rightOffset = this.maxSize % 2 === 0 ? leftOffset - 1 : leftOffset;

            if (this.page <= leftOffset) {
              // very beginning, no rotation -> [0..maxSize]
              end = this.maxSize;
            } else if (this.pageCount - this.page < leftOffset) {
              // very end, no rotation -> [len-maxSize..len]
              start = this.pageCount - this.maxSize;
            } else {
              // rotate
              start = this.page - leftOffset - 1;
              end = this.page + rightOffset;
            }

            return [start, end];
          }
          /**
           * Paginates page numbers based on maxSize items per page.
           */

        }, {
          key: "_applyPagination",
          value: function _applyPagination() {
            var page = Math.ceil(this.page / this.maxSize) - 1;
            var start = page * this.maxSize;
            var end = start + this.maxSize;
            return [start, end];
          }
        }, {
          key: "_setPageInRange",
          value: function _setPageInRange(newPageNo) {
            var prevPageNo = this.page;
            this.page = getValueInRange(newPageNo, this.pageCount, 1);

            if (this.page !== prevPageNo && isNumber(this.collectionSize)) {
              this.pageChange.emit(this.page);
            }
          }
        }, {
          key: "_updatePages",
          value: function _updatePages(newPage) {
            this.pageCount = Math.ceil(this.collectionSize / this.pageSize);

            if (!isNumber(this.pageCount)) {
              this.pageCount = 0;
            } // fill-in model needed to render pages


            this.pages.length = 0;

            for (var i = 1; i <= this.pageCount; i++) {
              this.pages.push(i);
            } // set page within 1..max range


            this._setPageInRange(newPage); // apply maxSize if necessary


            if (this.maxSize > 0 && this.pageCount > this.maxSize) {
              var start = 0;
              var end = this.pageCount; // either paginating or rotating page numbers

              if (this.rotate) {
                var _this$_applyRotation = this._applyRotation();

                var _this$_applyRotation2 = _slicedToArray(_this$_applyRotation, 2);

                start = _this$_applyRotation2[0];
                end = _this$_applyRotation2[1];
              } else {
                var _this$_applyPaginatio = this._applyPagination();

                var _this$_applyPaginatio2 = _slicedToArray(_this$_applyPaginatio, 2);

                start = _this$_applyPaginatio2[0];
                end = _this$_applyPaginatio2[1];
              }

              this.pages = this.pages.slice(start, end); // adding ellipses

              this._applyEllipses(start, end);
            }
          }
        }]);

        return NgbPagination;
      }();

      NgbPagination.ɵfac = function NgbPagination_Factory(t) {
        return new (t || NgbPagination)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbPaginationConfig));
      };

      NgbPagination.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: NgbPagination,
        selectors: [["ngb-pagination"]],
        contentQueries: function NgbPagination_ContentQueries(rf, ctx, dirIndex) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, NgbPaginationEllipsis, true);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, NgbPaginationFirst, true);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, NgbPaginationLast, true);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, NgbPaginationNext, true);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, NgbPaginationNumber, true);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, NgbPaginationPrevious, true);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.tplEllipsis = _t.first);
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.tplFirst = _t.first);
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.tplLast = _t.first);
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.tplNext = _t.first);
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.tplNumber = _t.first);
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.tplPrevious = _t.first);
          }
        },
        hostAttrs: ["role", "navigation"],
        inputs: {
          page: "page",
          disabled: "disabled",
          boundaryLinks: "boundaryLinks",
          directionLinks: "directionLinks",
          ellipses: "ellipses",
          maxSize: "maxSize",
          pageSize: "pageSize",
          rotate: "rotate",
          size: "size",
          collectionSize: "collectionSize"
        },
        outputs: {
          pageChange: "pageChange"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵNgOnChangesFeature"]],
        decls: 18,
        vars: 7,
        consts: [["first", ""], ["previous", ""], ["next", ""], ["last", ""], ["ellipsis", ""], ["defaultNumber", ""], ["class", "page-item", 3, "disabled", 4, "ngIf"], ["class", "page-item", 3, "active", "disabled", 4, "ngFor", "ngForOf"], ["aria-hidden", "true"], ["class", "sr-only", 4, "ngIf"], [1, "sr-only"], [1, "page-item"], ["href", "", 1, "page-link", 3, "click", 6, "aria-label"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["class", "page-link", "tabindex", "-1", "aria-disabled", "true", 4, "ngIf"], ["class", "page-link", "href", "", 3, "click", 4, "ngIf"], ["tabindex", "-1", "aria-disabled", "true", 1, "page-link"], ["href", "", 1, "page-link", 3, "click"]],
        template: function NgbPagination_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](0, NgbPagination_ng_template_0_Template, 2, 0, "ng-template", null, 0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplateRefExtractor"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](2, NgbPagination_ng_template_2_Template, 2, 0, "ng-template", null, 1, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplateRefExtractor"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](4, NgbPagination_ng_template_4_Template, 2, 0, "ng-template", null, 2, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplateRefExtractor"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](6, NgbPagination_ng_template_6_Template, 2, 0, "ng-template", null, 3, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplateRefExtractor"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](8, NgbPagination_ng_template_8_Template, 1, 0, "ng-template", null, 4, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplateRefExtractor"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](10, NgbPagination_ng_template_10_Template, 2, 2, "ng-template", null, 5, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplateRefExtractor"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](12, "ul");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](13, NgbPagination_li_13_Template, 4, 9, "li", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](14, NgbPagination_li_14_Template, 4, 8, "li", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](15, NgbPagination_li_15_Template, 3, 7, "li", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](16, NgbPagination_li_16_Template, 4, 9, "li", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](17, NgbPagination_li_17_Template, 4, 9, "li", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](12);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassMap"]("pagination" + (ctx.size ? " pagination-" + ctx.size : ""));

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.boundaryLinks);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.directionLinks);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx.pages);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.directionLinks);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.boundaryLinks);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["NgIf"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgForOf"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgTemplateOutlet"]],
        encapsulation: 2,
        changeDetection: 0
      });

      NgbPagination.ctorParameters = function () {
        return [{
          type: NgbPaginationConfig
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"])(NgbPaginationEllipsis, {
        "static": false
      })], NgbPagination.prototype, "tplEllipsis", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"])(NgbPaginationFirst, {
        "static": false
      })], NgbPagination.prototype, "tplFirst", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"])(NgbPaginationLast, {
        "static": false
      })], NgbPagination.prototype, "tplLast", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"])(NgbPaginationNext, {
        "static": false
      })], NgbPagination.prototype, "tplNext", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"])(NgbPaginationNumber, {
        "static": false
      })], NgbPagination.prototype, "tplNumber", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"])(NgbPaginationPrevious, {
        "static": false
      })], NgbPagination.prototype, "tplPrevious", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPagination.prototype, "disabled", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPagination.prototype, "boundaryLinks", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPagination.prototype, "directionLinks", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPagination.prototype, "ellipses", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPagination.prototype, "rotate", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPagination.prototype, "collectionSize", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPagination.prototype, "maxSize", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPagination.prototype, "page", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPagination.prototype, "pageSize", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbPagination.prototype, "pageChange", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPagination.prototype, "size", void 0);
      var DIRECTIVES = [NgbPagination, NgbPaginationEllipsis, NgbPaginationFirst, NgbPaginationLast, NgbPaginationNext, NgbPaginationNumber, NgbPaginationPrevious];

      var NgbPaginationModule = function NgbPaginationModule() {
        _classCallCheck(this, NgbPaginationModule);
      };

      NgbPaginationModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: NgbPaginationModule
      });
      NgbPaginationModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function NgbPaginationModule_Factory(t) {
          return new (t || NgbPaginationModule)();
        },
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]]]
      });

      var Trigger = /*#__PURE__*/function () {
        function Trigger(open, close) {
          _classCallCheck(this, Trigger);

          this.open = open;
          this.close = close;

          if (!close) {
            this.close = open;
          }
        }

        _createClass(Trigger, [{
          key: "isManual",
          value: function isManual() {
            return this.open === 'manual' || this.close === 'manual';
          }
        }]);

        return Trigger;
      }();

      var DEFAULT_ALIASES = {
        'hover': ['mouseenter', 'mouseleave'],
        'focus': ['focusin', 'focusout']
      };

      function parseTriggers(triggers) {
        var aliases = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ALIASES;
        var trimmedTriggers = (triggers || '').trim();

        if (trimmedTriggers.length === 0) {
          return [];
        }

        var parsedTriggers = trimmedTriggers.split(/\s+/).map(function (trigger) {
          return trigger.split(':');
        }).map(function (triggerPair) {
          var alias = aliases[triggerPair[0]] || triggerPair;
          return new Trigger(alias[0], alias[1]);
        });
        var manualTriggers = parsedTriggers.filter(function (triggerPair) {
          return triggerPair.isManual();
        });

        if (manualTriggers.length > 1) {
          throw 'Triggers parse error: only one manual trigger is allowed';
        }

        if (manualTriggers.length === 1 && parsedTriggers.length > 1) {
          throw 'Triggers parse error: manual trigger can\'t be mixed with other triggers';
        }

        return parsedTriggers;
      }

      function observeTriggers(renderer, nativeElement, triggers, isOpenedFn) {
        return new rxjs__WEBPACK_IMPORTED_MODULE_4__["Observable"](function (subscriber) {
          var listeners = [];

          var openFn = function openFn() {
            return subscriber.next(true);
          };

          var closeFn = function closeFn() {
            return subscriber.next(false);
          };

          var toggleFn = function toggleFn() {
            return subscriber.next(!isOpenedFn());
          };

          triggers.forEach(function (trigger) {
            if (trigger.open === trigger.close) {
              listeners.push(renderer.listen(nativeElement, trigger.open, toggleFn));
            } else {
              listeners.push(renderer.listen(nativeElement, trigger.open, openFn), renderer.listen(nativeElement, trigger.close, closeFn));
            }
          });
          return function () {
            listeners.forEach(function (unsubscribeFn) {
              return unsubscribeFn();
            });
          };
        });
      }

      var delayOrNoop = function delayOrNoop(time) {
        return time > 0 ? Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["delay"])(time) : function (a) {
          return a;
        };
      };

      var ɵ0$3 = delayOrNoop;

      function triggerDelay(openDelay, closeDelay, isOpenedFn) {
        return function (input$) {
          var pending = null;
          var filteredInput$ = input$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["map"])(function (open) {
            return {
              open: open
            };
          }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["filter"])(function (event) {
            var currentlyOpen = isOpenedFn();

            if (currentlyOpen !== event.open && (!pending || pending.open === currentlyOpen)) {
              pending = event;
              return true;
            }

            if (pending && pending.open !== event.open) {
              pending = null;
            }

            return false;
          }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["share"])());
          var delayedOpen$ = filteredInput$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["filter"])(function (event) {
            return event.open;
          }), delayOrNoop(openDelay));
          var delayedClose$ = filteredInput$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["filter"])(function (event) {
            return !event.open;
          }), delayOrNoop(closeDelay));
          return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["merge"])(delayedOpen$, delayedClose$).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["filter"])(function (event) {
            if (event === pending) {
              pending = null;
              return event.open !== isOpenedFn();
            }

            return false;
          }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["map"])(function (event) {
            return event.open;
          }));
        };
      }

      function listenToTriggers(renderer, nativeElement, triggers, isOpenedFn, openFn, closeFn) {
        var openDelay = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
        var closeDelay = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
        var parsedTriggers = parseTriggers(triggers);

        if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {
          return function () {};
        }

        var subscription = observeTriggers(renderer, nativeElement, parsedTriggers, isOpenedFn).pipe(triggerDelay(openDelay, closeDelay, isOpenedFn)).subscribe(function (open) {
          return open ? openFn() : closeFn();
        });
        return function () {
          return subscription.unsubscribe();
        };
      }
      /**
       * A configuration service for the [`NgbPopover`](#/components/popover/api#NgbPopover) component.
       *
       * You can inject this service, typically in your root component, and customize the values of its properties in
       * order to provide default values for all the popovers used in the application.
       */


      var NgbPopoverConfig = function NgbPopoverConfig() {
        _classCallCheck(this, NgbPopoverConfig);

        this.autoClose = true;
        this.placement = 'auto';
        this.triggers = 'click';
        this.disablePopover = false;
        this.openDelay = 0;
        this.closeDelay = 0;
      };

      NgbPopoverConfig.ɵfac = function NgbPopoverConfig_Factory(t) {
        return new (t || NgbPopoverConfig)();
      };

      NgbPopoverConfig.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function NgbPopoverConfig_Factory() {
          return new NgbPopoverConfig();
        },
        token: NgbPopoverConfig,
        providedIn: "root"
      });
      var nextId$3 = 0;

      var NgbPopoverWindow = /*#__PURE__*/function () {
        function NgbPopoverWindow() {
          _classCallCheck(this, NgbPopoverWindow);
        }

        _createClass(NgbPopoverWindow, [{
          key: "isTitleTemplate",
          value: function isTitleTemplate() {
            return this.title instanceof _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"];
          }
        }]);

        return NgbPopoverWindow;
      }();

      NgbPopoverWindow.ɵfac = function NgbPopoverWindow_Factory(t) {
        return new (t || NgbPopoverWindow)();
      };

      NgbPopoverWindow.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: NgbPopoverWindow,
        selectors: [["ngb-popover-window"]],
        hostAttrs: ["role", "tooltip"],
        hostVars: 3,
        hostBindings: function NgbPopoverWindow_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵhostProperty"]("id", ctx.id);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassMap"]("popover" + (ctx.popoverClass ? " " + ctx.popoverClass : ""));
          }
        },
        inputs: {
          title: "title",
          id: "id",
          popoverClass: "popoverClass",
          context: "context"
        },
        ngContentSelectors: _c4,
        decls: 4,
        vars: 1,
        consts: [[1, "arrow"], ["class", "popover-header", 4, "ngIf"], [1, "popover-body"], [1, "popover-header"], ["simpleTitle", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"]],
        template: function NgbPopoverWindow_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵprojectionDef"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, NgbPopoverWindow_h3_1_Template, 4, 2, "h3", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵprojection"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.title != null);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["NgIf"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgTemplateOutlet"]],
        styles: ["ngb-popover-window.bs-popover-bottom>.arrow,ngb-popover-window.bs-popover-top>.arrow{left:50%;margin-left:-.5rem}ngb-popover-window.bs-popover-bottom-left>.arrow,ngb-popover-window.bs-popover-top-left>.arrow{left:2em}ngb-popover-window.bs-popover-bottom-right>.arrow,ngb-popover-window.bs-popover-top-right>.arrow{left:auto;right:2em}ngb-popover-window.bs-popover-left>.arrow,ngb-popover-window.bs-popover-right>.arrow{top:50%;margin-top:-.5rem}ngb-popover-window.bs-popover-left-top>.arrow,ngb-popover-window.bs-popover-right-top>.arrow{top:.7em}ngb-popover-window.bs-popover-left-bottom>.arrow,ngb-popover-window.bs-popover-right-bottom>.arrow{top:auto;bottom:.7em}"],
        encapsulation: 2,
        changeDetection: 0
      });
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPopoverWindow.prototype, "title", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPopoverWindow.prototype, "id", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPopoverWindow.prototype, "popoverClass", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPopoverWindow.prototype, "context", void 0);
      /**
       * A lightweight and extensible directive for fancy popover creation.
       */

      var NgbPopover = /*#__PURE__*/function () {
        function NgbPopover(_elementRef, _renderer, injector, componentFactoryResolver, viewContainerRef, config, _ngZone, _document, _changeDetector, applicationRef) {
          var _this33 = this;

          _classCallCheck(this, NgbPopover);

          this._elementRef = _elementRef;
          this._renderer = _renderer;
          this._ngZone = _ngZone;
          this._document = _document;
          this._changeDetector = _changeDetector;
          /**
           * An event emitted when the popover is shown. Contains no payload.
           */

          this.shown = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          /**
           * An event emitted when the popover is hidden. Contains no payload.
           */

          this.hidden = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          this._ngbPopoverWindowId = "ngb-popover-".concat(nextId$3++);
          this._windowRef = null;
          this.autoClose = config.autoClose;
          this.placement = config.placement;
          this.triggers = config.triggers;
          this.container = config.container;
          this.disablePopover = config.disablePopover;
          this.popoverClass = config.popoverClass;
          this.openDelay = config.openDelay;
          this.closeDelay = config.closeDelay;
          this._popupService = new PopupService(NgbPopoverWindow, injector, viewContainerRef, _renderer, componentFactoryResolver, applicationRef);
          this._zoneSubscription = _ngZone.onStable.subscribe(function () {
            if (_this33._windowRef) {
              positionElements(_this33._elementRef.nativeElement, _this33._windowRef.location.nativeElement, _this33.placement, _this33.container === 'body', 'bs-popover');
            }
          });
        }

        _createClass(NgbPopover, [{
          key: "_isDisabled",
          value: function _isDisabled() {
            if (this.disablePopover) {
              return true;
            }

            if (!this.ngbPopover && !this.popoverTitle) {
              return true;
            }

            return false;
          }
          /**
           * Opens the popover.
           *
           * This is considered to be a "manual" triggering.
           * The `context` is an optional value to be injected into the popover template when it is created.
           */

        }, {
          key: "open",
          value: function open(context) {
            var _this34 = this;

            if (!this._windowRef && !this._isDisabled()) {
              this._windowRef = this._popupService.open(this.ngbPopover, context);
              this._windowRef.instance.title = this.popoverTitle;
              this._windowRef.instance.context = context;
              this._windowRef.instance.popoverClass = this.popoverClass;
              this._windowRef.instance.id = this._ngbPopoverWindowId;

              this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._ngbPopoverWindowId);

              if (this.container === 'body') {
                this._document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);
              } // We need to detect changes, because we don't know where .open() might be called from.
              // Ex. opening popover from one of lifecycle hooks that run after the CD
              // (say from ngAfterViewInit) will result in 'ExpressionHasChanged' exception


              this._windowRef.changeDetectorRef.detectChanges(); // We need to mark for check, because popover won't work inside the OnPush component.
              // Ex. when we use expression like `{{ popover.isOpen() : 'opened' : 'closed' }}`
              // inside the template of an OnPush component and we change the popover from
              // open -> closed, the expression in question won't be updated unless we explicitly
              // mark the parent component to be checked.


              this._windowRef.changeDetectorRef.markForCheck();

              ngbAutoClose(this._ngZone, this._document, this.autoClose, function () {
                return _this34.close();
              }, this.hidden, [this._windowRef.location.nativeElement]);
              this.shown.emit();
            }
          }
          /**
           * Closes the popover.
           *
           * This is considered to be a "manual" triggering of the popover.
           */

        }, {
          key: "close",
          value: function close() {
            if (this._windowRef) {
              this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');

              this._popupService.close();

              this._windowRef = null;
              this.hidden.emit();

              this._changeDetector.markForCheck();
            }
          }
          /**
           * Toggles the popover.
           *
           * This is considered to be a "manual" triggering of the popover.
           */

        }, {
          key: "toggle",
          value: function toggle() {
            if (this._windowRef) {
              this.close();
            } else {
              this.open();
            }
          }
          /**
           * Returns `true`, if the popover is currently shown.
           */

        }, {
          key: "isOpen",
          value: function isOpen() {
            return this._windowRef != null;
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            this._unregisterListenersFn = listenToTriggers(this._renderer, this._elementRef.nativeElement, this.triggers, this.isOpen.bind(this), this.open.bind(this), this.close.bind(this), +this.openDelay, +this.closeDelay);
          }
        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(_ref14) {
            var ngbPopover = _ref14.ngbPopover,
                popoverTitle = _ref14.popoverTitle,
                disablePopover = _ref14.disablePopover,
                popoverClass = _ref14.popoverClass;

            if (popoverClass && this.isOpen()) {
              this._windowRef.instance.popoverClass = popoverClass.currentValue;
            } // close popover if title and content become empty, or disablePopover set to true


            if ((ngbPopover || popoverTitle || disablePopover) && this._isDisabled()) {
              this.close();
            }
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.close(); // This check is needed as it might happen that ngOnDestroy is called before ngOnInit
            // under certain conditions, see: https://github.com/ng-bootstrap/ng-bootstrap/issues/2199

            if (this._unregisterListenersFn) {
              this._unregisterListenersFn();
            }

            this._zoneSubscription.unsubscribe();
          }
        }]);

        return NgbPopover;
      }();

      NgbPopover.ɵfac = function NgbPopover_Factory(t) {
        return new (t || NgbPopover)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ComponentFactoryResolver"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbPopoverConfig), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"]));
      };

      NgbPopover.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbPopover,
        selectors: [["", "ngbPopover", ""]],
        inputs: {
          autoClose: "autoClose",
          placement: "placement",
          triggers: "triggers",
          container: "container",
          disablePopover: "disablePopover",
          popoverClass: "popoverClass",
          openDelay: "openDelay",
          closeDelay: "closeDelay",
          ngbPopover: "ngbPopover",
          popoverTitle: "popoverTitle"
        },
        outputs: {
          shown: "shown",
          hidden: "hidden"
        },
        exportAs: ["ngbPopover"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵNgOnChangesFeature"]]
      });

      NgbPopover.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ComponentFactoryResolver"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"]
        }, {
          type: NgbPopoverConfig
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"]
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPopover.prototype, "autoClose", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPopover.prototype, "ngbPopover", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPopover.prototype, "popoverTitle", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPopover.prototype, "placement", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPopover.prototype, "triggers", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPopover.prototype, "container", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPopover.prototype, "disablePopover", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPopover.prototype, "popoverClass", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPopover.prototype, "openDelay", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbPopover.prototype, "closeDelay", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbPopover.prototype, "shown", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbPopover.prototype, "hidden", void 0);
      NgbPopover = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(7, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]))], NgbPopover);

      var NgbPopoverModule = function NgbPopoverModule() {
        _classCallCheck(this, NgbPopoverModule);
      };

      NgbPopoverModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: NgbPopoverModule
      });
      NgbPopoverModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function NgbPopoverModule_Factory(t) {
          return new (t || NgbPopoverModule)();
        },
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]]]
      });
      /**
       * A configuration service for the [`NgbProgressbar`](#/components/progressbar/api#NgbProgressbar) component.
       *
       * You can inject this service, typically in your root component, and customize the values of its properties in
       * order to provide default values for all the progress bars used in the application.
       */

      var NgbProgressbarConfig = function NgbProgressbarConfig() {
        _classCallCheck(this, NgbProgressbarConfig);

        this.max = 100;
        this.animated = false;
        this.striped = false;
        this.showValue = false;
      };

      NgbProgressbarConfig.ɵfac = function NgbProgressbarConfig_Factory(t) {
        return new (t || NgbProgressbarConfig)();
      };

      NgbProgressbarConfig.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function NgbProgressbarConfig_Factory() {
          return new NgbProgressbarConfig();
        },
        token: NgbProgressbarConfig,
        providedIn: "root"
      });
      /**
       * A directive that provides feedback on the progress of a workflow or an action.
       */

      var NgbProgressbar = /*#__PURE__*/function () {
        function NgbProgressbar(config) {
          _classCallCheck(this, NgbProgressbar);

          /**
           * The current value for the progress bar.
           *
           * Should be in the `[0, max]` range.
           */
          this.value = 0;
          this.max = config.max;
          this.animated = config.animated;
          this.striped = config.striped;
          this.textType = config.textType;
          this.type = config.type;
          this.showValue = config.showValue;
          this.height = config.height;
        }
        /**
         * The maximal value to be displayed in the progress bar.
         *
         * Should be a positive number. Will default to 100 otherwise.
         */


        _createClass(NgbProgressbar, [{
          key: "getValue",
          value: function getValue() {
            return getValueInRange(this.value, this.max);
          }
        }, {
          key: "getPercentValue",
          value: function getPercentValue() {
            return 100 * this.getValue() / this.max;
          }
        }, {
          key: "max",
          set: function set(max) {
            this._max = !isNumber(max) || max <= 0 ? 100 : max;
          },
          get: function get() {
            return this._max;
          }
        }]);

        return NgbProgressbar;
      }();

      NgbProgressbar.ɵfac = function NgbProgressbar_Factory(t) {
        return new (t || NgbProgressbar)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbProgressbarConfig));
      };

      NgbProgressbar.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: NgbProgressbar,
        selectors: [["ngb-progressbar"]],
        inputs: {
          value: "value",
          max: "max",
          animated: "animated",
          striped: "striped",
          textType: "textType",
          type: "type",
          showValue: "showValue",
          height: "height"
        },
        ngContentSelectors: _c4,
        decls: 4,
        vars: 13,
        consts: [[1, "progress"], ["role", "progressbar", "aria-valuemin", "0"], [4, "ngIf"]],
        template: function NgbProgressbar_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵprojectionDef"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](2, NgbProgressbar_span_2_Template, 3, 3, "span", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵprojection"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵstyleProp"]("height", ctx.height);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassMapInterpolate4"]("progress-bar", ctx.type ? " bg-" + ctx.type : "", "", ctx.textType ? " text-" + ctx.textType : "", "\n      ", ctx.animated ? " progress-bar-animated" : "", "", ctx.striped ? " progress-bar-striped" : "", "");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵstyleProp"]("width", ctx.getPercentValue(), "%");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("aria-valuenow", ctx.getValue())("aria-valuemax", ctx.max);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.showValue);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["NgIf"]],
        pipes: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["PercentPipe"]],
        encapsulation: 2,
        changeDetection: 0
      });

      NgbProgressbar.ctorParameters = function () {
        return [{
          type: NgbProgressbarConfig
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbProgressbar.prototype, "max", null);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbProgressbar.prototype, "animated", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbProgressbar.prototype, "striped", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbProgressbar.prototype, "showValue", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbProgressbar.prototype, "textType", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbProgressbar.prototype, "type", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbProgressbar.prototype, "value", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbProgressbar.prototype, "height", void 0);

      var NgbProgressbarModule = function NgbProgressbarModule() {
        _classCallCheck(this, NgbProgressbarModule);
      };

      NgbProgressbarModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: NgbProgressbarModule
      });
      NgbProgressbarModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function NgbProgressbarModule_Factory(t) {
          return new (t || NgbProgressbarModule)();
        },
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]]]
      });
      /**
       * A configuration service for the [`NgbRating`](#/components/rating/api#NgbRating) component.
       *
       * You can inject this service, typically in your root component, and customize the values of its properties in
       * order to provide default values for all the ratings used in the application.
       */

      var NgbRatingConfig = function NgbRatingConfig() {
        _classCallCheck(this, NgbRatingConfig);

        this.max = 10;
        this.readonly = false;
        this.resettable = false;
      };

      NgbRatingConfig.ɵfac = function NgbRatingConfig_Factory(t) {
        return new (t || NgbRatingConfig)();
      };

      NgbRatingConfig.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function NgbRatingConfig_Factory() {
          return new NgbRatingConfig();
        },
        token: NgbRatingConfig,
        providedIn: "root"
      });
      var NGB_RATING_VALUE_ACCESSOR = {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"],
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
          return NgbRating;
        }),
        multi: true
      };
      /**
       * A directive that helps visualising and interacting with a star rating bar.
       */

      var NgbRating = /*#__PURE__*/function () {
        function NgbRating(config, _changeDetectorRef) {
          _classCallCheck(this, NgbRating);

          this._changeDetectorRef = _changeDetectorRef;
          this.contexts = [];
          this.disabled = false;
          /**
           * An event emitted when the user is hovering over a given rating.
           *
           * Event payload equals to the rating being hovered over.
           */

          this.hover = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          /**
           * An event emitted when the user stops hovering over a given rating.
           *
           * Event payload equals to the rating of the last item being hovered over.
           */

          this.leave = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          /**
           * An event emitted when the user selects a new rating.
           *
           * Event payload equals to the newly selected rating.
           */

          this.rateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"](true);

          this.onChange = function (_) {};

          this.onTouched = function () {};

          this.max = config.max;
          this.readonly = config.readonly;
        }

        _createClass(NgbRating, [{
          key: "ariaValueText",
          value: function ariaValueText() {
            return "".concat(this.nextRate, " out of ").concat(this.max);
          }
        }, {
          key: "enter",
          value: function enter(value) {
            if (!this.readonly && !this.disabled) {
              this._updateState(value);
            }

            this.hover.emit(value);
          }
        }, {
          key: "handleBlur",
          value: function handleBlur() {
            this.onTouched();
          }
        }, {
          key: "handleClick",
          value: function handleClick(value) {
            if (!this.readonly && !this.disabled) {
              this.update(this.resettable && this.rate === value ? 0 : value);
            }
          }
        }, {
          key: "handleKeyDown",
          value: function handleKeyDown(event) {
            // tslint:disable-next-line:deprecation
            switch (event.which) {
              case Key.ArrowDown:
              case Key.ArrowLeft:
                this.update(this.rate - 1);
                break;

              case Key.ArrowUp:
              case Key.ArrowRight:
                this.update(this.rate + 1);
                break;

              case Key.Home:
                this.update(0);
                break;

              case Key.End:
                this.update(this.max);
                break;

              default:
                return;
            } // note 'return' in default case


            event.preventDefault();
          }
        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            if (changes['rate']) {
              this.update(this.rate);
            }
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            this.contexts = Array.from({
              length: this.max
            }, function (v, k) {
              return {
                fill: 0,
                index: k
              };
            });

            this._updateState(this.rate);
          }
        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.onChange = fn;
          }
        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
        }, {
          key: "reset",
          value: function reset() {
            this.leave.emit(this.nextRate);

            this._updateState(this.rate);
          }
        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this.disabled = isDisabled;
          }
        }, {
          key: "update",
          value: function update(value) {
            var internalChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var newRate = getValueInRange(value, this.max, 0);

            if (!this.readonly && !this.disabled && this.rate !== newRate) {
              this.rate = newRate;
              this.rateChange.emit(this.rate);
            }

            if (internalChange) {
              this.onChange(this.rate);
              this.onTouched();
            }

            this._updateState(this.rate);
          }
        }, {
          key: "writeValue",
          value: function writeValue(value) {
            this.update(value, false);

            this._changeDetectorRef.markForCheck();
          }
        }, {
          key: "_getFillValue",
          value: function _getFillValue(index) {
            var diff = this.nextRate - index;

            if (diff >= 1) {
              return 100;
            }

            if (diff < 1 && diff > 0) {
              return parseInt((diff * 100).toFixed(2), 10);
            }

            return 0;
          }
        }, {
          key: "_updateState",
          value: function _updateState(nextValue) {
            var _this35 = this;

            this.nextRate = nextValue;
            this.contexts.forEach(function (context, index) {
              return context.fill = _this35._getFillValue(index);
            });
          }
        }]);

        return NgbRating;
      }();

      NgbRating.ɵfac = function NgbRating_Factory(t) {
        return new (t || NgbRating)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbRatingConfig), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]));
      };

      NgbRating.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: NgbRating,
        selectors: [["ngb-rating"]],
        contentQueries: function NgbRating_ContentQueries(rf, ctx, dirIndex) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"], true);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.starTemplateFromContent = _t.first);
          }
        },
        hostAttrs: ["role", "slider", "aria-valuemin", "0", 1, "d-inline-flex"],
        hostVars: 5,
        hostBindings: function NgbRating_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("blur", function NgbRating_blur_HostBindingHandler() {
              return ctx.handleBlur();
            })("keydown", function NgbRating_keydown_HostBindingHandler($event) {
              return ctx.handleKeyDown($event);
            })("mouseleave", function NgbRating_mouseleave_HostBindingHandler() {
              return ctx.reset();
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵhostProperty"]("tabindex", ctx.disabled ? 0 - 1 : 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("aria-valuemax", ctx.max)("aria-valuenow", ctx.nextRate)("aria-valuetext", ctx.ariaValueText())("aria-disabled", ctx.readonly ? true : null);
          }
        },
        inputs: {
          max: "max",
          readonly: "readonly",
          rate: "rate",
          resettable: "resettable",
          starTemplate: "starTemplate"
        },
        outputs: {
          hover: "hover",
          leave: "leave",
          rateChange: "rateChange"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵProvidersFeature"]([NGB_RATING_VALUE_ACCESSOR]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵNgOnChangesFeature"]],
        decls: 3,
        vars: 1,
        consts: [["t", ""], ["ngFor", "", 3, "ngForOf"], [1, "sr-only"], [3, "mouseenter", "click"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"]],
        template: function NgbRating_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](0, NgbRating_ng_template_0_Template, 1, 1, "ng-template", null, 0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplateRefExtractor"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](2, NgbRating_ng_template_2_Template, 4, 5, "ng-template", 1);
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx.contexts);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["NgForOf"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgTemplateOutlet"]],
        encapsulation: 2,
        changeDetection: 0
      });

      NgbRating.ctorParameters = function () {
        return [{
          type: NgbRatingConfig
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbRating.prototype, "max", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbRating.prototype, "rate", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbRating.prototype, "readonly", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbRating.prototype, "resettable", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbRating.prototype, "starTemplate", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"], {
        "static": false
      })], NgbRating.prototype, "starTemplateFromContent", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbRating.prototype, "hover", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbRating.prototype, "leave", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbRating.prototype, "rateChange", void 0);

      var NgbRatingModule = function NgbRatingModule() {
        _classCallCheck(this, NgbRatingModule);
      };

      NgbRatingModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: NgbRatingModule
      });
      NgbRatingModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function NgbRatingModule_Factory(t) {
          return new (t || NgbRatingModule)();
        },
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]]]
      });
      /**
       * A configuration service for the [`NgbTabset`](#/components/tabset/api#NgbTabset) component.
       *
       * You can inject this service, typically in your root component, and customize the values of its properties in
       * order to provide default values for all the tabsets used in the application.
       *
       * @deprecated 6.0.0 Please use NgbNav instead
       */

      var NgbTabsetConfig = function NgbTabsetConfig() {
        _classCallCheck(this, NgbTabsetConfig);

        this.justify = 'start';
        this.orientation = 'horizontal';
        this.type = 'tabs';
      };

      NgbTabsetConfig.ɵfac = function NgbTabsetConfig_Factory(t) {
        return new (t || NgbTabsetConfig)();
      };

      NgbTabsetConfig.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function NgbTabsetConfig_Factory() {
          return new NgbTabsetConfig();
        },
        token: NgbTabsetConfig,
        providedIn: "root"
      });
      var nextId$4 = 0;
      /**
       * A directive to wrap tab titles that need to contain HTML markup or other directives.
       *
       * Alternatively you could use the `NgbTab.title` input for string titles.
       *
       * @deprecated 6.0.0 Please use NgbNav instead
       */

      var NgbTabTitle = function NgbTabTitle(templateRef) {
        _classCallCheck(this, NgbTabTitle);

        this.templateRef = templateRef;
      };

      NgbTabTitle.ɵfac = function NgbTabTitle_Factory(t) {
        return new (t || NgbTabTitle)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]));
      };

      NgbTabTitle.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbTabTitle,
        selectors: [["ng-template", "ngbTabTitle", ""]]
      });

      NgbTabTitle.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
        }];
      };
      /**
       * A directive to wrap content to be displayed in a tab.
       *
       * @deprecated 6.0.0 Please use NgbNav instead
       */


      var NgbTabContent = function NgbTabContent(templateRef) {
        _classCallCheck(this, NgbTabContent);

        this.templateRef = templateRef;
      };

      NgbTabContent.ɵfac = function NgbTabContent_Factory(t) {
        return new (t || NgbTabContent)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]));
      };

      NgbTabContent.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbTabContent,
        selectors: [["ng-template", "ngbTabContent", ""]]
      });

      NgbTabContent.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
        }];
      };
      /**
       * A directive representing an individual tab.
       *
       * @deprecated 6.0.0 Please use NgbNav instead
       */


      var NgbTab = /*#__PURE__*/function () {
        function NgbTab() {
          _classCallCheck(this, NgbTab);

          /**
           * The tab identifier.
           *
           * Must be unique for the entire document for proper accessibility support.
           */
          this.id = "ngb-tab-".concat(nextId$4++);
          /**
           * If `true`, the current tab is disabled and can't be toggled.
           */

          this.disabled = false;
        }

        _createClass(NgbTab, [{
          key: "ngAfterContentChecked",
          value: function ngAfterContentChecked() {
            // We are using @ContentChildren instead of @ContentChild as in the Angular version being used
            // only @ContentChildren allows us to specify the {descendants: false} option.
            // Without {descendants: false} we are hitting bugs described in:
            // https://github.com/ng-bootstrap/ng-bootstrap/issues/2240
            this.titleTpl = this.titleTpls.first;
            this.contentTpl = this.contentTpls.first;
          }
        }]);

        return NgbTab;
      }();

      NgbTab.ɵfac = function NgbTab_Factory(t) {
        return new (t || NgbTab)();
      };

      NgbTab.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbTab,
        selectors: [["ngb-tab"]],
        contentQueries: function NgbTab_ContentQueries(rf, ctx, dirIndex) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, NgbTabTitle, false);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, NgbTabContent, false);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.titleTpls = _t);
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.contentTpls = _t);
          }
        },
        inputs: {
          id: "id",
          disabled: "disabled",
          title: "title"
        }
      });
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTab.prototype, "id", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTab.prototype, "title", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTab.prototype, "disabled", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"])(NgbTabTitle, {
        descendants: false
      })], NgbTab.prototype, "titleTpls", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"])(NgbTabContent, {
        descendants: false
      })], NgbTab.prototype, "contentTpls", void 0);
      /**
       * A component that makes it easy to create tabbed interface.
       *
       * @deprecated 6.0.0 Please use NgbNav instead
       */

      var NgbTabset = /*#__PURE__*/function () {
        function NgbTabset(config) {
          _classCallCheck(this, NgbTabset);

          /**
           * If `true`, non-visible tabs content will be removed from DOM. Otherwise it will just be hidden.
           */
          this.destroyOnHide = true;
          /**
           * A tab change event emitted right before the tab change happens.
           *
           * See [`NgbTabChangeEvent`](#/components/tabset/api#NgbTabChangeEvent) for payload details.
           */

          this.tabChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          this.type = config.type;
          this.justify = config.justify;
          this.orientation = config.orientation;
        }
        /**
         * The horizontal alignment of the tabs with flexbox utilities.
         */


        _createClass(NgbTabset, [{
          key: "select",

          /**
           * Selects the tab with the given id and shows its associated content panel.
           *
           * Any other tab that was previously selected becomes unselected and its associated pane is removed from DOM or
           * hidden depending on the `destroyOnHide` value.
           */
          value: function select(tabId) {
            var selectedTab = this._getTabById(tabId);

            if (selectedTab && !selectedTab.disabled && this.activeId !== selectedTab.id) {
              var defaultPrevented = false;
              this.tabChange.emit({
                activeId: this.activeId,
                nextId: selectedTab.id,
                preventDefault: function preventDefault() {
                  defaultPrevented = true;
                }
              });

              if (!defaultPrevented) {
                this.activeId = selectedTab.id;
              }
            }
          }
        }, {
          key: "ngAfterContentChecked",
          value: function ngAfterContentChecked() {
            // auto-correct activeId that might have been set incorrectly as input
            var activeTab = this._getTabById(this.activeId);

            this.activeId = activeTab ? activeTab.id : this.tabs.length ? this.tabs.first.id : null;
          }
        }, {
          key: "_getTabById",
          value: function _getTabById(id) {
            var tabsWithId = this.tabs.filter(function (tab) {
              return tab.id === id;
            });
            return tabsWithId.length ? tabsWithId[0] : null;
          }
        }, {
          key: "justify",
          set: function set(className) {
            if (className === 'fill' || className === 'justified') {
              this.justifyClass = "nav-".concat(className);
            } else {
              this.justifyClass = "justify-content-".concat(className);
            }
          }
        }]);

        return NgbTabset;
      }();

      NgbTabset.ɵfac = function NgbTabset_Factory(t) {
        return new (t || NgbTabset)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbTabsetConfig));
      };

      NgbTabset.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: NgbTabset,
        selectors: [["ngb-tabset"]],
        contentQueries: function NgbTabset_ContentQueries(rf, ctx, dirIndex) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, NgbTab, false);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.tabs = _t);
          }
        },
        inputs: {
          destroyOnHide: "destroyOnHide",
          type: "type",
          justify: "justify",
          orientation: "orientation",
          activeId: "activeId"
        },
        outputs: {
          tabChange: "tabChange"
        },
        exportAs: ["ngbTabset"],
        decls: 4,
        vars: 4,
        consts: [["role", "tablist"], ["class", "nav-item", 4, "ngFor", "ngForOf"], [1, "tab-content"], ["ngFor", "", 3, "ngForOf"], [1, "nav-item"], ["href", "", "role", "tab", 1, "nav-link", 3, "id", "click"], [3, "ngTemplateOutlet"], ["role", "tabpanel", 3, "class", "id", 4, "ngIf"], ["role", "tabpanel", 3, "id"]],
        template: function NgbTabset_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "ul", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, NgbTabset_li_1_Template, 4, 11, "li", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](3, NgbTabset_ng_template_3_Template, 1, 1, "ng-template", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassMap"]("nav nav-" + ctx.type + (ctx.orientation == "horizontal" ? " " + ctx.justifyClass : " flex-column"));

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx.tabs);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx.tabs);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["NgForOf"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgTemplateOutlet"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgIf"]],
        encapsulation: 2
      });

      NgbTabset.ctorParameters = function () {
        return [{
          type: NgbTabsetConfig
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"])(NgbTab)], NgbTabset.prototype, "tabs", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTabset.prototype, "activeId", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTabset.prototype, "destroyOnHide", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTabset.prototype, "justify", null);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTabset.prototype, "orientation", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTabset.prototype, "type", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbTabset.prototype, "tabChange", void 0);
      var NGB_TABSET_DIRECTIVES = [NgbTabset, NgbTab, NgbTabContent, NgbTabTitle];
      /**
       * @deprecated 6.0.0 Please use NgbNavModule instead
       */

      var NgbTabsetModule = function NgbTabsetModule() {
        _classCallCheck(this, NgbTabsetModule);
      };

      NgbTabsetModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: NgbTabsetModule
      });
      NgbTabsetModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function NgbTabsetModule_Factory(t) {
          return new (t || NgbTabsetModule)();
        },
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]]]
      });

      var NgbTime = /*#__PURE__*/function () {
        function NgbTime(hour, minute, second) {
          _classCallCheck(this, NgbTime);

          this.hour = toInteger(hour);
          this.minute = toInteger(minute);
          this.second = toInteger(second);
        }

        _createClass(NgbTime, [{
          key: "changeHour",
          value: function changeHour() {
            var step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
            this.updateHour((isNaN(this.hour) ? 0 : this.hour) + step);
          }
        }, {
          key: "updateHour",
          value: function updateHour(hour) {
            if (isNumber(hour)) {
              this.hour = (hour < 0 ? 24 + hour : hour) % 24;
            } else {
              this.hour = NaN;
            }
          }
        }, {
          key: "changeMinute",
          value: function changeMinute() {
            var step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
            this.updateMinute((isNaN(this.minute) ? 0 : this.minute) + step);
          }
        }, {
          key: "updateMinute",
          value: function updateMinute(minute) {
            if (isNumber(minute)) {
              this.minute = minute % 60 < 0 ? 60 + minute % 60 : minute % 60;
              this.changeHour(Math.floor(minute / 60));
            } else {
              this.minute = NaN;
            }
          }
        }, {
          key: "changeSecond",
          value: function changeSecond() {
            var step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
            this.updateSecond((isNaN(this.second) ? 0 : this.second) + step);
          }
        }, {
          key: "updateSecond",
          value: function updateSecond(second) {
            if (isNumber(second)) {
              this.second = second < 0 ? 60 + second % 60 : second % 60;
              this.changeMinute(Math.floor(second / 60));
            } else {
              this.second = NaN;
            }
          }
        }, {
          key: "isValid",
          value: function isValid() {
            var checkSecs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            return isNumber(this.hour) && isNumber(this.minute) && (checkSecs ? isNumber(this.second) : true);
          }
        }, {
          key: "toString",
          value: function toString() {
            return "".concat(this.hour || 0, ":").concat(this.minute || 0, ":").concat(this.second || 0);
          }
        }]);

        return NgbTime;
      }();
      /**
       * A configuration service for the [`NgbTimepicker`](#/components/timepicker/api#NgbTimepicker) component.
       *
       * You can inject this service, typically in your root component, and customize the values of its properties in
       * order to provide default values for all the timepickers used in the application.
       */


      var NgbTimepickerConfig = function NgbTimepickerConfig() {
        _classCallCheck(this, NgbTimepickerConfig);

        this.meridian = false;
        this.spinners = true;
        this.seconds = false;
        this.hourStep = 1;
        this.minuteStep = 1;
        this.secondStep = 1;
        this.disabled = false;
        this.readonlyInputs = false;
        this.size = 'medium';
      };

      NgbTimepickerConfig.ɵfac = function NgbTimepickerConfig_Factory(t) {
        return new (t || NgbTimepickerConfig)();
      };

      NgbTimepickerConfig.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function NgbTimepickerConfig_Factory() {
          return new NgbTimepickerConfig();
        },
        token: NgbTimepickerConfig,
        providedIn: "root"
      });

      function NGB_DATEPICKER_TIME_ADAPTER_FACTORY() {
        return new NgbTimeStructAdapter();
      }
      /**
       * An abstract service that does the conversion between the internal timepicker `NgbTimeStruct` model and
       * any provided user time model `T`, ex. a string, a native date, etc.
       *
       * The adapter is used **only** for conversion when binding timepicker to a form control,
       * ex. `[(ngModel)]="userTimeModel"`. Here `userTimeModel` can be of any type.
       *
       * The default timepicker implementation assumes we use `NgbTimeStruct` as a user model.
       *
       * See the [custom time adapter demo](#/components/timepicker/examples#adapter) for an example.
       *
       * @since 2.2.0
       */


      var NgbTimeAdapter = function NgbTimeAdapter() {
        _classCallCheck(this, NgbTimeAdapter);
      };

      NgbTimeAdapter.ɵfac = function NgbTimeAdapter_Factory(t) {
        return new (t || NgbTimeAdapter)();
      };

      NgbTimeAdapter.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: NGB_DATEPICKER_TIME_ADAPTER_FACTORY,
        token: NgbTimeAdapter,
        providedIn: "root"
      });

      var NgbTimeStructAdapter = /*#__PURE__*/function (_NgbTimeAdapter) {
        _inherits(NgbTimeStructAdapter, _NgbTimeAdapter);

        var _super15 = _createSuper(NgbTimeStructAdapter);

        function NgbTimeStructAdapter() {
          _classCallCheck(this, NgbTimeStructAdapter);

          return _super15.apply(this, arguments);
        }

        _createClass(NgbTimeStructAdapter, [{
          key: "fromModel",

          /**
           * Converts a NgbTimeStruct value into NgbTimeStruct value
           */
          value: function fromModel(time) {
            return time && isInteger(time.hour) && isInteger(time.minute) ? {
              hour: time.hour,
              minute: time.minute,
              second: isInteger(time.second) ? time.second : null
            } : null;
          }
          /**
           * Converts a NgbTimeStruct value into NgbTimeStruct value
           */

        }, {
          key: "toModel",
          value: function toModel(time) {
            return time && isInteger(time.hour) && isInteger(time.minute) ? {
              hour: time.hour,
              minute: time.minute,
              second: isInteger(time.second) ? time.second : null
            } : null;
          }
        }]);

        return NgbTimeStructAdapter;
      }(NgbTimeAdapter);

      NgbTimeStructAdapter.ɵfac = function NgbTimeStructAdapter_Factory(t) {
        return ɵNgbTimeStructAdapter_BaseFactory(t || NgbTimeStructAdapter);
      };

      NgbTimeStructAdapter.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: NgbTimeStructAdapter,
        factory: NgbTimeStructAdapter.ɵfac
      });

      function NGB_TIMEPICKER_I18N_FACTORY(locale) {
        return new NgbTimepickerI18nDefault(locale);
      }
      /**
       * Type of the service supplying day periods (for example, 'AM' and 'PM') to NgbTimepicker component.
       * The default implementation of this service honors the Angular locale, and uses the registered locale data,
       * as explained in the Angular i18n guide.
       */


      var NgbTimepickerI18n = function NgbTimepickerI18n() {
        _classCallCheck(this, NgbTimepickerI18n);
      };

      NgbTimepickerI18n.ɵfac = function NgbTimepickerI18n_Factory(t) {
        return new (t || NgbTimepickerI18n)();
      };

      NgbTimepickerI18n.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function NgbTimepickerI18n_Factory() {
          return NGB_TIMEPICKER_I18N_FACTORY(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["LOCALE_ID"]));
        },
        token: NgbTimepickerI18n,
        providedIn: "root"
      });

      var NgbTimepickerI18nDefault = /*#__PURE__*/function (_NgbTimepickerI18n) {
        _inherits(NgbTimepickerI18nDefault, _NgbTimepickerI18n);

        var _super16 = _createSuper(NgbTimepickerI18nDefault);

        function NgbTimepickerI18nDefault(locale) {
          var _this36;

          _classCallCheck(this, NgbTimepickerI18nDefault);

          _this36 = _super16.call(this);
          _this36._periods = Object(_angular_common__WEBPACK_IMPORTED_MODULE_2__["getLocaleDayPeriods"])(locale, _angular_common__WEBPACK_IMPORTED_MODULE_2__["FormStyle"].Standalone, _angular_common__WEBPACK_IMPORTED_MODULE_2__["TranslationWidth"].Narrow);
          return _this36;
        }

        _createClass(NgbTimepickerI18nDefault, [{
          key: "getMorningPeriod",
          value: function getMorningPeriod() {
            return this._periods[0];
          }
        }, {
          key: "getAfternoonPeriod",
          value: function getAfternoonPeriod() {
            return this._periods[1];
          }
        }]);

        return NgbTimepickerI18nDefault;
      }(NgbTimepickerI18n);

      NgbTimepickerI18nDefault.ɵfac = function NgbTimepickerI18nDefault_Factory(t) {
        return new (t || NgbTimepickerI18nDefault)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["LOCALE_ID"]));
      };

      NgbTimepickerI18nDefault.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: NgbTimepickerI18nDefault,
        factory: NgbTimepickerI18nDefault.ɵfac
      });

      NgbTimepickerI18nDefault.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["LOCALE_ID"]]
          }]
        }];
      };

      NgbTimepickerI18nDefault = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(0, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["LOCALE_ID"]))], NgbTimepickerI18nDefault);
      var FILTER_REGEX = /[^0-9]/g;
      var NGB_TIMEPICKER_VALUE_ACCESSOR = {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"],
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
          return NgbTimepicker;
        }),
        multi: true
      };
      /**
       * A directive that helps with wth picking hours, minutes and seconds.
       */

      var NgbTimepicker = /*#__PURE__*/function () {
        function NgbTimepicker(_config, _ngbTimeAdapter, _cd, i18n) {
          _classCallCheck(this, NgbTimepicker);

          this._config = _config;
          this._ngbTimeAdapter = _ngbTimeAdapter;
          this._cd = _cd;
          this.i18n = i18n;

          this.onChange = function (_) {};

          this.onTouched = function () {};

          this.meridian = _config.meridian;
          this.spinners = _config.spinners;
          this.seconds = _config.seconds;
          this.hourStep = _config.hourStep;
          this.minuteStep = _config.minuteStep;
          this.secondStep = _config.secondStep;
          this.disabled = _config.disabled;
          this.readonlyInputs = _config.readonlyInputs;
          this.size = _config.size;
        }
        /**
         * The number of hours to add/subtract when clicking hour spinners.
         */


        _createClass(NgbTimepicker, [{
          key: "writeValue",
          value: function writeValue(value) {
            var structValue = this._ngbTimeAdapter.fromModel(value);

            this.model = structValue ? new NgbTime(structValue.hour, structValue.minute, structValue.second) : new NgbTime();

            if (!this.seconds && (!structValue || !isNumber(structValue.second))) {
              this.model.second = 0;
            }

            this._cd.markForCheck();
          }
        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.onChange = fn;
          }
        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this.disabled = isDisabled;
          }
        }, {
          key: "changeHour",
          value: function changeHour(step) {
            this.model.changeHour(step);
            this.propagateModelChange();
          }
        }, {
          key: "changeMinute",
          value: function changeMinute(step) {
            this.model.changeMinute(step);
            this.propagateModelChange();
          }
        }, {
          key: "changeSecond",
          value: function changeSecond(step) {
            this.model.changeSecond(step);
            this.propagateModelChange();
          }
        }, {
          key: "updateHour",
          value: function updateHour(newVal) {
            var isPM = this.model.hour >= 12;
            var enteredHour = toInteger(newVal);

            if (this.meridian && (isPM && enteredHour < 12 || !isPM && enteredHour === 12)) {
              this.model.updateHour(enteredHour + 12);
            } else {
              this.model.updateHour(enteredHour);
            }

            this.propagateModelChange();
          }
        }, {
          key: "updateMinute",
          value: function updateMinute(newVal) {
            this.model.updateMinute(toInteger(newVal));
            this.propagateModelChange();
          }
        }, {
          key: "updateSecond",
          value: function updateSecond(newVal) {
            this.model.updateSecond(toInteger(newVal));
            this.propagateModelChange();
          }
        }, {
          key: "toggleMeridian",
          value: function toggleMeridian() {
            if (this.meridian) {
              this.changeHour(12);
            }
          }
        }, {
          key: "formatInput",
          value: function formatInput(input) {
            input.value = input.value.replace(FILTER_REGEX, '');
          }
        }, {
          key: "formatHour",
          value: function formatHour(value) {
            if (isNumber(value)) {
              if (this.meridian) {
                return padNumber(value % 12 === 0 ? 12 : value % 12);
              } else {
                return padNumber(value % 24);
              }
            } else {
              return padNumber(NaN);
            }
          }
        }, {
          key: "formatMinSec",
          value: function formatMinSec(value) {
            return padNumber(isNumber(value) ? value : NaN);
          }
        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            if (changes['seconds'] && !this.seconds && this.model && !isNumber(this.model.second)) {
              this.model.second = 0;
              this.propagateModelChange(false);
            }
          }
        }, {
          key: "propagateModelChange",
          value: function propagateModelChange() {
            var touched = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            if (touched) {
              this.onTouched();
            }

            if (this.model.isValid(this.seconds)) {
              this.onChange(this._ngbTimeAdapter.toModel({
                hour: this.model.hour,
                minute: this.model.minute,
                second: this.model.second
              }));
            } else {
              this.onChange(this._ngbTimeAdapter.toModel(null));
            }
          }
        }, {
          key: "hourStep",
          set: function set(step) {
            this._hourStep = isInteger(step) ? step : this._config.hourStep;
          },
          get: function get() {
            return this._hourStep;
          }
          /**
           * The number of minutes to add/subtract when clicking minute spinners.
           */

        }, {
          key: "minuteStep",
          set: function set(step) {
            this._minuteStep = isInteger(step) ? step : this._config.minuteStep;
          },
          get: function get() {
            return this._minuteStep;
          }
          /**
           * The number of seconds to add/subtract when clicking second spinners.
           */

        }, {
          key: "secondStep",
          set: function set(step) {
            this._secondStep = isInteger(step) ? step : this._config.secondStep;
          },
          get: function get() {
            return this._secondStep;
          }
        }, {
          key: "isSmallSize",
          get: function get() {
            return this.size === 'small';
          }
        }, {
          key: "isLargeSize",
          get: function get() {
            return this.size === 'large';
          }
        }]);

        return NgbTimepicker;
      }();

      NgbTimepicker.ɵfac = function NgbTimepicker_Factory(t) {
        return new (t || NgbTimepicker)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbTimepickerConfig), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbTimeAdapter), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbTimepickerI18n));
      };

      NgbTimepicker.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: NgbTimepicker,
        selectors: [["ngb-timepicker"]],
        inputs: {
          meridian: "meridian",
          spinners: "spinners",
          seconds: "seconds",
          hourStep: "hourStep",
          minuteStep: "minuteStep",
          secondStep: "secondStep",
          readonlyInputs: "readonlyInputs",
          size: "size"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵProvidersFeature"]([NGB_TIMEPICKER_VALUE_ACCESSOR]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵNgOnChangesFeature"]],
        decls: 18,
        vars: 25,
        consts: [[3, "disabled"], [1, "ngb-tp"], [1, "ngb-tp-input-container", "ngb-tp-hour"], ["tabindex", "-1", "type", "button", "class", "btn btn-link", 3, "btn-sm", "btn-lg", "disabled", "click", 4, "ngIf"], ["type", "text", "maxlength", "2", "inputmode", "numeric", 1, "ngb-tp-input", "form-control", 3, "value", "readOnly", "disabled", "change", "input", "keydown.ArrowUp", "keydown.ArrowDown", 6, "placeholder", "aria-label"], [1, "ngb-tp-spacer"], [1, "ngb-tp-input-container", "ngb-tp-minute"], ["class", "ngb-tp-spacer", 4, "ngIf"], ["class", "ngb-tp-input-container ngb-tp-second", 4, "ngIf"], ["class", "ngb-tp-meridian", 4, "ngIf"], ["tabindex", "-1", "type", "button", 1, "btn", "btn-link", 3, "disabled", "click"], [1, "chevron", "ngb-tp-chevron"], [1, "sr-only"], [1, "chevron", "ngb-tp-chevron", "bottom"], [1, "ngb-tp-input-container", "ngb-tp-second"], [1, "ngb-tp-meridian"], ["type", "button", 1, "btn", "btn-outline-primary", 3, "disabled", "click"], [4, "ngIf", "ngIfElse"], ["am", ""]],
        template: function NgbTimepicker_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "fieldset", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](3, NgbTimepicker_button_3_Template, 4, 7, "button", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](4, "input", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18nAttributes"](5, _c67);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("change", function NgbTimepicker_Template_input_change_4_listener($event) {
              return ctx.updateHour($event.target.value);
            })("input", function NgbTimepicker_Template_input_input_4_listener($event) {
              return ctx.formatInput($event.target);
            })("keydown.ArrowUp", function NgbTimepicker_Template_input_keydown_ArrowUp_4_listener($event) {
              ctx.changeHour(ctx.hourStep);
              return $event.preventDefault();
            })("keydown.ArrowDown", function NgbTimepicker_Template_input_keydown_ArrowDown_4_listener($event) {
              ctx.changeHour(0 - ctx.hourStep);
              return $event.preventDefault();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](6, NgbTimepicker_button_6_Template, 4, 7, "button", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](7, "div", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](8, ":");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](9, "div", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](10, NgbTimepicker_button_10_Template, 4, 7, "button", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](11, "input", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵi18nAttributes"](12, _c72);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("change", function NgbTimepicker_Template_input_change_11_listener($event) {
              return ctx.updateMinute($event.target.value);
            })("input", function NgbTimepicker_Template_input_input_11_listener($event) {
              return ctx.formatInput($event.target);
            })("keydown.ArrowUp", function NgbTimepicker_Template_input_keydown_ArrowUp_11_listener($event) {
              ctx.changeMinute(ctx.minuteStep);
              return $event.preventDefault();
            })("keydown.ArrowDown", function NgbTimepicker_Template_input_keydown_ArrowDown_11_listener($event) {
              ctx.changeMinute(0 - ctx.minuteStep);
              return $event.preventDefault();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](13, NgbTimepicker_button_13_Template, 4, 7, "button", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](14, NgbTimepicker_div_14_Template, 2, 0, "div", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](15, NgbTimepicker_div_15_Template, 5, 9, "div", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](16, NgbTimepicker_div_16_Template, 1, 0, "div", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](17, NgbTimepicker_div_17_Template, 5, 9, "div", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("disabled", ctx.disabled);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("disabled", ctx.disabled);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.spinners);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("form-control-sm", ctx.isSmallSize)("form-control-lg", ctx.isLargeSize);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("value", ctx.formatHour(ctx.model == null ? null : ctx.model.hour))("readOnly", ctx.readonlyInputs)("disabled", ctx.disabled);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.spinners);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](4);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.spinners);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("form-control-sm", ctx.isSmallSize)("form-control-lg", ctx.isLargeSize);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("value", ctx.formatMinSec(ctx.model == null ? null : ctx.model.minute))("readOnly", ctx.readonlyInputs)("disabled", ctx.disabled);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.spinners);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.seconds);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.seconds);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.meridian);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.meridian);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["NgIf"]],
        styles: ["ngb-timepicker{font-size:1rem}.ngb-tp{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.ngb-tp-input-container{width:4em}.ngb-tp-chevron::before{border-style:solid;border-width:.29em .29em 0 0;content:\"\";display:inline-block;height:.69em;left:.05em;position:relative;top:.15em;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);vertical-align:middle;width:.69em}.ngb-tp-chevron.bottom:before{top:-.3em;-webkit-transform:rotate(135deg);transform:rotate(135deg)}.ngb-tp-input{text-align:center}.ngb-tp-hour,.ngb-tp-meridian,.ngb-tp-minute,.ngb-tp-second{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center;-ms-flex-pack:distribute;justify-content:space-around}.ngb-tp-spacer{width:1em;text-align:center}"],
        encapsulation: 2
      });

      NgbTimepicker.ctorParameters = function () {
        return [{
          type: NgbTimepickerConfig
        }, {
          type: NgbTimeAdapter
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
        }, {
          type: NgbTimepickerI18n
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTimepicker.prototype, "meridian", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTimepicker.prototype, "spinners", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTimepicker.prototype, "seconds", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTimepicker.prototype, "hourStep", null);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTimepicker.prototype, "minuteStep", null);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTimepicker.prototype, "secondStep", null);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTimepicker.prototype, "readonlyInputs", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTimepicker.prototype, "size", void 0);

      var NgbTimepickerModule = function NgbTimepickerModule() {
        _classCallCheck(this, NgbTimepickerModule);
      };

      NgbTimepickerModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: NgbTimepickerModule
      });
      NgbTimepickerModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function NgbTimepickerModule_Factory(t) {
          return new (t || NgbTimepickerModule)();
        },
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]]]
      });
      /**
       * Configuration service for the NgbToast component. You can inject this service, typically in your root component,
       * and customize the values of its properties in order to provide default values for all the toasts used in the
       * application.
       *
       * @since 5.0.0
       */

      var NgbToastConfig = function NgbToastConfig() {
        _classCallCheck(this, NgbToastConfig);

        this.autohide = true;
        this.delay = 500;
        this.ariaLive = 'polite';
      };

      NgbToastConfig.ɵfac = function NgbToastConfig_Factory(t) {
        return new (t || NgbToastConfig)();
      };

      NgbToastConfig.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function NgbToastConfig_Factory() {
          return new NgbToastConfig();
        },
        token: NgbToastConfig,
        providedIn: "root"
      });
      /**
       * This directive allows the usage of HTML markup or other directives
       * inside of the toast's header.
       *
       * @since 5.0.0
       */

      var NgbToastHeader = function NgbToastHeader() {
        _classCallCheck(this, NgbToastHeader);
      };

      NgbToastHeader.ɵfac = function NgbToastHeader_Factory(t) {
        return new (t || NgbToastHeader)();
      };

      NgbToastHeader.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbToastHeader,
        selectors: [["", "ngbToastHeader", ""]]
      });
      /**
       * Toasts provide feedback messages as notifications to the user.
       * Goal is to mimic the push notifications available both on mobile and desktop operating systems.
       *
       * @since 5.0.0
       */

      var NgbToast = /*#__PURE__*/function () {
        function NgbToast(ariaLive, config) {
          _classCallCheck(this, NgbToast);

          this.ariaLive = ariaLive;
          /**
           * A template like `<ng-template ngbToastHeader></ng-template>` can be
           * used in the projected content to allow markup usage.
           */

          this.contentHeaderTpl = null;
          /**
           * An event fired immediately when toast's `hide()` method has been called.
           * It can only occur in 2 different scenarios:
           * - `autohide` timeout fires
           * - user clicks on a closing cross (&times)
           *
           * Additionally this output is purely informative. The toast won't disappear. It's up to the user to take care of
           * that.
           */

          this.hideOutput = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();

          if (this.ariaLive == null) {
            this.ariaLive = config.ariaLive;
          }

          this.delay = config.delay;
          this.autohide = config.autohide;
        }

        _createClass(NgbToast, [{
          key: "ngAfterContentInit",
          value: function ngAfterContentInit() {
            this._init();
          }
        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            if ('autohide' in changes) {
              this._clearTimeout();

              this._init();
            }
          }
        }, {
          key: "hide",
          value: function hide() {
            this._clearTimeout();

            this.hideOutput.emit();
          }
        }, {
          key: "_init",
          value: function _init() {
            var _this37 = this;

            if (this.autohide && !this._timeoutID) {
              this._timeoutID = setTimeout(function () {
                return _this37.hide();
              }, this.delay);
            }
          }
        }, {
          key: "_clearTimeout",
          value: function _clearTimeout() {
            if (this._timeoutID) {
              clearTimeout(this._timeoutID);
              this._timeoutID = null;
            }
          }
        }]);

        return NgbToast;
      }();

      NgbToast.ɵfac = function NgbToast_Factory(t) {
        return new (t || NgbToast)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinjectAttribute"]('aria-live'), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbToastConfig));
      };

      NgbToast.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: NgbToast,
        selectors: [["ngb-toast"]],
        contentQueries: function NgbToast_ContentQueries(rf, ctx, dirIndex) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵstaticContentQuery"](dirIndex, NgbToastHeader, true, _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.contentHeaderTpl = _t.first);
          }
        },
        hostAttrs: ["role", "alert", "aria-atomic", "true"],
        hostVars: 5,
        hostBindings: function NgbToast_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("aria-live", ctx.ariaLive);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("toast", true)("show", true);
          }
        },
        inputs: {
          delay: "delay",
          autohide: "autohide",
          header: "header"
        },
        outputs: {
          hideOutput: "hide"
        },
        exportAs: ["ngbToast"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵNgOnChangesFeature"]],
        ngContentSelectors: _c4,
        decls: 5,
        vars: 1,
        consts: [["headerTpl", ""], [3, "ngIf"], [1, "toast-body"], [1, "mr-auto"], [1, "toast-header"], [3, "ngTemplateOutlet"], ["type", "button", 1, "close", 3, "click", 6, "aria-label"], ["aria-hidden", "true"]],
        template: function NgbToast_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵprojectionDef"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](0, NgbToast_ng_template_0_Template, 2, 1, "ng-template", null, 0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplateRefExtractor"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](2, NgbToast_ng_template_2_Template, 6, 1, "ng-template", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](3, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵprojection"](4);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.contentHeaderTpl || ctx.header);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["NgIf"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgTemplateOutlet"]],
        styles: [".ngb-toasts{position:fixed;top:0;right:0;margin:.5em;z-index:1200}ngb-toast .toast-header .close{margin-left:auto;margin-bottom:.25rem}"],
        encapsulation: 2
      });

      NgbToast.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Attribute"],
            args: ['aria-live']
          }]
        }, {
          type: NgbToastConfig
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbToast.prototype, "delay", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbToast.prototype, "autohide", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbToast.prototype, "header", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"])(NgbToastHeader, {
        read: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"],
        "static": true
      })], NgbToast.prototype, "contentHeaderTpl", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])('hide')], NgbToast.prototype, "hideOutput", void 0);
      NgbToast = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(0, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Attribute"])('aria-live'))], NgbToast);

      var NgbToastModule = function NgbToastModule() {
        _classCallCheck(this, NgbToastModule);
      };

      NgbToastModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: NgbToastModule
      });
      NgbToastModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function NgbToastModule_Factory(t) {
          return new (t || NgbToastModule)();
        },
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]]]
      });
      /**
       * A configuration service for the [`NgbTooltip`](#/components/tooltip/api#NgbTooltip) component.
       *
       * You can inject this service, typically in your root component, and customize the values of its properties in
       * order to provide default values for all the tooltips used in the application.
       */

      var NgbTooltipConfig = function NgbTooltipConfig() {
        _classCallCheck(this, NgbTooltipConfig);

        this.autoClose = true;
        this.placement = 'auto';
        this.triggers = 'hover focus';
        this.disableTooltip = false;
        this.openDelay = 0;
        this.closeDelay = 0;
      };

      NgbTooltipConfig.ɵfac = function NgbTooltipConfig_Factory(t) {
        return new (t || NgbTooltipConfig)();
      };

      NgbTooltipConfig.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function NgbTooltipConfig_Factory() {
          return new NgbTooltipConfig();
        },
        token: NgbTooltipConfig,
        providedIn: "root"
      });
      var nextId$5 = 0;

      var NgbTooltipWindow = function NgbTooltipWindow() {
        _classCallCheck(this, NgbTooltipWindow);
      };

      NgbTooltipWindow.ɵfac = function NgbTooltipWindow_Factory(t) {
        return new (t || NgbTooltipWindow)();
      };

      NgbTooltipWindow.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: NgbTooltipWindow,
        selectors: [["ngb-tooltip-window"]],
        hostAttrs: ["role", "tooltip"],
        hostVars: 3,
        hostBindings: function NgbTooltipWindow_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵhostProperty"]("id", ctx.id);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassMap"]("tooltip show" + (ctx.tooltipClass ? " " + ctx.tooltipClass : ""));
          }
        },
        inputs: {
          id: "id",
          tooltipClass: "tooltipClass"
        },
        ngContentSelectors: _c4,
        decls: 3,
        vars: 0,
        consts: [[1, "arrow"], [1, "tooltip-inner"]],
        template: function NgbTooltipWindow_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵprojectionDef"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵprojection"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
          }
        },
        styles: ["ngb-tooltip-window.bs-tooltip-bottom .arrow,ngb-tooltip-window.bs-tooltip-top .arrow{left:calc(50% - .4rem)}ngb-tooltip-window.bs-tooltip-bottom-left .arrow,ngb-tooltip-window.bs-tooltip-top-left .arrow{left:1em}ngb-tooltip-window.bs-tooltip-bottom-right .arrow,ngb-tooltip-window.bs-tooltip-top-right .arrow{left:auto;right:.8rem}ngb-tooltip-window.bs-tooltip-left .arrow,ngb-tooltip-window.bs-tooltip-right .arrow{top:calc(50% - .4rem)}ngb-tooltip-window.bs-tooltip-left-top .arrow,ngb-tooltip-window.bs-tooltip-right-top .arrow{top:.4rem}ngb-tooltip-window.bs-tooltip-left-bottom .arrow,ngb-tooltip-window.bs-tooltip-right-bottom .arrow{top:auto;bottom:.4rem}"],
        encapsulation: 2,
        changeDetection: 0
      });
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTooltipWindow.prototype, "id", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTooltipWindow.prototype, "tooltipClass", void 0);
      /**
       * A lightweight and extensible directive for fancy tooltip creation.
       */

      var NgbTooltip = /*#__PURE__*/function () {
        function NgbTooltip(_elementRef, _renderer, injector, componentFactoryResolver, viewContainerRef, config, _ngZone, _document, _changeDetector, applicationRef) {
          var _this38 = this;

          _classCallCheck(this, NgbTooltip);

          this._elementRef = _elementRef;
          this._renderer = _renderer;
          this._ngZone = _ngZone;
          this._document = _document;
          this._changeDetector = _changeDetector;
          /**
           * An event emitted when the tooltip is shown. Contains no payload.
           */

          this.shown = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          /**
           * An event emitted when the popover is hidden. Contains no payload.
           */

          this.hidden = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          this._ngbTooltipWindowId = "ngb-tooltip-".concat(nextId$5++);
          this._windowRef = null;
          this.autoClose = config.autoClose;
          this.placement = config.placement;
          this.triggers = config.triggers;
          this.container = config.container;
          this.disableTooltip = config.disableTooltip;
          this.tooltipClass = config.tooltipClass;
          this.openDelay = config.openDelay;
          this.closeDelay = config.closeDelay;
          this._popupService = new PopupService(NgbTooltipWindow, injector, viewContainerRef, _renderer, componentFactoryResolver, applicationRef);
          this._zoneSubscription = _ngZone.onStable.subscribe(function () {
            if (_this38._windowRef) {
              positionElements(_this38._elementRef.nativeElement, _this38._windowRef.location.nativeElement, _this38.placement, _this38.container === 'body', 'bs-tooltip');
            }
          });
        }
        /**
         * The string content or a `TemplateRef` for the content to be displayed in the tooltip.
         *
         * If the content if falsy, the tooltip won't open.
         */


        _createClass(NgbTooltip, [{
          key: "open",

          /**
           * Opens the tooltip.
           *
           * This is considered to be a "manual" triggering.
           * The `context` is an optional value to be injected into the tooltip template when it is created.
           */
          value: function open(context) {
            var _this39 = this;

            if (!this._windowRef && this._ngbTooltip && !this.disableTooltip) {
              this._windowRef = this._popupService.open(this._ngbTooltip, context);
              this._windowRef.instance.tooltipClass = this.tooltipClass;
              this._windowRef.instance.id = this._ngbTooltipWindowId;

              this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._ngbTooltipWindowId);

              if (this.container === 'body') {
                this._document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);
              } // We need to detect changes, because we don't know where .open() might be called from.
              // Ex. opening tooltip from one of lifecycle hooks that run after the CD
              // (say from ngAfterViewInit) will result in 'ExpressionHasChanged' exception


              this._windowRef.changeDetectorRef.detectChanges(); // We need to mark for check, because tooltip won't work inside the OnPush component.
              // Ex. when we use expression like `{{ tooltip.isOpen() : 'opened' : 'closed' }}`
              // inside the template of an OnPush component and we change the tooltip from
              // open -> closed, the expression in question won't be updated unless we explicitly
              // mark the parent component to be checked.


              this._windowRef.changeDetectorRef.markForCheck();

              ngbAutoClose(this._ngZone, this._document, this.autoClose, function () {
                return _this39.close();
              }, this.hidden, [this._windowRef.location.nativeElement]);
              this.shown.emit();
            }
          }
          /**
           * Closes the tooltip.
           *
           * This is considered to be a "manual" triggering of the tooltip.
           */

        }, {
          key: "close",
          value: function close() {
            if (this._windowRef != null) {
              this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');

              this._popupService.close();

              this._windowRef = null;
              this.hidden.emit();

              this._changeDetector.markForCheck();
            }
          }
          /**
           * Toggles the tooltip.
           *
           * This is considered to be a "manual" triggering of the tooltip.
           */

        }, {
          key: "toggle",
          value: function toggle() {
            if (this._windowRef) {
              this.close();
            } else {
              this.open();
            }
          }
          /**
           * Returns `true`, if the popover is currently shown.
           */

        }, {
          key: "isOpen",
          value: function isOpen() {
            return this._windowRef != null;
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            this._unregisterListenersFn = listenToTriggers(this._renderer, this._elementRef.nativeElement, this.triggers, this.isOpen.bind(this), this.open.bind(this), this.close.bind(this), +this.openDelay, +this.closeDelay);
          }
        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(_ref15) {
            var tooltipClass = _ref15.tooltipClass;

            if (tooltipClass && this.isOpen()) {
              this._windowRef.instance.tooltipClass = tooltipClass.currentValue;
            }
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.close(); // This check is needed as it might happen that ngOnDestroy is called before ngOnInit
            // under certain conditions, see: https://github.com/ng-bootstrap/ng-bootstrap/issues/2199

            if (this._unregisterListenersFn) {
              this._unregisterListenersFn();
            }

            this._zoneSubscription.unsubscribe();
          }
        }, {
          key: "ngbTooltip",
          set: function set(value) {
            this._ngbTooltip = value;

            if (!value && this._windowRef) {
              this.close();
            }
          },
          get: function get() {
            return this._ngbTooltip;
          }
        }]);

        return NgbTooltip;
      }();

      NgbTooltip.ɵfac = function NgbTooltip_Factory(t) {
        return new (t || NgbTooltip)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ComponentFactoryResolver"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbTooltipConfig), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"]));
      };

      NgbTooltip.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbTooltip,
        selectors: [["", "ngbTooltip", ""]],
        inputs: {
          autoClose: "autoClose",
          placement: "placement",
          triggers: "triggers",
          container: "container",
          disableTooltip: "disableTooltip",
          tooltipClass: "tooltipClass",
          openDelay: "openDelay",
          closeDelay: "closeDelay",
          ngbTooltip: "ngbTooltip"
        },
        outputs: {
          shown: "shown",
          hidden: "hidden"
        },
        exportAs: ["ngbTooltip"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵNgOnChangesFeature"]]
      });

      NgbTooltip.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ComponentFactoryResolver"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"]
        }, {
          type: NgbTooltipConfig
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"]
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTooltip.prototype, "autoClose", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTooltip.prototype, "placement", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTooltip.prototype, "triggers", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTooltip.prototype, "container", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTooltip.prototype, "disableTooltip", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTooltip.prototype, "tooltipClass", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTooltip.prototype, "openDelay", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTooltip.prototype, "closeDelay", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbTooltip.prototype, "shown", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbTooltip.prototype, "hidden", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTooltip.prototype, "ngbTooltip", null);
      NgbTooltip = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(7, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]))], NgbTooltip);

      var NgbTooltipModule = function NgbTooltipModule() {
        _classCallCheck(this, NgbTooltipModule);
      };

      NgbTooltipModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: NgbTooltipModule
      });
      NgbTooltipModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function NgbTooltipModule_Factory(t) {
          return new (t || NgbTooltipModule)();
        }
      });
      /**
       * A component that helps with text highlighting.
       *
       * If splits the `result` text into parts that contain the searched `term` and generates the HTML markup to simplify
       * highlighting:
       *
       * Ex. `result="Alaska"` and `term="as"` will produce `Al<span class="ngb-highlight">as</span>ka`.
       */

      var NgbHighlight = /*#__PURE__*/function () {
        function NgbHighlight() {
          _classCallCheck(this, NgbHighlight);

          /**
           * The CSS class for `<span>` elements wrapping the `term` inside the `result`.
           */
          this.highlightClass = 'ngb-highlight';
        }

        _createClass(NgbHighlight, [{
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            var result = toString(this.result);
            var terms = Array.isArray(this.term) ? this.term : [this.term];
            var escapedTerms = terms.map(function (term) {
              return regExpEscape(toString(term));
            }).filter(function (term) {
              return term;
            });
            this.parts = escapedTerms.length ? result.split(new RegExp("(".concat(escapedTerms.join('|'), ")"), 'gmi')) : [result];
          }
        }]);

        return NgbHighlight;
      }();

      NgbHighlight.ɵfac = function NgbHighlight_Factory(t) {
        return new (t || NgbHighlight)();
      };

      NgbHighlight.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: NgbHighlight,
        selectors: [["ngb-highlight"]],
        inputs: {
          highlightClass: "highlightClass",
          result: "result",
          term: "term"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵNgOnChangesFeature"]],
        decls: 1,
        vars: 1,
        consts: [["ngFor", "", 3, "ngForOf"], [3, "class", 4, "ngIf", "ngIfElse"], ["even", ""]],
        template: function NgbHighlight_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](0, NgbHighlight_ng_template_0_Template, 3, 2, "ng-template", 0);
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx.parts);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["NgForOf"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgIf"]],
        styles: [".ngb-highlight{font-weight:700}"],
        encapsulation: 2,
        changeDetection: 0
      });
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbHighlight.prototype, "highlightClass", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbHighlight.prototype, "result", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbHighlight.prototype, "term", void 0);

      var NgbTypeaheadWindow = /*#__PURE__*/function () {
        function NgbTypeaheadWindow() {
          _classCallCheck(this, NgbTypeaheadWindow);

          this.activeIdx = 0;
          /**
           * Flag indicating if the first row should be active initially
           */

          this.focusFirst = true;
          /**
           * A function used to format a given result before display. This function should return a formatted string without any
           * HTML markup
           */

          this.formatter = toString;
          /**
           * Event raised when user selects a particular result row
           */

          this.selectEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          this.activeChangeEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        }

        _createClass(NgbTypeaheadWindow, [{
          key: "hasActive",
          value: function hasActive() {
            return this.activeIdx > -1 && this.activeIdx < this.results.length;
          }
        }, {
          key: "getActive",
          value: function getActive() {
            return this.results[this.activeIdx];
          }
        }, {
          key: "markActive",
          value: function markActive(activeIdx) {
            this.activeIdx = activeIdx;

            this._activeChanged();
          }
        }, {
          key: "next",
          value: function next() {
            if (this.activeIdx === this.results.length - 1) {
              this.activeIdx = this.focusFirst ? (this.activeIdx + 1) % this.results.length : -1;
            } else {
              this.activeIdx++;
            }

            this._activeChanged();
          }
        }, {
          key: "prev",
          value: function prev() {
            if (this.activeIdx < 0) {
              this.activeIdx = this.results.length - 1;
            } else if (this.activeIdx === 0) {
              this.activeIdx = this.focusFirst ? this.results.length - 1 : -1;
            } else {
              this.activeIdx--;
            }

            this._activeChanged();
          }
        }, {
          key: "resetActive",
          value: function resetActive() {
            this.activeIdx = this.focusFirst ? 0 : -1;

            this._activeChanged();
          }
        }, {
          key: "select",
          value: function select(item) {
            this.selectEvent.emit(item);
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            this.resetActive();
          }
        }, {
          key: "_activeChanged",
          value: function _activeChanged() {
            this.activeChangeEvent.emit(this.activeIdx >= 0 ? this.id + '-' + this.activeIdx : undefined);
          }
        }]);

        return NgbTypeaheadWindow;
      }();

      NgbTypeaheadWindow.ɵfac = function NgbTypeaheadWindow_Factory(t) {
        return new (t || NgbTypeaheadWindow)();
      };

      NgbTypeaheadWindow.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: NgbTypeaheadWindow,
        selectors: [["ngb-typeahead-window"]],
        hostAttrs: ["role", "listbox", 1, "dropdown-menu", "show"],
        hostVars: 1,
        hostBindings: function NgbTypeaheadWindow_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("mousedown", function NgbTypeaheadWindow_mousedown_HostBindingHandler($event) {
              return $event.preventDefault();
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵhostProperty"]("id", ctx.id);
          }
        },
        inputs: {
          focusFirst: "focusFirst",
          formatter: "formatter",
          id: "id",
          results: "results",
          term: "term",
          resultTemplate: "resultTemplate"
        },
        outputs: {
          selectEvent: "select",
          activeChangeEvent: "activeChange"
        },
        exportAs: ["ngbTypeaheadWindow"],
        decls: 3,
        vars: 1,
        consts: [["rt", ""], ["ngFor", "", 3, "ngForOf"], [3, "result", "term"], ["type", "button", "role", "option", 1, "dropdown-item", 3, "id", "mouseenter", "click"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"]],
        template: function NgbTypeaheadWindow_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](0, NgbTypeaheadWindow_ng_template_0_Template, 1, 2, "ng-template", null, 0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplateRefExtractor"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](2, NgbTypeaheadWindow_ng_template_2_Template, 2, 9, "ng-template", 1);
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx.results);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["NgForOf"], NgbHighlight, _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgTemplateOutlet"]],
        encapsulation: 2
      });
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTypeaheadWindow.prototype, "id", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTypeaheadWindow.prototype, "focusFirst", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTypeaheadWindow.prototype, "results", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTypeaheadWindow.prototype, "term", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTypeaheadWindow.prototype, "formatter", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTypeaheadWindow.prototype, "resultTemplate", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])('select')], NgbTypeaheadWindow.prototype, "selectEvent", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])('activeChange')], NgbTypeaheadWindow.prototype, "activeChangeEvent", void 0);
      var ARIA_LIVE_DELAY = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('live announcer delay', {
        providedIn: 'root',
        factory: ARIA_LIVE_DELAY_FACTORY
      });

      function ARIA_LIVE_DELAY_FACTORY() {
        return 100;
      }

      function getLiveElement(document) {
        var lazyCreate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var element = document.body.querySelector('#ngb-live');

        if (element == null && lazyCreate) {
          element = document.createElement('div');
          element.setAttribute('id', 'ngb-live');
          element.setAttribute('aria-live', 'polite');
          element.setAttribute('aria-atomic', 'true');
          element.classList.add('sr-only');
          document.body.appendChild(element);
        }

        return element;
      }

      var Live = /*#__PURE__*/function () {
        function Live(_document, _delay) {
          _classCallCheck(this, Live);

          this._document = _document;
          this._delay = _delay;
        }

        _createClass(Live, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            var element = getLiveElement(this._document);

            if (element) {
              // if exists, it will always be attached to the <body>
              element.parentElement.removeChild(element);
            }
          }
        }, {
          key: "say",
          value: function say(message) {
            var element = getLiveElement(this._document, true);
            var delay = this._delay;

            if (element != null) {
              element.textContent = '';

              var setText = function setText() {
                return element.textContent = message;
              };

              if (delay === null) {
                setText();
              } else {
                setTimeout(setText, delay);
              }
            }
          }
        }]);

        return Live;
      }();

      Live.ɵfac = function Live_Factory(t) {
        return new (t || Live)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](ARIA_LIVE_DELAY));
      };

      Live.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [ARIA_LIVE_DELAY]
          }]
        }];
      };

      Live.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function Live_Factory() {
          return new Live(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(ARIA_LIVE_DELAY));
        },
        token: Live,
        providedIn: "root"
      });
      Live = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(0, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"])), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(1, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(ARIA_LIVE_DELAY))], Live);
      /**
       * A configuration service for the [`NgbTypeahead`](#/components/typeahead/api#NgbTypeahead) component.
       *
       * You can inject this service, typically in your root component, and customize the values of its properties in
       * order to provide default values for all the typeaheads used in the application.
       */

      var NgbTypeaheadConfig = function NgbTypeaheadConfig() {
        _classCallCheck(this, NgbTypeaheadConfig);

        this.editable = true;
        this.focusFirst = true;
        this.showHint = false;
        this.placement = ['bottom-left', 'bottom-right', 'top-left', 'top-right'];
      };

      NgbTypeaheadConfig.ɵfac = function NgbTypeaheadConfig_Factory(t) {
        return new (t || NgbTypeaheadConfig)();
      };

      NgbTypeaheadConfig.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function NgbTypeaheadConfig_Factory() {
          return new NgbTypeaheadConfig();
        },
        token: NgbTypeaheadConfig,
        providedIn: "root"
      });
      var NGB_TYPEAHEAD_VALUE_ACCESSOR = {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"],
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
          return NgbTypeahead;
        }),
        multi: true
      };
      var nextWindowId = 0;
      /**
       * A directive providing a simple way of creating powerful typeaheads from any text input.
       */

      var NgbTypeahead = /*#__PURE__*/function () {
        function NgbTypeahead(_elementRef, viewContainerRef, _renderer, injector, componentFactoryResolver, config, ngZone, _live, _document, _ngZone, _changeDetector, applicationRef) {
          var _this40 = this;

          _classCallCheck(this, NgbTypeahead);

          this._elementRef = _elementRef;
          this._renderer = _renderer;
          this._live = _live;
          this._document = _document;
          this._ngZone = _ngZone;
          this._changeDetector = _changeDetector;
          this._subscription = null;
          this._closed$ = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
          this._inputValueBackup = null;
          this._windowRef = null;
          /**
           * The value for the `autocomplete` attribute for the `<input>` element.
           *
           * Defaults to `"off"` to disable the native browser autocomplete, but you can override it if necessary.
           *
           * @since 2.1.0
           */

          this.autocomplete = 'off';
          /**
           * The preferred placement of the typeahead.
           *
           * Possible values are `"top"`, `"top-left"`, `"top-right"`, `"bottom"`, `"bottom-left"`,
           * `"bottom-right"`, `"left"`, `"left-top"`, `"left-bottom"`, `"right"`, `"right-top"`,
           * `"right-bottom"`
           *
           * Accepts an array of strings or a string with space separated possible values.
           *
           * The default order of preference is `"bottom-left bottom-right top-left top-right"`
           *
           * Please see the [positioning overview](#/positioning) for more details.
           */

          this.placement = 'bottom-left';
          /**
           * An event emitted right before an item is selected from the result list.
           *
           * Event payload is of type [`NgbTypeaheadSelectItemEvent`](#/components/typeahead/api#NgbTypeaheadSelectItemEvent).
           */

          this.selectItem = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          this.activeDescendant = null;
          this.popupId = "ngb-typeahead-".concat(nextWindowId++);

          this._onTouched = function () {};

          this._onChange = function (_) {};

          this.container = config.container;
          this.editable = config.editable;
          this.focusFirst = config.focusFirst;
          this.showHint = config.showHint;
          this.placement = config.placement;
          this._valueChanges = Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["fromEvent"])(_elementRef.nativeElement, 'input').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["map"])(function ($event) {
            return $event.target.value;
          }));
          this._resubscribeTypeahead = new rxjs__WEBPACK_IMPORTED_MODULE_4__["BehaviorSubject"](null);
          this._popupService = new PopupService(NgbTypeaheadWindow, injector, viewContainerRef, _renderer, componentFactoryResolver, applicationRef);
          this._zoneSubscription = ngZone.onStable.subscribe(function () {
            if (_this40.isPopupOpen()) {
              positionElements(_this40._elementRef.nativeElement, _this40._windowRef.location.nativeElement, _this40.placement, _this40.container === 'body');
            }
          });
        }

        _createClass(NgbTypeahead, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            var _this41 = this;

            var inputValues$ = this._valueChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["tap"])(function (value) {
              _this41._inputValueBackup = _this41.showHint ? value : null;

              _this41._onChange(_this41.editable ? value : undefined);
            }));

            var results$ = inputValues$.pipe(this.ngbTypeahead);

            var userInput$ = this._resubscribeTypeahead.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["switchMap"])(function () {
              return results$;
            }));

            this._subscription = this._subscribeToUserInput(userInput$);
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._closePopup();

            this._unsubscribeFromUserInput();

            this._zoneSubscription.unsubscribe();
          }
        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this._onChange = fn;
          }
        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this._onTouched = fn;
          }
        }, {
          key: "writeValue",
          value: function writeValue(value) {
            this._writeInputValue(this._formatItemForInput(value));

            if (this.showHint) {
              this._inputValueBackup = value;
            }
          }
        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
          }
          /**
           * Dismisses typeahead popup window
           */

        }, {
          key: "dismissPopup",
          value: function dismissPopup() {
            if (this.isPopupOpen()) {
              this._resubscribeTypeahead.next(null);

              this._closePopup();

              if (this.showHint && this._inputValueBackup !== null) {
                this._writeInputValue(this._inputValueBackup);
              }

              this._changeDetector.markForCheck();
            }
          }
          /**
           * Returns true if the typeahead popup window is displayed
           */

        }, {
          key: "isPopupOpen",
          value: function isPopupOpen() {
            return this._windowRef != null;
          }
        }, {
          key: "handleBlur",
          value: function handleBlur() {
            this._resubscribeTypeahead.next(null);

            this._onTouched();
          }
        }, {
          key: "handleKeyDown",
          value: function handleKeyDown(event) {
            if (!this.isPopupOpen()) {
              return;
            } // tslint:disable-next-line:deprecation


            switch (event.which) {
              case Key.ArrowDown:
                event.preventDefault();

                this._windowRef.instance.next();

                this._showHint();

                break;

              case Key.ArrowUp:
                event.preventDefault();

                this._windowRef.instance.prev();

                this._showHint();

                break;

              case Key.Enter:
              case Key.Tab:
                var result = this._windowRef.instance.getActive();

                if (isDefined(result)) {
                  event.preventDefault();
                  event.stopPropagation();

                  this._selectResult(result);
                }

                this._closePopup();

                break;
            }
          }
        }, {
          key: "_openPopup",
          value: function _openPopup() {
            var _this42 = this;

            if (!this.isPopupOpen()) {
              this._inputValueBackup = this._elementRef.nativeElement.value;
              this._windowRef = this._popupService.open();
              this._windowRef.instance.id = this.popupId;

              this._windowRef.instance.selectEvent.subscribe(function (result) {
                return _this42._selectResultClosePopup(result);
              });

              this._windowRef.instance.activeChangeEvent.subscribe(function (activeId) {
                return _this42.activeDescendant = activeId;
              });

              if (this.container === 'body') {
                this._document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);
              }

              this._changeDetector.markForCheck();

              ngbAutoClose(this._ngZone, this._document, 'outside', function () {
                return _this42.dismissPopup();
              }, this._closed$, [this._elementRef.nativeElement, this._windowRef.location.nativeElement]);
            }
          }
        }, {
          key: "_closePopup",
          value: function _closePopup() {
            this._closed$.next();

            this._popupService.close();

            this._windowRef = null;
            this.activeDescendant = null;
          }
        }, {
          key: "_selectResult",
          value: function _selectResult(result) {
            var defaultPrevented = false;
            this.selectItem.emit({
              item: result,
              preventDefault: function preventDefault() {
                defaultPrevented = true;
              }
            });

            this._resubscribeTypeahead.next(null);

            if (!defaultPrevented) {
              this.writeValue(result);

              this._onChange(result);
            }
          }
        }, {
          key: "_selectResultClosePopup",
          value: function _selectResultClosePopup(result) {
            this._selectResult(result);

            this._closePopup();
          }
        }, {
          key: "_showHint",
          value: function _showHint() {
            var _a;

            if (this.showHint && ((_a = this._windowRef) === null || _a === void 0 ? void 0 : _a.instance.hasActive()) && this._inputValueBackup != null) {
              var userInputLowerCase = this._inputValueBackup.toLowerCase();

              var formattedVal = this._formatItemForInput(this._windowRef.instance.getActive());

              if (userInputLowerCase === formattedVal.substr(0, this._inputValueBackup.length).toLowerCase()) {
                this._writeInputValue(this._inputValueBackup + formattedVal.substr(this._inputValueBackup.length));

                this._elementRef.nativeElement['setSelectionRange'].apply(this._elementRef.nativeElement, [this._inputValueBackup.length, formattedVal.length]);
              } else {
                this._writeInputValue(formattedVal);
              }
            }
          }
        }, {
          key: "_formatItemForInput",
          value: function _formatItemForInput(item) {
            return item != null && this.inputFormatter ? this.inputFormatter(item) : toString(item);
          }
        }, {
          key: "_writeInputValue",
          value: function _writeInputValue(value) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'value', toString(value));
          }
        }, {
          key: "_subscribeToUserInput",
          value: function _subscribeToUserInput(userInput$) {
            var _this43 = this;

            return userInput$.subscribe(function (results) {
              if (!results || results.length === 0) {
                _this43._closePopup();
              } else {
                _this43._openPopup();

                _this43._windowRef.instance.focusFirst = _this43.focusFirst;
                _this43._windowRef.instance.results = results;
                _this43._windowRef.instance.term = _this43._elementRef.nativeElement.value;

                if (_this43.resultFormatter) {
                  _this43._windowRef.instance.formatter = _this43.resultFormatter;
                }

                if (_this43.resultTemplate) {
                  _this43._windowRef.instance.resultTemplate = _this43.resultTemplate;
                }

                _this43._windowRef.instance.resetActive(); // The observable stream we are subscribing to might have async steps
                // and if a component containing typeahead is using the OnPush strategy
                // the change detection turn wouldn't be invoked automatically.


                _this43._windowRef.changeDetectorRef.detectChanges();

                _this43._showHint();
              } // live announcer


              var count = results ? results.length : 0;

              _this43._live.say(count === 0 ? 'No results available' : "".concat(count, " result").concat(count === 1 ? '' : 's', " available"));
            });
          }
        }, {
          key: "_unsubscribeFromUserInput",
          value: function _unsubscribeFromUserInput() {
            if (this._subscription) {
              this._subscription.unsubscribe();
            }

            this._subscription = null;
          }
        }]);

        return NgbTypeahead;
      }();

      NgbTypeahead.ɵfac = function NgbTypeahead_Factory(t) {
        return new (t || NgbTypeahead)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ComponentFactoryResolver"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](NgbTypeaheadConfig), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](Live), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"]));
      };

      NgbTypeahead.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: NgbTypeahead,
        selectors: [["input", "ngbTypeahead", ""]],
        hostAttrs: ["autocapitalize", "off", "autocorrect", "off", "role", "combobox", "aria-multiline", "false"],
        hostVars: 7,
        hostBindings: function NgbTypeahead_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("blur", function NgbTypeahead_blur_HostBindingHandler() {
              return ctx.handleBlur();
            })("keydown", function NgbTypeahead_keydown_HostBindingHandler($event) {
              return ctx.handleKeyDown($event);
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵhostProperty"]("autocomplete", ctx.autocomplete);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("aria-autocomplete", ctx.showHint ? "both" : "list")("aria-activedescendant", ctx.activeDescendant)("aria-owns", ctx.isPopupOpen() ? ctx.popupId : null)("aria-expanded", ctx.isPopupOpen());

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("open", ctx.isPopupOpen());
          }
        },
        inputs: {
          autocomplete: "autocomplete",
          placement: "placement",
          container: "container",
          editable: "editable",
          focusFirst: "focusFirst",
          showHint: "showHint",
          inputFormatter: "inputFormatter",
          ngbTypeahead: "ngbTypeahead",
          resultFormatter: "resultFormatter",
          resultTemplate: "resultTemplate"
        },
        outputs: {
          selectItem: "selectItem"
        },
        exportAs: ["ngbTypeahead"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵProvidersFeature"]([NGB_TYPEAHEAD_VALUE_ACCESSOR])]
      });

      NgbTypeahead.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ComponentFactoryResolver"]
        }, {
          type: NgbTypeaheadConfig
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
        }, {
          type: Live
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"]
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTypeahead.prototype, "autocomplete", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTypeahead.prototype, "container", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTypeahead.prototype, "editable", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTypeahead.prototype, "focusFirst", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTypeahead.prototype, "inputFormatter", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTypeahead.prototype, "ngbTypeahead", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTypeahead.prototype, "resultFormatter", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTypeahead.prototype, "resultTemplate", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTypeahead.prototype, "showHint", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()], NgbTypeahead.prototype, "placement", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()], NgbTypeahead.prototype, "selectItem", void 0);
      NgbTypeahead = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(8, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]))], NgbTypeahead);

      var NgbTypeaheadModule = function NgbTypeaheadModule() {
        _classCallCheck(this, NgbTypeaheadModule);
      };

      NgbTypeaheadModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: NgbTypeaheadModule
      });
      NgbTypeaheadModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function NgbTypeaheadModule_Factory(t) {
          return new (t || NgbTypeaheadModule)();
        },
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]]]
      });
      var NGB_MODULES = [NgbAccordionModule, NgbAlertModule, NgbButtonsModule, NgbCarouselModule, NgbCollapseModule, NgbDatepickerModule, NgbDropdownModule, NgbModalModule, NgbNavModule, NgbPaginationModule, NgbPopoverModule, NgbProgressbarModule, NgbRatingModule, NgbTimepickerModule, NgbToastModule, NgbTooltipModule, NgbTypeaheadModule, // tslint:disable-next-line:deprecation
      NgbTabsetModule];

      var NgbModule = function NgbModule() {
        _classCallCheck(this, NgbModule);
      };

      NgbModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: NgbModule
      });
      NgbModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function NgbModule_Factory(t) {
          return new (t || NgbModule)();
        },
        imports: [NGB_MODULES, NgbAccordionModule, NgbAlertModule, NgbButtonsModule, NgbCarouselModule, NgbCollapseModule, NgbDatepickerModule, NgbDropdownModule, NgbModalModule, NgbNavModule, NgbPaginationModule, NgbPopoverModule, NgbProgressbarModule, NgbRatingModule, NgbTimepickerModule, NgbToastModule, NgbTooltipModule, NgbTypeaheadModule, NgbTabsetModule]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbAccordionConfig, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbPanelHeader, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: 'ng-template[ngbPanelHeader]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
          }];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbPanelTitle, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: 'ng-template[ngbPanelTitle]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
          }];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbPanelContent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: 'ng-template[ngbPanelContent]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
          }];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbPanel, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: 'ngb-panel'
          }]
        }], function () {
          return [];
        }, {
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          id: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          title: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          type: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          cardClass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          titleTpls: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
            args: [NgbPanelTitle, {
              descendants: false
            }]
          }],
          headerTpls: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
            args: [NgbPanelHeader, {
              descendants: false
            }]
          }],
          contentTpls: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
            args: [NgbPanelContent, {
              descendants: false
            }]
          }]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbAccordion, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
          args: [{
            selector: 'ngb-accordion',
            exportAs: 'ngbAccordion',
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
            host: {
              'class': 'accordion',
              'role': 'tablist',
              '[attr.aria-multiselectable]': '!closeOtherPanels'
            },
            template: "\n    <ng-template #t ngbPanelHeader let-panel>\n      <button class=\"btn btn-link\" [ngbPanelToggle]=\"panel\">\n        {{panel.title}}<ng-template [ngTemplateOutlet]=\"panel.titleTpl?.templateRef\"></ng-template>\n      </button>\n    </ng-template>\n    <ng-template ngFor let-panel [ngForOf]=\"panels\">\n      <div [class]=\"'card ' + (panel.cardClass || '')\">\n        <div role=\"tab\" id=\"{{panel.id}}-header\" [class]=\"'card-header ' + (panel.type ? 'bg-'+panel.type: type ? 'bg-'+type : '')\">\n          <ng-template [ngTemplateOutlet]=\"panel.headerTpl?.templateRef || t\"\n                       [ngTemplateOutletContext]=\"{$implicit: panel, opened: panel.isOpen}\"></ng-template>\n        </div>\n        <div id=\"{{panel.id}}\" role=\"tabpanel\" [attr.aria-labelledby]=\"panel.id + '-header'\"\n             class=\"collapse\" [class.show]=\"panel.isOpen\" *ngIf=\"!destroyOnHide || panel.isOpen\">\n          <div class=\"card-body\">\n               <ng-template [ngTemplateOutlet]=\"panel.contentTpl?.templateRef || null\"></ng-template>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n  "
          }]
        }], function () {
          return [{
            type: NgbAccordionConfig
          }];
        }, {
          activeIds: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          destroyOnHide: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          panelChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          type: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          closeOtherPanels: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
            args: ['closeOthers']
          }],
          panels: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
            args: [NgbPanel]
          }]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbPanelToggle, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: 'button[ngbPanelToggle]',
            host: {
              'type': 'button',
              '[disabled]': 'panel.disabled',
              '[class.collapsed]': '!panel.isOpen',
              '[attr.aria-expanded]': 'panel.isOpen',
              '[attr.aria-controls]': 'panel.id',
              '(click)': 'accordion.toggle(panel.id)'
            }
          }]
        }], function () {
          return [{
            type: NgbAccordion
          }, {
            type: NgbPanel,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Host"]
            }]
          }];
        }, {
          ngbPanelToggle: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](NgbAccordionModule, {
          declarations: function declarations() {
            return [NgbAccordion, NgbPanel, NgbPanelTitle, NgbPanelContent, NgbPanelHeader, NgbPanelToggle];
          },
          imports: function imports() {
            return [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]];
          },
          exports: function exports() {
            return [NgbAccordion, NgbPanel, NgbPanelTitle, NgbPanelContent, NgbPanelHeader, NgbPanelToggle];
          }
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbAccordionModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            declarations: NGB_ACCORDION_DIRECTIVES,
            exports: NGB_ACCORDION_DIRECTIVES,
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]]
          }]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbAlertConfig, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbAlert, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
          args: [{
            selector: 'ngb-alert',
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
            host: {
              'role': 'alert',
              'class': 'alert',
              '[class.alert-dismissible]': 'dismissible'
            },
            template: "\n    <ng-content></ng-content>\n    <button *ngIf=\"dismissible\" type=\"button\" class=\"close\" aria-label=\"Close\" i18n-aria-label=\"@@ngb.alert.close\"\n      (click)=\"closeHandler()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n    ",
            styles: ["ngb-alert{display:block}"]
          }]
        }], function () {
          return [{
            type: NgbAlertConfig
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
          }];
        }, {
          close: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          dismissible: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          type: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](NgbAlertModule, {
          declarations: function declarations() {
            return [NgbAlert];
          },
          imports: function imports() {
            return [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]];
          },
          exports: function exports() {
            return [NgbAlert];
          }
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbAlertModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            declarations: [NgbAlert],
            exports: [NgbAlert],
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]],
            entryComponents: [NgbAlert]
          }]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbButtonLabel, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: '[ngbButtonLabel]',
            host: {
              '[class.btn]': 'true',
              '[class.active]': 'active',
              '[class.disabled]': 'disabled',
              '[class.focus]': 'focused'
            }
          }]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbCheckBox, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: '[ngbButton][type=checkbox]',
            host: {
              '[checked]': 'checked',
              '[disabled]': 'disabled',
              '(change)': 'onInputChange($event)',
              '(focus)': 'focused = true',
              '(blur)': 'focused = false'
            },
            providers: [NGB_CHECKBOX_VALUE_ACCESSOR]
          }]
        }], function () {
          return [{
            type: NgbButtonLabel
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
          }];
        }, {
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          valueChecked: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          valueUnChecked: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbRadioGroup, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: '[ngbRadioGroup]',
            host: {
              'role': 'radiogroup'
            },
            providers: [NGB_RADIO_VALUE_ACCESSOR]
          }]
        }], function () {
          return [];
        }, {
          name: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbRadio, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: '[ngbButton][type=radio]',
            host: {
              '[checked]': 'checked',
              '[disabled]': 'disabled',
              '[name]': 'nameAttr',
              '(change)': 'onChange()',
              '(focus)': 'focused = true',
              '(blur)': 'focused = false'
            }
          }]
        }], function () {
          return [{
            type: NgbRadioGroup
          }, {
            type: NgbButtonLabel
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
          }];
        }, {
          value: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
            args: ['value']
          }],
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
            args: ['disabled']
          }],
          name: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](NgbButtonsModule, {
          declarations: [NgbButtonLabel, NgbCheckBox, NgbRadioGroup, NgbRadio],
          exports: [NgbButtonLabel, NgbCheckBox, NgbRadioGroup, NgbRadio]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbButtonsModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            declarations: NGB_BUTTON_DIRECTIVES,
            exports: NGB_BUTTON_DIRECTIVES
          }]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbCarouselConfig, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbSlide, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: 'ng-template[ngbSlide]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
          }];
        }, {
          id: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbCarousel, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
          args: [{
            selector: 'ngb-carousel',
            exportAs: 'ngbCarousel',
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
            host: {
              'class': 'carousel slide',
              '[style.display]': '"block"',
              'tabIndex': '0',
              '(keydown.arrowLeft)': 'keyboard && prev(NgbSlideEventSource.ARROW_LEFT)',
              '(keydown.arrowRight)': 'keyboard && next(NgbSlideEventSource.ARROW_RIGHT)'
            },
            template: "\n    <ol class=\"carousel-indicators\" *ngIf=\"showNavigationIndicators\">\n      <li *ngFor=\"let slide of slides\" [id]=\"slide.id\" [class.active]=\"slide.id === activeId\"\n          (click)=\"select(slide.id, NgbSlideEventSource.INDICATOR)\"></li>\n    </ol>\n    <div class=\"carousel-inner\">\n      <div *ngFor=\"let slide of slides\" class=\"carousel-item\" [class.active]=\"slide.id === activeId\">\n        <ng-template [ngTemplateOutlet]=\"slide.tplRef\"></ng-template>\n      </div>\n    </div>\n    <a class=\"carousel-control-prev\" role=\"button\" (click)=\"prev(NgbSlideEventSource.ARROW_LEFT)\" *ngIf=\"showNavigationArrows\">\n      <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\n      <span class=\"sr-only\" i18n=\"@@ngb.carousel.previous\">Previous</span>\n    </a>\n    <a class=\"carousel-control-next\" role=\"button\" (click)=\"next(NgbSlideEventSource.ARROW_RIGHT)\" *ngIf=\"showNavigationArrows\">\n      <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\n      <span class=\"sr-only\" i18n=\"@@ngb.carousel.next\">Next</span>\n    </a>\n  "
          }]
        }], function () {
          return [{
            type: NgbCarouselConfig
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["PLATFORM_ID"]]
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
          }];
        }, {
          slide: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          interval: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          wrap: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          keyboard: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          pauseOnHover: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          showNavigationArrows: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          showNavigationIndicators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          mouseEnter: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["HostListener"],
            args: ['mouseenter']
          }],
          mouseLeave: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["HostListener"],
            args: ['mouseleave']
          }],
          activeId: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          slides: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
            args: [NgbSlide]
          }]
        });
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](NgbCarouselModule, {
          declarations: function declarations() {
            return [NgbCarousel, NgbSlide];
          },
          imports: function imports() {
            return [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]];
          },
          exports: function exports() {
            return [NgbCarousel, NgbSlide];
          }
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbCarouselModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            declarations: NGB_CAROUSEL_DIRECTIVES,
            exports: NGB_CAROUSEL_DIRECTIVES,
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]]
          }]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbCollapse, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: '[ngbCollapse]',
            exportAs: 'ngbCollapse',
            host: {
              '[class.collapse]': 'true',
              '[class.show]': '!collapsed'
            }
          }]
        }], function () {
          return [];
        }, {
          collapsed: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
            args: ['ngbCollapse']
          }]
        });
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](NgbCollapseModule, {
          declarations: [NgbCollapse],
          exports: [NgbCollapse]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbCollapseModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            declarations: [NgbCollapse],
            exports: [NgbCollapse]
          }]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbCalendar, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root',
            useFactory: NGB_DATEPICKER_CALENDAR_FACTORY
          }]
        }], null, null);
      })();

      var ɵNgbCalendarGregorian_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetInheritedFactory"](NgbCalendarGregorian);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbCalendarGregorian, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDatepickerI18n, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root',
            useFactory: NGB_DATEPICKER_18N_FACTORY,
            deps: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["LOCALE_ID"]]
          }]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDatepickerI18nDefault, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], function () {
          return [{
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["LOCALE_ID"]]
            }]
          }];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDatepickerService, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], function () {
          return [{
            type: NgbCalendar
          }, {
            type: NgbDatepickerI18n
          }];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDatepickerConfig, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDateAdapter, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root',
            useFactory: NGB_DATEPICKER_DATE_ADAPTER_FACTORY
          }]
        }], null, null);
      })();

      var ɵNgbDateStructAdapter_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetInheritedFactory"](NgbDateStructAdapter);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDateStructAdapter, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDatepickerContent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: 'ng-template[ngbDatepickerContent]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
          }];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDatepicker, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
          args: [{
            exportAs: 'ngbDatepicker',
            selector: 'ngb-datepicker',
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
            template: "\n    <ng-template #defaultDayTemplate let-date=\"date\" let-currentMonth=\"currentMonth\" let-selected=\"selected\"\n                 let-disabled=\"disabled\" let-focused=\"focused\">\n      <div ngbDatepickerDayView\n        [date]=\"date\"\n        [currentMonth]=\"currentMonth\"\n        [selected]=\"selected\"\n        [disabled]=\"disabled\"\n        [focused]=\"focused\">\n      </div>\n    </ng-template>\n\n    <ng-template #defaultContentTemplate>\n      <div *ngFor=\"let month of model.months; let i = index;\" class=\"ngb-dp-month\">\n        <div *ngIf=\"navigation === 'none' || (displayMonths > 1 && navigation === 'select')\" class=\"ngb-dp-month-name\">\n          {{ i18n.getMonthFullName(month.number, month.year) }} {{ i18n.getYearNumerals(month.year) }}\n        </div>\n        <ngb-datepicker-month [month]=\"month.firstDate\"></ngb-datepicker-month>\n      </div>\n    </ng-template>\n\n    <div class=\"ngb-dp-header\">\n      <ngb-datepicker-navigation *ngIf=\"navigation !== 'none'\"\n        [date]=\"model.firstDate!\"\n        [months]=\"model.months\"\n        [disabled]=\"model.disabled\"\n        [showSelect]=\"model.navigation === 'select'\"\n        [prevDisabled]=\"model.prevDisabled\"\n        [nextDisabled]=\"model.nextDisabled\"\n        [selectBoxes]=\"model.selectBoxes\"\n        (navigate)=\"onNavigateEvent($event)\"\n        (select)=\"onNavigateDateSelect($event)\">\n      </ngb-datepicker-navigation>\n    </div>\n\n    <div class=\"ngb-dp-content\" [class.ngb-dp-months]=\"!contentTemplate\" #content>\n      <ng-template [ngTemplateOutlet]=\"contentTemplate?.templateRef || defaultContentTemplate\"></ng-template>\n    </div>\n\n    <ng-template [ngTemplateOutlet]=\"footerTemplate\"></ng-template>\n  ",
            providers: [NGB_DATEPICKER_VALUE_ACCESSOR, NgbDatepickerService],
            styles: ["ngb-datepicker{border:1px solid #dfdfdf;border-radius:.25rem;display:inline-block}ngb-datepicker-month{pointer-events:auto}ngb-datepicker.dropdown-menu{padding:0}.ngb-dp-body{z-index:1050}.ngb-dp-header{border-bottom:0;border-radius:.25rem .25rem 0 0;padding-top:.25rem;background-color:#f8f9fa;background-color:var(--light)}.ngb-dp-months{display:-ms-flexbox;display:flex}.ngb-dp-month{pointer-events:none}.ngb-dp-month-name{font-size:larger;height:2rem;line-height:2rem;text-align:center;background-color:#f8f9fa;background-color:var(--light)}.ngb-dp-month+.ngb-dp-month .ngb-dp-month-name,.ngb-dp-month+.ngb-dp-month .ngb-dp-week{padding-left:1rem}.ngb-dp-month:last-child .ngb-dp-week{padding-right:.25rem}.ngb-dp-month:first-child .ngb-dp-week{padding-left:.25rem}.ngb-dp-month .ngb-dp-week:last-child{padding-bottom:.25rem}"]
          }]
        }], function () {
          return [{
            type: NgbDatepickerService
          }, {
            type: NgbCalendar
          }, {
            type: NgbDatepickerI18n
          }, {
            type: NgbDatepickerConfig
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
          }, {
            type: NgbDateAdapter
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
          }];
        }, {
          navigate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          dateSelect: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          select: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          dayTemplate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          _defaultDayTemplate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"],
            args: ['defaultDayTemplate', {
              "static": true
            }]
          }],
          _contentEl: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"],
            args: ['content', {
              "static": true
            }]
          }],
          contentTemplate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"],
            args: [NgbDatepickerContent, {
              "static": true
            }]
          }],
          dayTemplateData: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          displayMonths: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          firstDayOfWeek: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          footerTemplate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          markDisabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          maxDate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          minDate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          navigation: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          outsideDays: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          showWeekdays: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          showWeekNumbers: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          startDate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDatepickerKeyboardService, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDatepickerMonth, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
          args: [{
            selector: 'ngb-datepicker-month',
            host: {
              'role': 'grid',
              '(keydown)': 'onKeyDown($event)'
            },
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
            template: "\n    <div *ngIf=\"datepicker.showWeekdays\" class=\"ngb-dp-week ngb-dp-weekdays\" role=\"row\">\n      <div *ngIf=\"datepicker.showWeekNumbers\" class=\"ngb-dp-weekday ngb-dp-showweek\"></div>\n      <div *ngFor=\"let w of viewModel.weekdays\" class=\"ngb-dp-weekday small\" role=\"columnheader\">\n        {{ i18n.getWeekdayShortName(w) }}\n      </div>\n    </div>\n    <ng-template ngFor let-week [ngForOf]=\"viewModel.weeks\">\n      <div *ngIf=\"!week.collapsed\" class=\"ngb-dp-week\" role=\"row\">\n        <div *ngIf=\"datepicker.showWeekNumbers\" class=\"ngb-dp-week-number small text-muted\">{{ i18n.getWeekNumerals(week.number) }}</div>\n        <div *ngFor=\"let day of week.days\" (click)=\"doSelect(day); $event.preventDefault()\" class=\"ngb-dp-day\" role=\"gridcell\"\n          [class.disabled]=\"day.context.disabled\"\n          [tabindex]=\"day.tabindex\"\n          [class.hidden]=\"day.hidden\"\n          [class.ngb-dp-today]=\"day.context.today\"\n          [attr.aria-label]=\"day.ariaLabel\">\n          <ng-template [ngIf]=\"!day.hidden\">\n            <ng-template [ngTemplateOutlet]=\"datepicker.dayTemplate\" [ngTemplateOutletContext]=\"day.context\"></ng-template>\n          </ng-template>\n        </div>\n      </div>\n    </ng-template>\n  ",
            styles: ["ngb-datepicker-month{display:block}.ngb-dp-week-number,.ngb-dp-weekday{line-height:2rem;text-align:center;font-style:italic}.ngb-dp-weekday{color:#5bc0de;color:var(--info)}.ngb-dp-week{border-radius:.25rem;display:-ms-flexbox;display:flex}.ngb-dp-weekdays{border-bottom:1px solid rgba(0,0,0,.125);border-radius:0;background-color:#f8f9fa;background-color:var(--light)}.ngb-dp-day,.ngb-dp-week-number,.ngb-dp-weekday{width:2rem;height:2rem}.ngb-dp-day{cursor:pointer}.ngb-dp-day.disabled,.ngb-dp-day.hidden{cursor:default;pointer-events:none}.ngb-dp-day[tabindex=\"0\"]{z-index:1}"]
          }]
        }], function () {
          return [{
            type: NgbDatepickerI18n
          }, {
            type: NgbDatepicker
          }, {
            type: NgbDatepickerKeyboardService
          }, {
            type: NgbDatepickerService
          }];
        }, {
          month: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDatepickerNavigation, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
          args: [{
            selector: 'ngb-datepicker-navigation',
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
            template: "\n    <div class=\"ngb-dp-arrow\">\n      <button type=\"button\" class=\"btn btn-link ngb-dp-arrow-btn\" (click)=\"onClickPrev($event)\" [disabled]=\"prevDisabled\"\n              i18n-aria-label=\"@@ngb.datepicker.previous-month\" aria-label=\"Previous month\"\n              i18n-title=\"@@ngb.datepicker.previous-month\" title=\"Previous month\">\n        <span class=\"ngb-dp-navigation-chevron\"></span>\n      </button>\n    </div>\n    <ngb-datepicker-navigation-select *ngIf=\"showSelect\" class=\"ngb-dp-navigation-select\"\n      [date]=\"date\"\n      [disabled] = \"disabled\"\n      [months]=\"selectBoxes.months\"\n      [years]=\"selectBoxes.years\"\n      (select)=\"select.emit($event)\">\n    </ngb-datepicker-navigation-select>\n\n    <ng-template *ngIf=\"!showSelect\" ngFor let-month [ngForOf]=\"months\" let-i=\"index\">\n      <div class=\"ngb-dp-arrow\" *ngIf=\"i > 0\"></div>\n      <div class=\"ngb-dp-month-name\">\n        {{ i18n.getMonthFullName(month.number, month.year) }} {{ i18n.getYearNumerals(month.year) }}\n      </div>\n      <div class=\"ngb-dp-arrow\" *ngIf=\"i !== months.length - 1\"></div>\n    </ng-template>\n    <div class=\"ngb-dp-arrow right\">\n      <button type=\"button\" class=\"btn btn-link ngb-dp-arrow-btn\" (click)=\"onClickNext($event)\" [disabled]=\"nextDisabled\"\n              i18n-aria-label=\"@@ngb.datepicker.next-month\" aria-label=\"Next month\"\n              i18n-title=\"@@ngb.datepicker.next-month\" title=\"Next month\">\n        <span class=\"ngb-dp-navigation-chevron\"></span>\n      </button>\n    </div>\n    ",
            styles: ["ngb-datepicker-navigation{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.ngb-dp-navigation-chevron{border-style:solid;border-width:.2em .2em 0 0;display:inline-block;width:.75em;height:.75em;margin-left:.25em;margin-right:.15em;-webkit-transform:rotate(-135deg);transform:rotate(-135deg)}.right .ngb-dp-navigation-chevron{-webkit-transform:rotate(45deg);transform:rotate(45deg);margin-left:.15em;margin-right:.25em}.ngb-dp-arrow{display:-ms-flexbox;display:flex;-ms-flex:1 1 auto;flex:1 1 auto;padding-right:0;padding-left:0;margin:0;width:2rem;height:2rem}.ngb-dp-arrow.right{-ms-flex-pack:end;justify-content:flex-end}.ngb-dp-arrow-btn{padding:0 .25rem;margin:0 .5rem;border:none;background-color:transparent;z-index:1}.ngb-dp-arrow-btn:focus{outline-width:1px;outline-style:auto}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.ngb-dp-arrow-btn:focus{outline-style:solid}}.ngb-dp-month-name{font-size:larger;height:2rem;line-height:2rem;text-align:center}.ngb-dp-navigation-select{display:-ms-flexbox;display:flex;-ms-flex:1 1 9rem;flex:1 1 9rem}"]
          }]
        }], function () {
          return [{
            type: NgbDatepickerI18n
          }];
        }, {
          months: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          navigate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          select: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          date: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          showSelect: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          prevDisabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          nextDisabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          selectBoxes: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDateParserFormatter, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root',
            useFactory: NGB_DATEPICKER_PARSER_FORMATTER_FACTORY
          }]
        }], null, null);
      })();

      var ɵNgbDateISOParserFormatter_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetInheritedFactory"](NgbDateISOParserFormatter);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDateISOParserFormatter, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], null, null);
      })();

      var ɵNgbInputDatepickerConfig_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetInheritedFactory"](NgbInputDatepickerConfig);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbInputDatepickerConfig, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbInputDatepicker, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: 'input[ngbDatepicker]',
            exportAs: 'ngbDatepicker',
            host: {
              '(input)': 'manualDateChange($event.target.value)',
              '(change)': 'manualDateChange($event.target.value, true)',
              '(focus)': 'onFocus()',
              '(blur)': 'onBlur()',
              '[disabled]': 'disabled'
            },
            providers: [NGB_DATEPICKER_VALUE_ACCESSOR$1, NGB_DATEPICKER_VALIDATOR, {
              provide: NgbDatepickerConfig,
              useExisting: NgbInputDatepickerConfig
            }]
          }]
        }], function () {
          return [{
            type: NgbDateParserFormatter
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ComponentFactoryResolver"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
          }, {
            type: NgbCalendar
          }, {
            type: NgbDateAdapter
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
          }, {
            type: NgbInputDatepickerConfig
          }];
        }, {
          dateSelect: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          navigate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          closed: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          autoClose: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          dayTemplate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          dayTemplateData: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          displayMonths: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          firstDayOfWeek: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          footerTemplate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          markDisabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          minDate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          maxDate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          navigation: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          outsideDays: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          placement: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          restoreFocus: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          showWeekdays: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          showWeekNumbers: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          startDate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          container: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          positionTarget: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDatepickerDayView, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
          args: [{
            selector: '[ngbDatepickerDayView]',
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
            host: {
              'class': 'btn-light',
              '[class.bg-primary]': 'selected',
              '[class.text-white]': 'selected',
              '[class.text-muted]': 'isMuted()',
              '[class.outside]': 'isMuted()',
              '[class.active]': 'focused'
            },
            template: "{{ i18n.getDayNumerals(date) }}",
            styles: ["[ngbDatepickerDayView]{text-align:center;width:2rem;height:2rem;line-height:2rem;border-radius:.25rem;background:0 0}[ngbDatepickerDayView].outside{opacity:.5}"]
          }]
        }], function () {
          return [{
            type: NgbDatepickerI18n
          }];
        }, {
          currentMonth: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          date: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          focused: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          selected: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDatepickerNavigationSelect, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
          args: [{
            selector: 'ngb-datepicker-navigation-select',
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
            template: "\n    <select #month\n      [disabled]=\"disabled\"\n      class=\"custom-select\"\n      i18n-aria-label=\"@@ngb.datepicker.select-month\" aria-label=\"Select month\"\n      i18n-title=\"@@ngb.datepicker.select-month\" title=\"Select month\"\n      (change)=\"changeMonth($any($event).target.value)\">\n        <option *ngFor=\"let m of months\" [attr.aria-label]=\"i18n.getMonthFullName(m, date?.year)\"\n                [value]=\"m\">{{ i18n.getMonthShortName(m, date?.year) }}</option>\n    </select><select #year\n      [disabled]=\"disabled\"\n      class=\"custom-select\"\n      i18n-aria-label=\"@@ngb.datepicker.select-year\" aria-label=\"Select year\"\n      i18n-title=\"@@ngb.datepicker.select-year\" title=\"Select year\"\n      (change)=\"changeYear($any($event).target.value)\">\n        <option *ngFor=\"let y of years\" [value]=\"y\">{{ i18n.getYearNumerals(y) }}</option>\n    </select>\n  ",
            styles: ["ngb-datepicker-navigation-select>.custom-select{-ms-flex:1 1 auto;flex:1 1 auto;padding:0 .5rem;font-size:.875rem;height:1.85rem}ngb-datepicker-navigation-select>.custom-select:focus{z-index:1}ngb-datepicker-navigation-select>.custom-select::-ms-value{background-color:transparent!important}"]
          }]
        }], function () {
          return [{
            type: NgbDatepickerI18n
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]
          }];
        }, {
          select: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          date: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          months: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          years: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          monthSelect: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"],
            args: ['month', {
              "static": true,
              read: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
            }]
          }],
          yearSelect: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"],
            args: ['year', {
              "static": true,
              read: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
            }]
          }]
        });
      })();

      var ɵNgbCalendarHijri_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetInheritedFactory"](NgbCalendarHijri);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbCalendarHijri, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], null, null);
      })();

      var ɵNgbCalendarIslamicCivil_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetInheritedFactory"](NgbCalendarIslamicCivil);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbCalendarIslamicCivil, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], null, null);
      })();

      var ɵNgbCalendarIslamicUmalqura_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetInheritedFactory"](NgbCalendarIslamicUmalqura);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbCalendarIslamicUmalqura, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], null, null);
      })();

      var ɵNgbCalendarPersian_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetInheritedFactory"](NgbCalendarPersian);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbCalendarPersian, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], null, null);
      })();

      var ɵNgbCalendarHebrew_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetInheritedFactory"](NgbCalendarHebrew);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbCalendarHebrew, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], null, null);
      })();

      var ɵNgbDatepickerI18nHebrew_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetInheritedFactory"](NgbDatepickerI18nHebrew);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDatepickerI18nHebrew, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], null, null);
      })();

      var ɵNgbDateNativeAdapter_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetInheritedFactory"](NgbDateNativeAdapter);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDateNativeAdapter, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], null, null);
      })();

      var ɵNgbDateNativeUTCAdapter_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetInheritedFactory"](NgbDateNativeUTCAdapter);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDateNativeUTCAdapter, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](NgbDatepickerModule, {
          declarations: function declarations() {
            return [NgbDatepicker, NgbDatepickerContent, NgbDatepickerMonth, NgbDatepickerNavigation, NgbDatepickerNavigationSelect, NgbDatepickerDayView, NgbInputDatepicker];
          },
          imports: function imports() {
            return [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"]];
          },
          exports: function exports() {
            return [NgbDatepicker, NgbDatepickerContent, NgbInputDatepicker, NgbDatepickerMonth];
          }
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDatepickerModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            declarations: [NgbDatepicker, NgbDatepickerContent, NgbDatepickerMonth, NgbDatepickerNavigation, NgbDatepickerNavigationSelect, NgbDatepickerDayView, NgbInputDatepicker],
            exports: [NgbDatepicker, NgbDatepickerContent, NgbInputDatepicker, NgbDatepickerMonth],
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"]],
            entryComponents: [NgbDatepicker]
          }]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDropdownConfig, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbNavbar, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: '.navbar'
          }]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDropdownItem, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: '[ngbDropdownItem]',
            host: {
              'class': 'dropdown-item',
              '[class.disabled]': 'disabled'
            }
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
          }];
        }, {
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDropdownMenu, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: '[ngbDropdownMenu]',
            host: {
              '[class.dropdown-menu]': 'true',
              '[class.show]': 'dropdown.isOpen()',
              '[attr.x-placement]': 'placement',
              '(keydown.ArrowUp)': 'dropdown.onKeyDown($event)',
              '(keydown.ArrowDown)': 'dropdown.onKeyDown($event)',
              '(keydown.Home)': 'dropdown.onKeyDown($event)',
              '(keydown.End)': 'dropdown.onKeyDown($event)',
              '(keydown.Enter)': 'dropdown.onKeyDown($event)',
              '(keydown.Space)': 'dropdown.onKeyDown($event)',
              '(keydown.Tab)': 'dropdown.onKeyDown($event)',
              '(keydown.Shift.Tab)': 'dropdown.onKeyDown($event)'
            }
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
                return NgbDropdown;
              })]
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
          }];
        }, {
          menuItems: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
            args: [NgbDropdownItem]
          }]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDropdownAnchor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: '[ngbDropdownAnchor]',
            host: {
              'class': 'dropdown-toggle',
              'aria-haspopup': 'true',
              '[attr.aria-expanded]': 'dropdown.isOpen()'
            }
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
                return NgbDropdown;
              })]
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
          }];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDropdownToggle, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: '[ngbDropdownToggle]',
            host: {
              'class': 'dropdown-toggle',
              'aria-haspopup': 'true',
              '[attr.aria-expanded]': 'dropdown.isOpen()',
              '(click)': 'dropdown.toggle()',
              '(keydown.ArrowUp)': 'dropdown.onKeyDown($event)',
              '(keydown.ArrowDown)': 'dropdown.onKeyDown($event)',
              '(keydown.Home)': 'dropdown.onKeyDown($event)',
              '(keydown.End)': 'dropdown.onKeyDown($event)',
              '(keydown.Tab)': 'dropdown.onKeyDown($event)',
              '(keydown.Shift.Tab)': 'dropdown.onKeyDown($event)'
            },
            providers: [{
              provide: NgbDropdownAnchor,
              useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
                return NgbDropdownToggle_1;
              })
            }]
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
                return NgbDropdown;
              })]
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
          }];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDropdown, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: '[ngbDropdown]',
            exportAs: 'ngbDropdown',
            host: {
              '[class.show]': 'isOpen()'
            }
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
          }, {
            type: NgbDropdownConfig
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]
          }, {
            type: NgbNavbar,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
            }]
          }];
        }, {
          _open: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
            args: ['open']
          }],
          openChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          placement: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          container: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          autoClose: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          display: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          _menu: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"],
            args: [NgbDropdownMenu, {
              "static": false
            }]
          }],
          _anchor: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"],
            args: [NgbDropdownAnchor, {
              "static": false
            }]
          }]
        });
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](NgbDropdownModule, {
          declarations: [NgbDropdown, NgbDropdownAnchor, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownItem, NgbNavbar],
          exports: [NgbDropdown, NgbDropdownAnchor, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownItem, NgbNavbar]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbDropdownModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            declarations: NGB_DROPDOWN_DIRECTIVES,
            exports: NGB_DROPDOWN_DIRECTIVES
          }]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbModalConfig, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](ScrollBar, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
            }]
          }];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbModalBackdrop, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
          args: [{
            selector: 'ngb-modal-backdrop',
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
            template: '',
            host: {
              '[class]': '"modal-backdrop fade show" + (backdropClass ? " " + backdropClass : "")',
              'style': 'z-index: 1050'
            }
          }]
        }], null, {
          backdropClass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbModalWindow, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
          args: [{
            selector: 'ngb-modal-window',
            host: {
              '[class]': '"modal fade show d-block" + (windowClass ? " " + windowClass : "")',
              'role': 'dialog',
              'tabindex': '-1',
              '[attr.aria-modal]': 'true',
              '[attr.aria-labelledby]': 'ariaLabelledBy',
              '[attr.aria-describedby]': 'ariaDescribedBy'
            },
            template: "\n    <div #dialog [class]=\"'modal-dialog' + (size ? ' modal-' + size : '') + (centered ? ' modal-dialog-centered' : '') +\n     (scrollable ? ' modal-dialog-scrollable' : '')\" role=\"document\">\n        <div class=\"modal-content\"><ng-content></ng-content></div>\n    </div>\n    ",
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
            styles: ["ngb-modal-window .component-host-scrollable{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;overflow:hidden}"]
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
          }];
        }, {
          backdrop: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          keyboard: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          dismissEvent: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"],
            args: ['dismiss']
          }],
          _dialogEl: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"],
            args: ['dialog', {
              "static": true
            }]
          }],
          ariaLabelledBy: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          ariaDescribedBy: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          centered: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          scrollable: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          size: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          windowClass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbModalStack, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
            }]
          }, {
            type: ScrollBar
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["RendererFactory2"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
          }];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbModal, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ComponentFactoryResolver"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"]
          }, {
            type: NgbModalStack
          }, {
            type: NgbModalConfig
          }];
        }, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](NgbModalModule, {
          declarations: [NgbModalBackdrop, NgbModalWindow]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbModalModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            declarations: [NgbModalBackdrop, NgbModalWindow],
            entryComponents: [NgbModalBackdrop, NgbModalWindow],
            providers: [NgbModal]
          }]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbNavConfig, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbNavContent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: 'ng-template[ngbNavContent]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
          }];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbNavItem, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: '[ngbNavItem]',
            exportAs: 'ngbNavItem',
            host: {
              '[class.nav-item]': 'true'
            }
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
                return NgbNav;
              })]
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
          }];
        }, {
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          domId: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          destroyOnHide: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          _id: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
            args: ['ngbNavItem']
          }],
          contentTpls: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
            args: [NgbNavContent, {
              descendants: false
            }]
          }]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbNav, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: '[ngbNav]',
            exportAs: 'ngbNav',
            host: {
              '[class.nav]': 'true',
              '[class.flex-column]': "orientation === 'vertical'",
              '[attr.aria-orientation]': "orientation === 'vertical' && roles === 'tablist' ? 'vertical' : undefined",
              '[attr.role]': "role ? role : roles ? 'tablist' : undefined",
              '(keydown.arrowLeft)': 'onKeyDown($event)',
              '(keydown.arrowRight)': 'onKeyDown($event)',
              '(keydown.arrowDown)': 'onKeyDown($event)',
              '(keydown.arrowUp)': 'onKeyDown($event)',
              '(keydown.Home)': 'onKeyDown($event)',
              '(keydown.End)': 'onKeyDown($event)'
            }
          }]
        }], function () {
          return [{
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Attribute"],
              args: ['role']
            }]
          }, {
            type: NgbNavConfig
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
            }]
          }];
        }, {
          activeIdChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          navChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          destroyOnHide: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          orientation: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          roles: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          keyboard: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          activeId: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          items: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
            args: [NgbNavItem]
          }],
          links: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
            args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
              return NgbNavLink;
            }), {
              descendants: true
            }]
          }]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbNavLink, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: 'a[ngbNavLink]',
            host: {
              '[id]': 'navItem.domId',
              '[class.nav-link]': 'true',
              '[class.nav-item]': 'hasNavItemClass()',
              '[attr.role]': "role ? role : nav.roles ? 'tab' : undefined",
              'href': '',
              '[class.active]': 'navItem.active',
              '[class.disabled]': 'navItem.disabled',
              '[attr.tabindex]': 'navItem.disabled ? -1 : undefined',
              '[attr.aria-controls]': 'navItem.isPanelInDom() ? navItem.panelDomId : null',
              '[attr.aria-selected]': 'navItem.active',
              '[attr.aria-disabled]': 'navItem.disabled',
              '(click)': 'nav.click(navItem); $event.preventDefault()'
            }
          }]
        }], function () {
          return [{
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Attribute"],
              args: ['role']
            }]
          }, {
            type: NgbNavItem
          }, {
            type: NgbNav
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
          }];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbNavOutlet, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
          args: [{
            selector: '[ngbNavOutlet]',
            host: {
              '[class.tab-content]': 'true'
            },
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
            template: "\n      <ng-template ngFor let-item [ngForOf]=\"nav.items\">\n          <div class=\"tab-pane\"\n               *ngIf=\"item.isPanelInDom()\"\n               [id]=\"item.panelDomId\"\n               [class.active]=\"item.active\"\n               [attr.role]=\"paneRole ? paneRole : nav.roles ? 'tabpanel' : undefined\"\n               [attr.aria-labelledby]=\"item.domId\">\n              <ng-template [ngTemplateOutlet]=\"item.contentTpl?.templateRef || null\"\n                           [ngTemplateOutletContext]=\"{$implicit: item.active}\"></ng-template>\n          </div>\n      </ng-template>\n  "
          }]
        }], null, {
          paneRole: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          nav: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
            args: ['ngbNavOutlet']
          }]
        });
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](NgbNavModule, {
          declarations: function declarations() {
            return [NgbNavContent, NgbNav, NgbNavItem, NgbNavLink, NgbNavOutlet];
          },
          imports: function imports() {
            return [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]];
          },
          exports: function exports() {
            return [NgbNavContent, NgbNav, NgbNavItem, NgbNavLink, NgbNavOutlet];
          }
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbNavModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            declarations: NGB_NAV_DIRECTIVES,
            exports: NGB_NAV_DIRECTIVES,
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]]
          }]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbPaginationConfig, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbPaginationEllipsis, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: 'ng-template[ngbPaginationEllipsis]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
          }];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbPaginationFirst, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: 'ng-template[ngbPaginationFirst]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
          }];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbPaginationLast, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: 'ng-template[ngbPaginationLast]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
          }];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbPaginationNext, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: 'ng-template[ngbPaginationNext]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
          }];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbPaginationNumber, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: 'ng-template[ngbPaginationNumber]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
          }];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbPaginationPrevious, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: 'ng-template[ngbPaginationPrevious]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
          }];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbPagination, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
          args: [{
            selector: 'ngb-pagination',
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
            host: {
              'role': 'navigation'
            },
            template: "\n    <ng-template #first><span aria-hidden=\"true\" i18n=\"@@ngb.pagination.first\">&laquo;&laquo;</span></ng-template>\n    <ng-template #previous><span aria-hidden=\"true\" i18n=\"@@ngb.pagination.previous\">&laquo;</span></ng-template>\n    <ng-template #next><span aria-hidden=\"true\" i18n=\"@@ngb.pagination.next\">&raquo;</span></ng-template>\n    <ng-template #last><span aria-hidden=\"true\" i18n=\"@@ngb.pagination.last\">&raquo;&raquo;</span></ng-template>\n    <ng-template #ellipsis>...</ng-template>\n    <ng-template #defaultNumber let-page let-currentPage=\"currentPage\">\n      {{ page }}\n      <span *ngIf=\"page === currentPage\" class=\"sr-only\">(current)</span>\n    </ng-template>\n    <ul [class]=\"'pagination' + (size ? ' pagination-' + size : '')\">\n      <li *ngIf=\"boundaryLinks\" class=\"page-item\"\n        [class.disabled]=\"previousDisabled()\">\n        <a aria-label=\"First\" i18n-aria-label=\"@@ngb.pagination.first-aria\" class=\"page-link\" href\n          (click)=\"selectPage(1); $event.preventDefault()\" [attr.tabindex]=\"previousDisabled() ? '-1' : null\"\n          [attr.aria-disabled]=\"previousDisabled() ? 'true' : null\">\n          <ng-template [ngTemplateOutlet]=\"tplFirst?.templateRef || first\"\n                       [ngTemplateOutletContext]=\"{disabled: previousDisabled(), currentPage: page}\"></ng-template>\n        </a>\n      </li>\n\n      <li *ngIf=\"directionLinks\" class=\"page-item\"\n        [class.disabled]=\"previousDisabled()\">\n        <a aria-label=\"Previous\" i18n-aria-label=\"@@ngb.pagination.previous-aria\" class=\"page-link\" href\n          (click)=\"selectPage(page-1); $event.preventDefault()\" [attr.tabindex]=\"previousDisabled() ? '-1' : null\"\n          [attr.aria-disabled]=\"previousDisabled() ? 'true' : null\">\n          <ng-template [ngTemplateOutlet]=\"tplPrevious?.templateRef || previous\"\n                       [ngTemplateOutletContext]=\"{disabled: previousDisabled()}\"></ng-template>\n        </a>\n      </li>\n      <li *ngFor=\"let pageNumber of pages\" class=\"page-item\" [class.active]=\"pageNumber === page\"\n        [class.disabled]=\"isEllipsis(pageNumber) || disabled\" [attr.aria-current]=\"(pageNumber === page ? 'page' : null)\">\n        <a *ngIf=\"isEllipsis(pageNumber)\" class=\"page-link\" tabindex=\"-1\" aria-disabled=\"true\">\n          <ng-template [ngTemplateOutlet]=\"tplEllipsis?.templateRef || ellipsis\"\n                       [ngTemplateOutletContext]=\"{disabled: true, currentPage: page}\"></ng-template>\n        </a>\n        <a *ngIf=\"!isEllipsis(pageNumber)\" class=\"page-link\" href (click)=\"selectPage(pageNumber); $event.preventDefault()\"\n          [attr.tabindex]=\"disabled ? '-1' : null\" [attr.aria-disabled]=\"disabled ? 'true' : null\">\n          <ng-template [ngTemplateOutlet]=\"tplNumber?.templateRef || defaultNumber\"\n                       [ngTemplateOutletContext]=\"{disabled: disabled, $implicit: pageNumber, currentPage: page}\"></ng-template>\n        </a>\n      </li>\n      <li *ngIf=\"directionLinks\" class=\"page-item\" [class.disabled]=\"nextDisabled()\">\n        <a aria-label=\"Next\" i18n-aria-label=\"@@ngb.pagination.next-aria\" class=\"page-link\" href\n          (click)=\"selectPage(page+1); $event.preventDefault()\" [attr.tabindex]=\"nextDisabled() ? '-1' : null\"\n          [attr.aria-disabled]=\"nextDisabled() ? 'true' : null\">\n          <ng-template [ngTemplateOutlet]=\"tplNext?.templateRef || next\"\n                       [ngTemplateOutletContext]=\"{disabled: nextDisabled(), currentPage: page}\"></ng-template>\n        </a>\n      </li>\n\n      <li *ngIf=\"boundaryLinks\" class=\"page-item\" [class.disabled]=\"nextDisabled()\">\n        <a aria-label=\"Last\" i18n-aria-label=\"@@ngb.pagination.last-aria\" class=\"page-link\" href\n          (click)=\"selectPage(pageCount); $event.preventDefault()\" [attr.tabindex]=\"nextDisabled() ? '-1' : null\"\n          [attr.aria-disabled]=\"nextDisabled() ? 'true' : null\">\n          <ng-template [ngTemplateOutlet]=\"tplLast?.templateRef || last\"\n                       [ngTemplateOutletContext]=\"{disabled: nextDisabled(), currentPage: page}\"></ng-template>\n        </a>\n      </li>\n    </ul>\n  "
          }]
        }], function () {
          return [{
            type: NgbPaginationConfig
          }];
        }, {
          page: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          pageChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          boundaryLinks: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          directionLinks: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          ellipses: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          maxSize: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          pageSize: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          rotate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          size: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          tplEllipsis: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"],
            args: [NgbPaginationEllipsis, {
              "static": false
            }]
          }],
          tplFirst: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"],
            args: [NgbPaginationFirst, {
              "static": false
            }]
          }],
          tplLast: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"],
            args: [NgbPaginationLast, {
              "static": false
            }]
          }],
          tplNext: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"],
            args: [NgbPaginationNext, {
              "static": false
            }]
          }],
          tplNumber: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"],
            args: [NgbPaginationNumber, {
              "static": false
            }]
          }],
          tplPrevious: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"],
            args: [NgbPaginationPrevious, {
              "static": false
            }]
          }],
          collectionSize: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](NgbPaginationModule, {
          declarations: function declarations() {
            return [NgbPagination, NgbPaginationEllipsis, NgbPaginationFirst, NgbPaginationLast, NgbPaginationNext, NgbPaginationNumber, NgbPaginationPrevious];
          },
          imports: function imports() {
            return [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]];
          },
          exports: function exports() {
            return [NgbPagination, NgbPaginationEllipsis, NgbPaginationFirst, NgbPaginationLast, NgbPaginationNext, NgbPaginationNumber, NgbPaginationPrevious];
          }
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbPaginationModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            declarations: DIRECTIVES,
            exports: DIRECTIVES,
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]]
          }]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbPopoverConfig, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbPopoverWindow, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
          args: [{
            selector: 'ngb-popover-window',
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
            host: {
              '[class]': '"popover" + (popoverClass ? " " + popoverClass : "")',
              'role': 'tooltip',
              '[id]': 'id'
            },
            template: "\n    <div class=\"arrow\"></div>\n    <h3 class=\"popover-header\" *ngIf=\"title != null\">\n      <ng-template #simpleTitle>{{title}}</ng-template>\n      <ng-template [ngTemplateOutlet]=\"isTitleTemplate() ? $any(title) : simpleTitle\" [ngTemplateOutletContext]=\"context\"></ng-template>\n    </h3>\n    <div class=\"popover-body\"><ng-content></ng-content></div>",
            styles: ["ngb-popover-window.bs-popover-bottom>.arrow,ngb-popover-window.bs-popover-top>.arrow{left:50%;margin-left:-.5rem}ngb-popover-window.bs-popover-bottom-left>.arrow,ngb-popover-window.bs-popover-top-left>.arrow{left:2em}ngb-popover-window.bs-popover-bottom-right>.arrow,ngb-popover-window.bs-popover-top-right>.arrow{left:auto;right:2em}ngb-popover-window.bs-popover-left>.arrow,ngb-popover-window.bs-popover-right>.arrow{top:50%;margin-top:-.5rem}ngb-popover-window.bs-popover-left-top>.arrow,ngb-popover-window.bs-popover-right-top>.arrow{top:.7em}ngb-popover-window.bs-popover-left-bottom>.arrow,ngb-popover-window.bs-popover-right-bottom>.arrow{top:auto;bottom:.7em}"]
          }]
        }], null, {
          title: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          id: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          popoverClass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          context: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbPopover, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: '[ngbPopover]',
            exportAs: 'ngbPopover'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ComponentFactoryResolver"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"]
          }, {
            type: NgbPopoverConfig
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"]
          }];
        }, {
          shown: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          hidden: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          autoClose: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          placement: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          triggers: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          container: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          disablePopover: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          popoverClass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          openDelay: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          closeDelay: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          ngbPopover: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          popoverTitle: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](NgbPopoverModule, {
          declarations: function declarations() {
            return [NgbPopover, NgbPopoverWindow];
          },
          imports: function imports() {
            return [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]];
          },
          exports: function exports() {
            return [NgbPopover];
          }
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbPopoverModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            declarations: [NgbPopover, NgbPopoverWindow],
            exports: [NgbPopover],
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]],
            entryComponents: [NgbPopoverWindow]
          }]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbProgressbarConfig, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbProgressbar, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
          args: [{
            selector: 'ngb-progressbar',
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
            template: "\n    <div class=\"progress\" [style.height]=\"height\">\n      <div class=\"progress-bar{{type ? ' bg-' + type : ''}}{{textType ? ' text-' + textType : ''}}\n      {{animated ? ' progress-bar-animated' : ''}}{{striped ? ' progress-bar-striped' : ''}}\"\n      role=\"progressbar\" [style.width.%]=\"getPercentValue()\"\n      [attr.aria-valuenow]=\"getValue()\" aria-valuemin=\"0\" [attr.aria-valuemax]=\"max\">\n        <span *ngIf=\"showValue\" i18n=\"@@ngb.progressbar.value\">{{getValue() / max | percent}}</span><ng-content></ng-content>\n      </div>\n    </div>\n  "
          }]
        }], function () {
          return [{
            type: NgbProgressbarConfig
          }];
        }, {
          value: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          max: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          animated: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          striped: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          textType: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          type: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          showValue: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          height: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](NgbProgressbarModule, {
          declarations: function declarations() {
            return [NgbProgressbar];
          },
          imports: function imports() {
            return [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]];
          },
          exports: function exports() {
            return [NgbProgressbar];
          }
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbProgressbarModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            declarations: [NgbProgressbar],
            exports: [NgbProgressbar],
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]]
          }]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbRatingConfig, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbRating, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
          args: [{
            selector: 'ngb-rating',
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
            host: {
              'class': 'd-inline-flex',
              '[tabindex]': 'disabled ? -1 : 0',
              'role': 'slider',
              'aria-valuemin': '0',
              '[attr.aria-valuemax]': 'max',
              '[attr.aria-valuenow]': 'nextRate',
              '[attr.aria-valuetext]': 'ariaValueText()',
              '[attr.aria-disabled]': 'readonly ? true : null',
              '(blur)': 'handleBlur()',
              '(keydown)': 'handleKeyDown($event)',
              '(mouseleave)': 'reset()'
            },
            template: "\n    <ng-template #t let-fill=\"fill\">{{ fill === 100 ? '&#9733;' : '&#9734;' }}</ng-template>\n    <ng-template ngFor [ngForOf]=\"contexts\" let-index=\"index\">\n      <span class=\"sr-only\">({{ index < nextRate ? '*' : ' ' }})</span>\n      <span (mouseenter)=\"enter(index + 1)\" (click)=\"handleClick(index + 1)\" [style.cursor]=\"readonly || disabled ? 'default' : 'pointer'\">\n        <ng-template [ngTemplateOutlet]=\"starTemplate || starTemplateFromContent || t\" [ngTemplateOutletContext]=\"contexts[index]\">\n        </ng-template>\n      </span>\n    </ng-template>\n  ",
            providers: [NGB_RATING_VALUE_ACCESSOR]
          }]
        }], function () {
          return [{
            type: NgbRatingConfig
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
          }];
        }, {
          hover: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          leave: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          rateChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          max: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          readonly: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          rate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          resettable: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          starTemplate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          starTemplateFromContent: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"],
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"], {
              "static": false
            }]
          }]
        });
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](NgbRatingModule, {
          declarations: function declarations() {
            return [NgbRating];
          },
          imports: function imports() {
            return [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]];
          },
          exports: function exports() {
            return [NgbRating];
          }
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbRatingModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            declarations: [NgbRating],
            exports: [NgbRating],
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]]
          }]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbTabsetConfig, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbTabTitle, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: 'ng-template[ngbTabTitle]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
          }];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbTabContent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: 'ng-template[ngbTabContent]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]
          }];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbTab, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: 'ngb-tab'
          }]
        }], function () {
          return [];
        }, {
          id: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          title: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          titleTpls: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
            args: [NgbTabTitle, {
              descendants: false
            }]
          }],
          contentTpls: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
            args: [NgbTabContent, {
              descendants: false
            }]
          }]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbTabset, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
          args: [{
            selector: 'ngb-tabset',
            exportAs: 'ngbTabset',
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
            template: "\n    <ul [class]=\"'nav nav-' + type + (orientation == 'horizontal'?  ' ' + justifyClass : ' flex-column')\" role=\"tablist\">\n      <li class=\"nav-item\" *ngFor=\"let tab of tabs\">\n        <a [id]=\"tab.id\" class=\"nav-link\" [class.active]=\"tab.id === activeId\" [class.disabled]=\"tab.disabled\"\n          href (click)=\"select(tab.id); $event.preventDefault()\" role=\"tab\" [attr.tabindex]=\"(tab.disabled ? '-1': undefined)\"\n          [attr.aria-controls]=\"(!destroyOnHide || tab.id === activeId ? tab.id + '-panel' : null)\"\n          [attr.aria-selected]=\"tab.id === activeId\" [attr.aria-disabled]=\"tab.disabled\">\n          {{tab.title}}<ng-template [ngTemplateOutlet]=\"tab.titleTpl?.templateRef || null\"></ng-template>\n        </a>\n      </li>\n    </ul>\n    <div class=\"tab-content\">\n      <ng-template ngFor let-tab [ngForOf]=\"tabs\">\n        <div\n          class=\"tab-pane {{tab.id === activeId ? 'active' : null}}\"\n          *ngIf=\"!destroyOnHide || tab.id === activeId\"\n          role=\"tabpanel\"\n          [attr.aria-labelledby]=\"tab.id\" id=\"{{tab.id}}-panel\">\n          <ng-template [ngTemplateOutlet]=\"tab.contentTpl?.templateRef || null\"></ng-template>\n        </div>\n      </ng-template>\n    </div>\n  "
          }]
        }], function () {
          return [{
            type: NgbTabsetConfig
          }];
        }, {
          destroyOnHide: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          tabChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          type: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          justify: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          orientation: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          activeId: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          tabs: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
            args: [NgbTab]
          }]
        });
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](NgbTabsetModule, {
          declarations: function declarations() {
            return [NgbTabset, NgbTab, NgbTabContent, NgbTabTitle];
          },
          imports: function imports() {
            return [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]];
          },
          exports: function exports() {
            return [NgbTabset, NgbTab, NgbTabContent, NgbTabTitle];
          }
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbTabsetModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            declarations: NGB_TABSET_DIRECTIVES,
            exports: NGB_TABSET_DIRECTIVES,
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]]
          }]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbTimepickerConfig, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbTimeAdapter, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root',
            useFactory: NGB_DATEPICKER_TIME_ADAPTER_FACTORY
          }]
        }], null, null);
      })();

      var ɵNgbTimeStructAdapter_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetInheritedFactory"](NgbTimeStructAdapter);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbTimeStructAdapter, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbTimepickerI18n, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root',
            useFactory: NGB_TIMEPICKER_I18N_FACTORY,
            deps: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["LOCALE_ID"]]
          }]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbTimepickerI18nDefault, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], function () {
          return [{
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["LOCALE_ID"]]
            }]
          }];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbTimepicker, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
          args: [{
            selector: 'ngb-timepicker',
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
            template: "\n    <fieldset [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n      <div class=\"ngb-tp\">\n        <div class=\"ngb-tp-input-container ngb-tp-hour\">\n          <button *ngIf=\"spinners\" tabindex=\"-1\" type=\"button\" (click)=\"changeHour(hourStep)\"\n            class=\"btn btn-link\" [class.btn-sm]=\"isSmallSize\" [class.btn-lg]=\"isLargeSize\" [class.disabled]=\"disabled\"\n            [disabled]=\"disabled\">\n            <span class=\"chevron ngb-tp-chevron\"></span>\n            <span class=\"sr-only\" i18n=\"@@ngb.timepicker.increment-hours\">Increment hours</span>\n          </button>\n          <input type=\"text\" class=\"ngb-tp-input form-control\" [class.form-control-sm]=\"isSmallSize\"\n            [class.form-control-lg]=\"isLargeSize\"\n            maxlength=\"2\" inputmode=\"numeric\" placeholder=\"HH\" i18n-placeholder=\"@@ngb.timepicker.HH\"\n            [value]=\"formatHour(model?.hour)\" (change)=\"updateHour($any($event).target.value)\"\n            [readOnly]=\"readonlyInputs\" [disabled]=\"disabled\" aria-label=\"Hours\" i18n-aria-label=\"@@ngb.timepicker.hours\"\n            (input)=\"formatInput($any($event).target)\"\n            (keydown.ArrowUp)=\"changeHour(hourStep); $event.preventDefault()\"\n            (keydown.ArrowDown)=\"changeHour(-hourStep); $event.preventDefault()\">\n          <button *ngIf=\"spinners\" tabindex=\"-1\" type=\"button\" (click)=\"changeHour(-hourStep)\"\n            class=\"btn btn-link\" [class.btn-sm]=\"isSmallSize\" [class.btn-lg]=\"isLargeSize\" [class.disabled]=\"disabled\"\n            [disabled]=\"disabled\">\n            <span class=\"chevron ngb-tp-chevron bottom\"></span>\n            <span class=\"sr-only\" i18n=\"@@ngb.timepicker.decrement-hours\">Decrement hours</span>\n          </button>\n        </div>\n        <div class=\"ngb-tp-spacer\">:</div>\n        <div class=\"ngb-tp-input-container ngb-tp-minute\">\n          <button *ngIf=\"spinners\" tabindex=\"-1\" type=\"button\" (click)=\"changeMinute(minuteStep)\"\n            class=\"btn btn-link\" [class.btn-sm]=\"isSmallSize\" [class.btn-lg]=\"isLargeSize\" [class.disabled]=\"disabled\"\n            [disabled]=\"disabled\">\n            <span class=\"chevron ngb-tp-chevron\"></span>\n            <span class=\"sr-only\" i18n=\"@@ngb.timepicker.increment-minutes\">Increment minutes</span>\n          </button>\n          <input type=\"text\" class=\"ngb-tp-input form-control\" [class.form-control-sm]=\"isSmallSize\" [class.form-control-lg]=\"isLargeSize\"\n            maxlength=\"2\" inputmode=\"numeric\" placeholder=\"MM\" i18n-placeholder=\"@@ngb.timepicker.MM\"\n            [value]=\"formatMinSec(model?.minute)\" (change)=\"updateMinute($any($event).target.value)\"\n            [readOnly]=\"readonlyInputs\" [disabled]=\"disabled\" aria-label=\"Minutes\" i18n-aria-label=\"@@ngb.timepicker.minutes\"\n            (input)=\"formatInput($any($event).target)\"\n            (keydown.ArrowUp)=\"changeMinute(minuteStep); $event.preventDefault()\"\n            (keydown.ArrowDown)=\"changeMinute(-minuteStep); $event.preventDefault()\">\n          <button *ngIf=\"spinners\" tabindex=\"-1\" type=\"button\" (click)=\"changeMinute(-minuteStep)\"\n            class=\"btn btn-link\" [class.btn-sm]=\"isSmallSize\" [class.btn-lg]=\"isLargeSize\"  [class.disabled]=\"disabled\"\n            [disabled]=\"disabled\">\n            <span class=\"chevron ngb-tp-chevron bottom\"></span>\n            <span class=\"sr-only\"  i18n=\"@@ngb.timepicker.decrement-minutes\">Decrement minutes</span>\n          </button>\n        </div>\n        <div *ngIf=\"seconds\" class=\"ngb-tp-spacer\">:</div>\n        <div *ngIf=\"seconds\" class=\"ngb-tp-input-container ngb-tp-second\">\n          <button *ngIf=\"spinners\" tabindex=\"-1\" type=\"button\" (click)=\"changeSecond(secondStep)\"\n            class=\"btn btn-link\" [class.btn-sm]=\"isSmallSize\" [class.btn-lg]=\"isLargeSize\" [class.disabled]=\"disabled\"\n            [disabled]=\"disabled\">\n            <span class=\"chevron ngb-tp-chevron\"></span>\n            <span class=\"sr-only\" i18n=\"@@ngb.timepicker.increment-seconds\">Increment seconds</span>\n          </button>\n          <input type=\"text\" class=\"ngb-tp-input form-control\" [class.form-control-sm]=\"isSmallSize\" [class.form-control-lg]=\"isLargeSize\"\n            maxlength=\"2\" inputmode=\"numeric\" placeholder=\"SS\" i18n-placeholder=\"@@ngb.timepicker.SS\"\n            [value]=\"formatMinSec(model?.second)\" (change)=\"updateSecond($any($event).target.value)\"\n            [readOnly]=\"readonlyInputs\" [disabled]=\"disabled\" aria-label=\"Seconds\" i18n-aria-label=\"@@ngb.timepicker.seconds\"\n            (input)=\"formatInput($any($event).target)\"\n            (keydown.ArrowUp)=\"changeSecond(secondStep); $event.preventDefault()\"\n            (keydown.ArrowDown)=\"changeSecond(-secondStep); $event.preventDefault()\">\n          <button *ngIf=\"spinners\" tabindex=\"-1\" type=\"button\" (click)=\"changeSecond(-secondStep)\"\n            class=\"btn btn-link\" [class.btn-sm]=\"isSmallSize\" [class.btn-lg]=\"isLargeSize\"  [class.disabled]=\"disabled\"\n            [disabled]=\"disabled\">\n            <span class=\"chevron ngb-tp-chevron bottom\"></span>\n            <span class=\"sr-only\" i18n=\"@@ngb.timepicker.decrement-seconds\">Decrement seconds</span>\n          </button>\n        </div>\n        <div *ngIf=\"meridian\" class=\"ngb-tp-spacer\"></div>\n        <div *ngIf=\"meridian\" class=\"ngb-tp-meridian\">\n          <button type=\"button\" class=\"btn btn-outline-primary\" [class.btn-sm]=\"isSmallSize\" [class.btn-lg]=\"isLargeSize\"\n            [disabled]=\"disabled\" [class.disabled]=\"disabled\"\n                  (click)=\"toggleMeridian()\">\n            <ng-container *ngIf=\"model && model.hour >= 12; else am\"\n                          i18n=\"@@ngb.timepicker.PM\">{{ i18n.getAfternoonPeriod() }}</ng-container>\n            <ng-template #am i18n=\"@@ngb.timepicker.AM\">{{ i18n.getMorningPeriod() }}</ng-template>\n          </button>\n        </div>\n      </div>\n    </fieldset>\n  ",
            providers: [NGB_TIMEPICKER_VALUE_ACCESSOR],
            styles: ["ngb-timepicker{font-size:1rem}.ngb-tp{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.ngb-tp-input-container{width:4em}.ngb-tp-chevron::before{border-style:solid;border-width:.29em .29em 0 0;content:\"\";display:inline-block;height:.69em;left:.05em;position:relative;top:.15em;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);vertical-align:middle;width:.69em}.ngb-tp-chevron.bottom:before{top:-.3em;-webkit-transform:rotate(135deg);transform:rotate(135deg)}.ngb-tp-input{text-align:center}.ngb-tp-hour,.ngb-tp-meridian,.ngb-tp-minute,.ngb-tp-second{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center;-ms-flex-pack:distribute;justify-content:space-around}.ngb-tp-spacer{width:1em;text-align:center}"]
          }]
        }], function () {
          return [{
            type: NgbTimepickerConfig
          }, {
            type: NgbTimeAdapter
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
          }, {
            type: NgbTimepickerI18n
          }];
        }, {
          meridian: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          spinners: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          seconds: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          hourStep: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          minuteStep: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          secondStep: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          readonlyInputs: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          size: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](NgbTimepickerModule, {
          declarations: function declarations() {
            return [NgbTimepicker];
          },
          imports: function imports() {
            return [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]];
          },
          exports: function exports() {
            return [NgbTimepicker];
          }
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbTimepickerModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            declarations: [NgbTimepicker],
            exports: [NgbTimepicker],
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]]
          }]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbToastConfig, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbToastHeader, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: '[ngbToastHeader]'
          }]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbToast, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
          args: [{
            selector: 'ngb-toast',
            exportAs: 'ngbToast',
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
            host: {
              'role': 'alert',
              '[attr.aria-live]': 'ariaLive',
              'aria-atomic': 'true',
              '[class.toast]': 'true',
              '[class.show]': 'true'
            },
            template: "\n    <ng-template #headerTpl>\n      <strong class=\"mr-auto\">{{header}}</strong>\n    </ng-template>\n    <ng-template [ngIf]=\"contentHeaderTpl || header\">\n      <div class=\"toast-header\">\n        <ng-template [ngTemplateOutlet]=\"contentHeaderTpl || headerTpl\"></ng-template>\n        <button type=\"button\" class=\"close\" aria-label=\"Close\" i18n-aria-label=\"@@ngb.toast.close-aria\" (click)=\"hide()\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n    </ng-template>\n    <div class=\"toast-body\">\n      <ng-content></ng-content>\n    </div>\n  ",
            styles: [".ngb-toasts{position:fixed;top:0;right:0;margin:.5em;z-index:1200}ngb-toast .toast-header .close{margin-left:auto;margin-bottom:.25rem}"]
          }]
        }], function () {
          return [{
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Attribute"],
              args: ['aria-live']
            }]
          }, {
            type: NgbToastConfig
          }];
        }, {
          contentHeaderTpl: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"],
            args: [NgbToastHeader, {
              read: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"],
              "static": true
            }]
          }],
          hideOutput: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"],
            args: ['hide']
          }],
          delay: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          autohide: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          header: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](NgbToastModule, {
          declarations: function declarations() {
            return [NgbToast, NgbToastHeader];
          },
          imports: function imports() {
            return [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]];
          },
          exports: function exports() {
            return [NgbToast, NgbToastHeader];
          }
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbToastModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            declarations: [NgbToast, NgbToastHeader],
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]],
            exports: [NgbToast, NgbToastHeader]
          }]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbTooltipConfig, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbTooltipWindow, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
          args: [{
            selector: 'ngb-tooltip-window',
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
            host: {
              '[class]': '"tooltip show" + (tooltipClass ? " " + tooltipClass : "")',
              'role': 'tooltip',
              '[id]': 'id'
            },
            template: "<div class=\"arrow\"></div><div class=\"tooltip-inner\"><ng-content></ng-content></div>",
            styles: ["ngb-tooltip-window.bs-tooltip-bottom .arrow,ngb-tooltip-window.bs-tooltip-top .arrow{left:calc(50% - .4rem)}ngb-tooltip-window.bs-tooltip-bottom-left .arrow,ngb-tooltip-window.bs-tooltip-top-left .arrow{left:1em}ngb-tooltip-window.bs-tooltip-bottom-right .arrow,ngb-tooltip-window.bs-tooltip-top-right .arrow{left:auto;right:.8rem}ngb-tooltip-window.bs-tooltip-left .arrow,ngb-tooltip-window.bs-tooltip-right .arrow{top:calc(50% - .4rem)}ngb-tooltip-window.bs-tooltip-left-top .arrow,ngb-tooltip-window.bs-tooltip-right-top .arrow{top:.4rem}ngb-tooltip-window.bs-tooltip-left-bottom .arrow,ngb-tooltip-window.bs-tooltip-right-bottom .arrow{top:auto;bottom:.4rem}"]
          }]
        }], null, {
          id: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          tooltipClass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbTooltip, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: '[ngbTooltip]',
            exportAs: 'ngbTooltip'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ComponentFactoryResolver"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"]
          }, {
            type: NgbTooltipConfig
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"]
          }];
        }, {
          shown: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          hidden: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          autoClose: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          placement: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          triggers: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          container: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          disableTooltip: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          tooltipClass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          openDelay: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          closeDelay: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          ngbTooltip: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](NgbTooltipModule, {
          declarations: [NgbTooltip, NgbTooltipWindow],
          exports: [NgbTooltip]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbTooltipModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            declarations: [NgbTooltip, NgbTooltipWindow],
            exports: [NgbTooltip],
            entryComponents: [NgbTooltipWindow]
          }]
        }], null, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbHighlight, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
          args: [{
            selector: 'ngb-highlight',
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
            template: "<ng-template ngFor [ngForOf]=\"parts\" let-part let-isOdd=\"odd\">" + "<span *ngIf=\"isOdd; else even\" [class]=\"highlightClass\">{{part}}</span><ng-template #even>{{part}}</ng-template>" + "</ng-template>",
            styles: [".ngb-highlight{font-weight:700}"]
          }]
        }], function () {
          return [];
        }, {
          highlightClass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          result: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          term: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbTypeaheadWindow, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
          args: [{
            selector: 'ngb-typeahead-window',
            exportAs: 'ngbTypeaheadWindow',
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
            host: {
              '(mousedown)': '$event.preventDefault()',
              'class': 'dropdown-menu show',
              'role': 'listbox',
              '[id]': 'id'
            },
            template: "\n    <ng-template #rt let-result=\"result\" let-term=\"term\" let-formatter=\"formatter\">\n      <ngb-highlight [result]=\"formatter(result)\" [term]=\"term\"></ngb-highlight>\n    </ng-template>\n    <ng-template ngFor [ngForOf]=\"results\" let-result let-idx=\"index\">\n      <button type=\"button\" class=\"dropdown-item\" role=\"option\"\n        [id]=\"id + '-' + idx\"\n        [class.active]=\"idx === activeIdx\"\n        (mouseenter)=\"markActive(idx)\"\n        (click)=\"select(result)\">\n          <ng-template [ngTemplateOutlet]=\"resultTemplate || rt\"\n          [ngTemplateOutletContext]=\"{result: result, term: term, formatter: formatter}\"></ng-template>\n      </button>\n    </ng-template>\n  "
          }]
        }], function () {
          return [];
        }, {
          focusFirst: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          formatter: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          selectEvent: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"],
            args: ['select']
          }],
          activeChangeEvent: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"],
            args: ['activeChange']
          }],
          id: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          results: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          term: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          resultTemplate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](Live, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
            }]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [ARIA_LIVE_DELAY]
            }]
          }];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbTypeaheadConfig, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [];
        }, null);
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbTypeahead, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: 'input[ngbTypeahead]',
            exportAs: 'ngbTypeahead',
            host: {
              '(blur)': 'handleBlur()',
              '[class.open]': 'isPopupOpen()',
              '(keydown)': 'handleKeyDown($event)',
              '[autocomplete]': 'autocomplete',
              'autocapitalize': 'off',
              'autocorrect': 'off',
              'role': 'combobox',
              'aria-multiline': 'false',
              '[attr.aria-autocomplete]': 'showHint ? "both" : "list"',
              '[attr.aria-activedescendant]': 'activeDescendant',
              '[attr.aria-owns]': 'isPopupOpen() ? popupId : null',
              '[attr.aria-expanded]': 'isPopupOpen()'
            },
            providers: [NGB_TYPEAHEAD_VALUE_ACCESSOR]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ComponentFactoryResolver"]
          }, {
            type: NgbTypeaheadConfig
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
          }, {
            type: Live
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"]
          }];
        }, {
          autocomplete: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          placement: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          selectItem: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          container: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          editable: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          focusFirst: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          showHint: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          inputFormatter: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          ngbTypeahead: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          resultFormatter: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          resultTemplate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](NgbTypeaheadModule, {
          declarations: function declarations() {
            return [NgbTypeahead, NgbHighlight, NgbTypeaheadWindow];
          },
          imports: function imports() {
            return [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]];
          },
          exports: function exports() {
            return [NgbTypeahead, NgbHighlight];
          }
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbTypeaheadModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            declarations: [NgbTypeahead, NgbHighlight, NgbTypeaheadWindow],
            exports: [NgbTypeahead, NgbHighlight],
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]],
            entryComponents: [NgbTypeaheadWindow]
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](NgbModule, {
          imports: [NgbAccordionModule, NgbAlertModule, NgbButtonsModule, NgbCarouselModule, NgbCollapseModule, NgbDatepickerModule, NgbDropdownModule, NgbModalModule, NgbNavModule, NgbPaginationModule, NgbPopoverModule, NgbProgressbarModule, NgbRatingModule, NgbTimepickerModule, NgbToastModule, NgbTooltipModule, NgbTypeaheadModule, NgbTabsetModule],
          exports: [NgbAccordionModule, NgbAlertModule, NgbButtonsModule, NgbCarouselModule, NgbCollapseModule, NgbDatepickerModule, NgbDropdownModule, NgbModalModule, NgbNavModule, NgbPaginationModule, NgbPopoverModule, NgbProgressbarModule, NgbRatingModule, NgbTimepickerModule, NgbToastModule, NgbTooltipModule, NgbTypeaheadModule, NgbTabsetModule]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgbModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            imports: NGB_MODULES,
            exports: NGB_MODULES
          }]
        }], null, null);
      })();
      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=ng-bootstrap.js.map

      /***/

    },

    /***/
    "3Pt+":
    /*!********************************************************************!*\
      !*** ./node_modules/@angular/forms/__ivy_ngcc__/fesm2015/forms.js ***!
      \********************************************************************/

    /*! exports provided: AbstractControl, AbstractControlDirective, AbstractFormGroupDirective, COMPOSITION_BUFFER_MODE, CheckboxControlValueAccessor, CheckboxRequiredValidator, ControlContainer, DefaultValueAccessor, EmailValidator, FormArray, FormArrayName, FormBuilder, FormControl, FormControlDirective, FormControlName, FormGroup, FormGroupDirective, FormGroupName, FormsModule, MaxLengthValidator, MinLengthValidator, NG_ASYNC_VALIDATORS, NG_VALIDATORS, NG_VALUE_ACCESSOR, NgControl, NgControlStatus, NgControlStatusGroup, NgForm, NgModel, NgModelGroup, NgSelectOption, NumberValueAccessor, PatternValidator, RadioControlValueAccessor, RangeValueAccessor, ReactiveFormsModule, RequiredValidator, SelectControlValueAccessor, SelectMultipleControlValueAccessor, VERSION, Validators, ɵInternalFormsSharedModule, ɵNgNoValidate, ɵNgSelectMultipleOption, ɵangular_packages_forms_forms_a, ɵangular_packages_forms_forms_b, ɵangular_packages_forms_forms_ba, ɵangular_packages_forms_forms_bb, ɵangular_packages_forms_forms_bc, ɵangular_packages_forms_forms_bd, ɵangular_packages_forms_forms_be, ɵangular_packages_forms_forms_c, ɵangular_packages_forms_forms_d, ɵangular_packages_forms_forms_e, ɵangular_packages_forms_forms_f, ɵangular_packages_forms_forms_g, ɵangular_packages_forms_forms_h, ɵangular_packages_forms_forms_i, ɵangular_packages_forms_forms_j, ɵangular_packages_forms_forms_k, ɵangular_packages_forms_forms_l, ɵangular_packages_forms_forms_m, ɵangular_packages_forms_forms_n, ɵangular_packages_forms_forms_o, ɵangular_packages_forms_forms_p, ɵangular_packages_forms_forms_q, ɵangular_packages_forms_forms_r, ɵangular_packages_forms_forms_s, ɵangular_packages_forms_forms_t, ɵangular_packages_forms_forms_u, ɵangular_packages_forms_forms_v, ɵangular_packages_forms_forms_w, ɵangular_packages_forms_forms_x, ɵangular_packages_forms_forms_y, ɵangular_packages_forms_forms_z */

    /***/
    function Pt(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AbstractControl", function () {
        return AbstractControl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AbstractControlDirective", function () {
        return AbstractControlDirective;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AbstractFormGroupDirective", function () {
        return AbstractFormGroupDirective;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "COMPOSITION_BUFFER_MODE", function () {
        return COMPOSITION_BUFFER_MODE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CheckboxControlValueAccessor", function () {
        return CheckboxControlValueAccessor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CheckboxRequiredValidator", function () {
        return CheckboxRequiredValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ControlContainer", function () {
        return ControlContainer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DefaultValueAccessor", function () {
        return DefaultValueAccessor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EmailValidator", function () {
        return EmailValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FormArray", function () {
        return FormArray;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FormArrayName", function () {
        return FormArrayName;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FormBuilder", function () {
        return FormBuilder;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FormControl", function () {
        return FormControl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FormControlDirective", function () {
        return FormControlDirective;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FormControlName", function () {
        return FormControlName;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FormGroup", function () {
        return FormGroup;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FormGroupDirective", function () {
        return FormGroupDirective;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FormGroupName", function () {
        return FormGroupName;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FormsModule", function () {
        return FormsModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MaxLengthValidator", function () {
        return MaxLengthValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MinLengthValidator", function () {
        return MinLengthValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NG_ASYNC_VALIDATORS", function () {
        return NG_ASYNC_VALIDATORS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NG_VALIDATORS", function () {
        return NG_VALIDATORS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NG_VALUE_ACCESSOR", function () {
        return NG_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgControl", function () {
        return NgControl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgControlStatus", function () {
        return NgControlStatus;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgControlStatusGroup", function () {
        return NgControlStatusGroup;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgForm", function () {
        return NgForm;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgModel", function () {
        return NgModel;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgModelGroup", function () {
        return NgModelGroup;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgSelectOption", function () {
        return NgSelectOption;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NumberValueAccessor", function () {
        return NumberValueAccessor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PatternValidator", function () {
        return PatternValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RadioControlValueAccessor", function () {
        return RadioControlValueAccessor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RangeValueAccessor", function () {
        return RangeValueAccessor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ReactiveFormsModule", function () {
        return ReactiveFormsModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RequiredValidator", function () {
        return RequiredValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SelectControlValueAccessor", function () {
        return SelectControlValueAccessor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SelectMultipleControlValueAccessor", function () {
        return SelectMultipleControlValueAccessor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "VERSION", function () {
        return VERSION;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Validators", function () {
        return Validators;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵInternalFormsSharedModule", function () {
        return ɵInternalFormsSharedModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵNgNoValidate", function () {
        return ɵNgNoValidate;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵNgSelectMultipleOption", function () {
        return ɵNgSelectMultipleOption;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_a", function () {
        return SHARED_FORM_DIRECTIVES;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_b", function () {
        return TEMPLATE_DRIVEN_DIRECTIVES;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_ba", function () {
        return CHECKBOX_REQUIRED_VALIDATOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_bb", function () {
        return EMAIL_VALIDATOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_bc", function () {
        return MIN_LENGTH_VALIDATOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_bd", function () {
        return MAX_LENGTH_VALIDATOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_be", function () {
        return PATTERN_VALIDATOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_c", function () {
        return REACTIVE_DRIVEN_DIRECTIVES;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_d", function () {
        return ɵInternalFormsSharedModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_e", function () {
        return CHECKBOX_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_f", function () {
        return DEFAULT_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_g", function () {
        return AbstractControlStatus;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_h", function () {
        return ngControlStatusHost;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_i", function () {
        return formDirectiveProvider;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_j", function () {
        return formControlBinding;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_k", function () {
        return modelGroupProvider;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_l", function () {
        return NUMBER_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_m", function () {
        return RADIO_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_n", function () {
        return RadioControlRegistry;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_o", function () {
        return RANGE_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_p", function () {
        return NG_MODEL_WITH_FORM_CONTROL_WARNING;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_q", function () {
        return formControlBinding$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_r", function () {
        return controlNameBinding;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_s", function () {
        return formDirectiveProvider$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_t", function () {
        return formGroupNameProvider;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_u", function () {
        return formArrayNameProvider;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_v", function () {
        return SELECT_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_w", function () {
        return SELECT_MULTIPLE_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_x", function () {
        return ɵNgSelectMultipleOption;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_y", function () {
        return ɵNgNoValidate;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_z", function () {
        return REQUIRED_VALIDATOR;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /**
       * @license Angular v9.0.7
       * (c) 2010-2020 Google LLC. https://angular.io/
       * License: MIT
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/control_value_accessor.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@description
       * Defines an interface that acts as a bridge between the Angular forms API and a
       * native element in the DOM.
       *
       * Implement this interface to create a custom form control directive
       * that integrates with Angular forms.
       *
       * @see DefaultValueAccessor
       *
       * \@publicApi
       * @record
       */


      function ControlValueAccessor() {}

      if (false) {}
      /**
       * Used to provide a `ControlValueAccessor` for form controls.
       *
       * See `DefaultValueAccessor` for how to implement one.
       *
       * \@publicApi
       * @type {?}
       */


      var NG_VALUE_ACCESSOR = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('NgValueAccessor');
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/checkbox_value_accessor.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var CHECKBOX_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return CheckboxControlValueAccessor;
        }),
        multi: true
      };
      /**
       * \@description
       * A `ControlValueAccessor` for writing a value and listening to changes on a checkbox input
       * element.
       *
       * \@usageNotes
       *
       * ### Using a checkbox with a reactive form.
       *
       * The following example shows how to use a checkbox with a reactive form.
       *
       * ```ts
       * const rememberLoginControl = new FormControl();
       * ```
       *
       * ```
       * <input type="checkbox" [formControl]="rememberLoginControl">
       * ```
       *
       * \@ngModule ReactiveFormsModule
       * \@ngModule FormsModule
       * \@publicApi
       */

      var CheckboxControlValueAccessor = /*#__PURE__*/function () {
        /**
         * @param {?} _renderer
         * @param {?} _elementRef
         */
        function CheckboxControlValueAccessor(_renderer, _elementRef) {
          _classCallCheck(this, CheckboxControlValueAccessor);

          this._renderer = _renderer;
          this._elementRef = _elementRef;
          /**
           * \@description
           * The registered callback function called when a change event occurs on the input element.
           */

          this.onChange =
          /**
          * @param {?} _
          * @return {?}
          */
          function (_) {};
          /**
           * \@description
           * The registered callback function called when a blur event occurs on the input element.
           */


          this.onTouched =
          /**
          * @return {?}
          */
          function () {};
        }
        /**
         * Sets the "checked" property on the input element.
         *
         * @param {?} value The checked value
         * @return {?}
         */


        _createClass(CheckboxControlValueAccessor, [{
          key: "writeValue",
          value: function writeValue(value) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'checked', value);
          }
          /**
           * \@description
           * Registers a function called when the control value changes.
           *
           * @param {?} fn The callback function
           * @return {?}
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.onChange = fn;
          }
          /**
           * \@description
           * Registers a function called when the control is touched.
           *
           * @param {?} fn The callback function
           * @return {?}
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
          /**
           * Sets the "disabled" property on the input element.
           *
           * @param {?} isDisabled The disabled value
           * @return {?}
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
          }
        }]);

        return CheckboxControlValueAccessor;
      }();

      CheckboxControlValueAccessor.ɵfac = function CheckboxControlValueAccessor_Factory(t) {
        return new (t || CheckboxControlValueAccessor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]));
      };

      CheckboxControlValueAccessor.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: CheckboxControlValueAccessor,
        selectors: [["input", "type", "checkbox", "formControlName", ""], ["input", "type", "checkbox", "formControl", ""], ["input", "type", "checkbox", "ngModel", ""]],
        hostBindings: function CheckboxControlValueAccessor_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function CheckboxControlValueAccessor_change_HostBindingHandler($event) {
              return ctx.onChange($event.target.checked);
            })("blur", function CheckboxControlValueAccessor_blur_HostBindingHandler() {
              return ctx.onTouched();
            });
          }
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([CHECKBOX_VALUE_ACCESSOR])]
      });
      /** @nocollapse */

      CheckboxControlValueAccessor.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CheckboxControlValueAccessor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',
            host: {
              '(change)': 'onChange($event.target.checked)',
              '(blur)': 'onTouched()'
            },
            providers: [CHECKBOX_VALUE_ACCESSOR]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/default_value_accessor.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var DEFAULT_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return DefaultValueAccessor;
        }),
        multi: true
      };
      /**
       * We must check whether the agent is Android because composition events
       * behave differently between iOS and Android.
       * @return {?}
       */

      function _isAndroid() {
        /** @type {?} */
        var userAgent = Object(_angular_common__WEBPACK_IMPORTED_MODULE_1__["ɵgetDOM"])() ? Object(_angular_common__WEBPACK_IMPORTED_MODULE_1__["ɵgetDOM"])().getUserAgent() : '';
        return /android (\d+)/.test(userAgent.toLowerCase());
      }
      /**
       * \@description
       * Provide this token to control if form directives buffer IME input until
       * the "compositionend" event occurs.
       * \@publicApi
       * @type {?}
       */


      var COMPOSITION_BUFFER_MODE = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('CompositionEventMode');
      /**
       * \@description
       * The default `ControlValueAccessor` for writing a value and listening to changes on input
       * elements. The accessor is used by the `FormControlDirective`, `FormControlName`, and
       * `NgModel` directives.
       *
       * \@usageNotes
       *
       * ### Using the default value accessor
       *
       * The following example shows how to use an input element that activates the default value accessor
       * (in this case, a text field).
       *
       * ```ts
       * const firstNameControl = new FormControl();
       * ```
       *
       * ```
       * <input type="text" [formControl]="firstNameControl">
       * ```
       *
       * \@ngModule ReactiveFormsModule
       * \@ngModule FormsModule
       * \@publicApi
       */

      var DefaultValueAccessor = /*#__PURE__*/function () {
        /**
         * @param {?} _renderer
         * @param {?} _elementRef
         * @param {?} _compositionMode
         */
        function DefaultValueAccessor(_renderer, _elementRef, _compositionMode) {
          _classCallCheck(this, DefaultValueAccessor);

          this._renderer = _renderer;
          this._elementRef = _elementRef;
          this._compositionMode = _compositionMode;
          /**
           * \@description
           * The registered callback function called when an input event occurs on the input element.
           */

          this.onChange =
          /**
          * @param {?} _
          * @return {?}
          */
          function (_) {};
          /**
           * \@description
           * The registered callback function called when a blur event occurs on the input element.
           */


          this.onTouched =
          /**
          * @return {?}
          */
          function () {};
          /**
           * Whether the user is creating a composition string (IME events).
           */


          this._composing = false;

          if (this._compositionMode == null) {
            this._compositionMode = !_isAndroid();
          }
        }
        /**
         * Sets the "value" property on the input element.
         *
         * @param {?} value The checked value
         * @return {?}
         */


        _createClass(DefaultValueAccessor, [{
          key: "writeValue",
          value: function writeValue(value) {
            /** @type {?} */
            var normalizedValue = value == null ? '' : value;

            this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);
          }
          /**
           * \@description
           * Registers a function called when the control value changes.
           *
           * @param {?} fn The callback function
           * @return {?}
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.onChange = fn;
          }
          /**
           * \@description
           * Registers a function called when the control is touched.
           *
           * @param {?} fn The callback function
           * @return {?}
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
          /**
           * Sets the "disabled" property on the input element.
           *
           * @param {?} isDisabled The disabled value
           * @return {?}
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
          }
          /**
           * \@internal
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "_handleInput",
          value: function _handleInput(value) {
            if (!this._compositionMode || this._compositionMode && !this._composing) {
              this.onChange(value);
            }
          }
          /**
           * \@internal
           * @return {?}
           */

        }, {
          key: "_compositionStart",
          value: function _compositionStart() {
            this._composing = true;
          }
          /**
           * \@internal
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "_compositionEnd",
          value: function _compositionEnd(value) {
            this._composing = false;
            this._compositionMode && this.onChange(value);
          }
        }]);

        return DefaultValueAccessor;
      }();

      DefaultValueAccessor.ɵfac = function DefaultValueAccessor_Factory(t) {
        return new (t || DefaultValueAccessor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](COMPOSITION_BUFFER_MODE, 8));
      };

      DefaultValueAccessor.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: DefaultValueAccessor,
        selectors: [["input", "formControlName", "", 3, "type", "checkbox"], ["textarea", "formControlName", ""], ["input", "formControl", "", 3, "type", "checkbox"], ["textarea", "formControl", ""], ["input", "ngModel", "", 3, "type", "checkbox"], ["textarea", "ngModel", ""], ["", "ngDefaultControl", ""]],
        hostBindings: function DefaultValueAccessor_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("input", function DefaultValueAccessor_input_HostBindingHandler($event) {
              return ctx._handleInput($event.target.value);
            })("blur", function DefaultValueAccessor_blur_HostBindingHandler() {
              return ctx.onTouched();
            })("compositionstart", function DefaultValueAccessor_compositionstart_HostBindingHandler() {
              return ctx._compositionStart();
            })("compositionend", function DefaultValueAccessor_compositionend_HostBindingHandler($event) {
              return ctx._compositionEnd($event.target.value);
            });
          }
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([DEFAULT_VALUE_ACCESSOR])]
      });
      /** @nocollapse */

      DefaultValueAccessor.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }, {
          type: Boolean,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [COMPOSITION_BUFFER_MODE]
          }]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DefaultValueAccessor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',
            // TODO: vsavkin replace the above selector with the one below it once
            // https://github.com/angular/angular/issues/3011 is implemented
            // selector: '[ngModel],[formControl],[formControlName]',
            host: {
              '(input)': '$any(this)._handleInput($event.target.value)',
              '(blur)': 'onTouched()',
              '(compositionstart)': '$any(this)._compositionStart()',
              '(compositionend)': '$any(this)._compositionEnd($event.target.value)'
            },
            providers: [DEFAULT_VALUE_ACCESSOR]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }, {
            type: Boolean,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [COMPOSITION_BUFFER_MODE]
            }]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/abstract_control_directive.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * \@description
       * Base class for control directives.
       *
       * This class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.
       *
       * \@publicApi
       * @abstract
       */


      var AbstractControlDirective = /*#__PURE__*/function () {
        function AbstractControlDirective() {
          _classCallCheck(this, AbstractControlDirective);
        }

        _createClass(AbstractControlDirective, [{
          key: "reset",

          /**
           * \@description
           * Resets the control with the provided value if the control is present.
           * @param {?=} value
           * @return {?}
           */
          value: function reset() {
            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
            if (this.control) this.control.reset(value);
          }
          /**
           * \@description
           * Reports whether the control with the given path has the error specified.
           *
           * \@usageNotes
           * For example, for the following `FormGroup`:
           *
           * ```
           * form = new FormGroup({
           *   address: new FormGroup({ street: new FormControl() })
           * });
           * ```
           *
           * The path to the 'street' control from the root form would be 'address' -> 'street'.
           *
           * It can be provided to this method in one of two formats:
           *
           * 1. An array of string control names, e.g. `['address', 'street']`
           * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
           *
           * If no path is given, this method checks for the error on the current control.
           *
           * @param {?} errorCode The code of the error to check
           * @param {?=} path A list of control names that designates how to move from the current control
           * to the control that should be queried for errors.
           *
           * @return {?} whether the given error is present in the control at the given path.
           *
           * If the control is not present, false is returned.
           */

        }, {
          key: "hasError",
          value: function hasError(errorCode, path) {
            return this.control ? this.control.hasError(errorCode, path) : false;
          }
          /**
           * \@description
           * Reports error data for the control with the given path.
           *
           * \@usageNotes
           * For example, for the following `FormGroup`:
           *
           * ```
           * form = new FormGroup({
           *   address: new FormGroup({ street: new FormControl() })
           * });
           * ```
           *
           * The path to the 'street' control from the root form would be 'address' -> 'street'.
           *
           * It can be provided to this method in one of two formats:
           *
           * 1. An array of string control names, e.g. `['address', 'street']`
           * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
           *
           * @param {?} errorCode The code of the error to check
           * @param {?=} path A list of control names that designates how to move from the current control
           * to the control that should be queried for errors.
           *
           * @return {?} error data for that particular error. If the control or error is not present,
           * null is returned.
           */

        }, {
          key: "getError",
          value: function getError(errorCode, path) {
            return this.control ? this.control.getError(errorCode, path) : null;
          }
        }, {
          key: "value",

          /**
           * \@description
           * Reports the value of the control if it is present, otherwise null.
           * @return {?}
           */
          get: function get() {
            return this.control ? this.control.value : null;
          }
          /**
           * \@description
           * Reports whether the control is valid. A control is considered valid if no
           * validation errors exist with the current value.
           * If the control is not present, null is returned.
           * @return {?}
           */

        }, {
          key: "valid",
          get: function get() {
            return this.control ? this.control.valid : null;
          }
          /**
           * \@description
           * Reports whether the control is invalid, meaning that an error exists in the input value.
           * If the control is not present, null is returned.
           * @return {?}
           */

        }, {
          key: "invalid",
          get: function get() {
            return this.control ? this.control.invalid : null;
          }
          /**
           * \@description
           * Reports whether a control is pending, meaning that that async validation is occurring and
           * errors are not yet available for the input value. If the control is not present, null is
           * returned.
           * @return {?}
           */

        }, {
          key: "pending",
          get: function get() {
            return this.control ? this.control.pending : null;
          }
          /**
           * \@description
           * Reports whether the control is disabled, meaning that the control is disabled
           * in the UI and is exempt from validation checks and excluded from aggregate
           * values of ancestor controls. If the control is not present, null is returned.
           * @return {?}
           */

        }, {
          key: "disabled",
          get: function get() {
            return this.control ? this.control.disabled : null;
          }
          /**
           * \@description
           * Reports whether the control is enabled, meaning that the control is included in ancestor
           * calculations of validity or value. If the control is not present, null is returned.
           * @return {?}
           */

        }, {
          key: "enabled",
          get: function get() {
            return this.control ? this.control.enabled : null;
          }
          /**
           * \@description
           * Reports the control's validation errors. If the control is not present, null is returned.
           * @return {?}
           */

        }, {
          key: "errors",
          get: function get() {
            return this.control ? this.control.errors : null;
          }
          /**
           * \@description
           * Reports whether the control is pristine, meaning that the user has not yet changed
           * the value in the UI. If the control is not present, null is returned.
           * @return {?}
           */

        }, {
          key: "pristine",
          get: function get() {
            return this.control ? this.control.pristine : null;
          }
          /**
           * \@description
           * Reports whether the control is dirty, meaning that the user has changed
           * the value in the UI. If the control is not present, null is returned.
           * @return {?}
           */

        }, {
          key: "dirty",
          get: function get() {
            return this.control ? this.control.dirty : null;
          }
          /**
           * \@description
           * Reports whether the control is touched, meaning that the user has triggered
           * a `blur` event on it. If the control is not present, null is returned.
           * @return {?}
           */

        }, {
          key: "touched",
          get: function get() {
            return this.control ? this.control.touched : null;
          }
          /**
           * \@description
           * Reports the validation status of the control. Possible values include:
           * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.
           * If the control is not present, null is returned.
           * @return {?}
           */

        }, {
          key: "status",
          get: function get() {
            return this.control ? this.control.status : null;
          }
          /**
           * \@description
           * Reports whether the control is untouched, meaning that the user has not yet triggered
           * a `blur` event on it. If the control is not present, null is returned.
           * @return {?}
           */

        }, {
          key: "untouched",
          get: function get() {
            return this.control ? this.control.untouched : null;
          }
          /**
           * \@description
           * Returns a multicasting observable that emits a validation status whenever it is
           * calculated for the control. If the control is not present, null is returned.
           * @return {?}
           */

        }, {
          key: "statusChanges",
          get: function get() {
            return this.control ? this.control.statusChanges : null;
          }
          /**
           * \@description
           * Returns a multicasting observable of value changes for the control that emits every time the
           * value of the control changes in the UI or programmatically.
           * If the control is not present, null is returned.
           * @return {?}
           */

        }, {
          key: "valueChanges",
          get: function get() {
            return this.control ? this.control.valueChanges : null;
          }
          /**
           * \@description
           * Returns an array that represents the path from the top-level form to this control.
           * Each index is the string name of the control on that level.
           * @return {?}
           */

        }, {
          key: "path",
          get: function get() {
            return null;
          }
        }]);

        return AbstractControlDirective;
      }();

      AbstractControlDirective.ɵfac = function AbstractControlDirective_Factory(t) {
        return new (t || AbstractControlDirective)();
      };

      AbstractControlDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: AbstractControlDirective
      });

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/control_container.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@description
       * A base class for directives that contain multiple registered instances of `NgControl`.
       * Only used by the forms module.
       *
       * \@publicApi
       * @abstract
       */


      var ControlContainer = /*#__PURE__*/function (_AbstractControlDirec) {
        _inherits(ControlContainer, _AbstractControlDirec);

        var _super17 = _createSuper(ControlContainer);

        function ControlContainer() {
          _classCallCheck(this, ControlContainer);

          return _super17.apply(this, arguments);
        }

        _createClass(ControlContainer, [{
          key: "formDirective",

          /**
           * \@description
           * The top-level form directive for the control.
           * @return {?}
           */
          get: function get() {
            return null;
          }
          /**
           * \@description
           * The path to this group.
           * @return {?}
           */

        }, {
          key: "path",
          get: function get() {
            return null;
          }
        }]);

        return ControlContainer;
      }(AbstractControlDirective);

      ControlContainer.ɵfac = function ControlContainer_Factory(t) {
        return ɵControlContainer_BaseFactory(t || ControlContainer);
      };

      ControlContainer.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: ControlContainer,
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      var ɵControlContainer_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](ControlContainer);

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/ng_control.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @return {?}
       */


      function unimplemented() {
        throw new Error('unimplemented');
      }
      /**
       * \@description
       * A base class that all control `FormControl`-based directives extend. It binds a `FormControl`
       * object to a DOM element.
       *
       * \@publicApi
       * @abstract
       */


      var NgControl = /*#__PURE__*/function (_AbstractControlDirec2) {
        _inherits(NgControl, _AbstractControlDirec2);

        var _super18 = _createSuper(NgControl);

        function NgControl() {
          var _this44;

          _classCallCheck(this, NgControl);

          _this44 = _super18.apply(this, arguments);
          /**
           * \@description
           * The parent form for the control.
           *
           * \@internal
           */

          _this44._parent = null;
          /**
           * \@description
           * The name for the control
           */

          _this44.name = null;
          /**
           * \@description
           * The value accessor for the control
           */

          _this44.valueAccessor = null;
          /**
           * \@description
           * The uncomposed array of synchronous validators for the control
           *
           * \@internal
           */

          _this44._rawValidators = [];
          /**
           * \@description
           * The uncomposed array of async validators for the control
           *
           * \@internal
           */

          _this44._rawAsyncValidators = [];
          return _this44;
        }
        /**
         * \@description
         * The registered synchronous validator function for the control
         *
         * @throws An exception that this method is not implemented
         * @return {?}
         */


        _createClass(NgControl, [{
          key: "validator",
          get: function get() {
            return (
              /** @type {?} */
              unimplemented()
            );
          }
          /**
           * \@description
           * The registered async validator function for the control
           *
           * @throws An exception that this method is not implemented
           * @return {?}
           */

        }, {
          key: "asyncValidator",
          get: function get() {
            return (
              /** @type {?} */
              unimplemented()
            );
          }
        }]);

        return NgControl;
      }(AbstractControlDirective);

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/ng_control_status.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var AbstractControlStatus = /*#__PURE__*/function () {
        /**
         * @param {?} cd
         */
        function AbstractControlStatus(cd) {
          _classCallCheck(this, AbstractControlStatus);

          this._cd = cd;
        }
        /**
         * @return {?}
         */


        _createClass(AbstractControlStatus, [{
          key: "ngClassUntouched",
          get: function get() {
            return this._cd.control ? this._cd.control.untouched : false;
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngClassTouched",
          get: function get() {
            return this._cd.control ? this._cd.control.touched : false;
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngClassPristine",
          get: function get() {
            return this._cd.control ? this._cd.control.pristine : false;
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngClassDirty",
          get: function get() {
            return this._cd.control ? this._cd.control.dirty : false;
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngClassValid",
          get: function get() {
            return this._cd.control ? this._cd.control.valid : false;
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngClassInvalid",
          get: function get() {
            return this._cd.control ? this._cd.control.invalid : false;
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngClassPending",
          get: function get() {
            return this._cd.control ? this._cd.control.pending : false;
          }
        }]);

        return AbstractControlStatus;
      }();

      if (false) {}
      /** @type {?} */


      var ngControlStatusHost = {
        '[class.ng-untouched]': 'ngClassUntouched',
        '[class.ng-touched]': 'ngClassTouched',
        '[class.ng-pristine]': 'ngClassPristine',
        '[class.ng-dirty]': 'ngClassDirty',
        '[class.ng-valid]': 'ngClassValid',
        '[class.ng-invalid]': 'ngClassInvalid',
        '[class.ng-pending]': 'ngClassPending'
      };
      /**
       * \@description
       * Directive automatically applied to Angular form controls that sets CSS classes
       * based on control status.
       *
       * \@usageNotes
       *
       * ### CSS classes applied
       *
       * The following classes are applied as the properties become true:
       *
       * * ng-valid
       * * ng-invalid
       * * ng-pending
       * * ng-pristine
       * * ng-dirty
       * * ng-untouched
       * * ng-touched
       *
       * \@ngModule ReactiveFormsModule
       * \@ngModule FormsModule
       * \@publicApi
       */

      var NgControlStatus = /*#__PURE__*/function (_AbstractControlStatu) {
        _inherits(NgControlStatus, _AbstractControlStatu);

        var _super19 = _createSuper(NgControlStatus);

        /**
         * @param {?} cd
         */
        function NgControlStatus(cd) {
          _classCallCheck(this, NgControlStatus);

          return _super19.call(this, cd);
        }

        return NgControlStatus;
      }(AbstractControlStatus);

      NgControlStatus.ɵfac = function NgControlStatus_Factory(t) {
        return new (t || NgControlStatus)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NgControl, 2));
      };

      NgControlStatus.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgControlStatus,
        selectors: [["", "formControlName", ""], ["", "ngModel", ""], ["", "formControl", ""]],
        hostVars: 14,
        hostBindings: function NgControlStatus_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("ng-untouched", ctx.ngClassUntouched)("ng-touched", ctx.ngClassTouched)("ng-pristine", ctx.ngClassPristine)("ng-dirty", ctx.ngClassDirty)("ng-valid", ctx.ngClassValid)("ng-invalid", ctx.ngClassInvalid)("ng-pending", ctx.ngClassPending);
          }
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });
      /** @nocollapse */

      NgControlStatus.ctorParameters = function () {
        return [{
          type: NgControl,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgControlStatus, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[formControlName],[ngModel],[formControl]',
            host: ngControlStatusHost
          }]
        }], function () {
          return [{
            type: NgControl,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }]
          }];
        }, null);
      })();
      /**
       * \@description
       * Directive automatically applied to Angular form groups that sets CSS classes
       * based on control status (valid/invalid/dirty/etc).
       *
       * @see `NgControlStatus`
       *
       * \@ngModule ReactiveFormsModule
       * \@ngModule FormsModule
       * \@publicApi
       */


      var NgControlStatusGroup = /*#__PURE__*/function (_AbstractControlStatu2) {
        _inherits(NgControlStatusGroup, _AbstractControlStatu2);

        var _super20 = _createSuper(NgControlStatusGroup);

        /**
         * @param {?} cd
         */
        function NgControlStatusGroup(cd) {
          _classCallCheck(this, NgControlStatusGroup);

          return _super20.call(this, cd);
        }

        return NgControlStatusGroup;
      }(AbstractControlStatus);

      NgControlStatusGroup.ɵfac = function NgControlStatusGroup_Factory(t) {
        return new (t || NgControlStatusGroup)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ControlContainer, 2));
      };

      NgControlStatusGroup.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgControlStatusGroup,
        selectors: [["", "formGroupName", ""], ["", "formArrayName", ""], ["", "ngModelGroup", ""], ["", "formGroup", ""], ["form", 3, "ngNoForm", ""], ["", "ngForm", ""]],
        hostVars: 14,
        hostBindings: function NgControlStatusGroup_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("ng-untouched", ctx.ngClassUntouched)("ng-touched", ctx.ngClassTouched)("ng-pristine", ctx.ngClassPristine)("ng-dirty", ctx.ngClassDirty)("ng-valid", ctx.ngClassValid)("ng-invalid", ctx.ngClassInvalid)("ng-pending", ctx.ngClassPending);
          }
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });
      /** @nocollapse */

      NgControlStatusGroup.ctorParameters = function () {
        return [{
          type: ControlContainer,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgControlStatusGroup, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',
            host: ngControlStatusHost
          }]
        }], function () {
          return [{
            type: ControlContainer,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }]
          }];
        }, null);
      })();
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/validators.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @param {?} value
       * @return {?}
       */


      function isEmptyInputValue(value) {
        // we don't check for string here so it also works with arrays
        return value == null || value.length === 0;
      }
      /**
       * \@description
       * An `InjectionToken` for registering additional synchronous validators used with `AbstractControl`s.
       *
       * @see `NG_ASYNC_VALIDATORS`
       *
       * \@usageNotes
       *
       * ### Providing a custom validator
       *
       * The following example registers a custom validator directive. Adding the validator to the
       * existing collection of validators requires the `multi: true` option.
       *
       * ```typescript
       * \@Directive({
       *   selector: '[customValidator]',
       *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]
       * })
       * class CustomValidatorDirective implements Validator {
       *   validate(control: AbstractControl): ValidationErrors | null {
       *     return { 'custom': true };
       *   }
       * }
       * ```
       *
       * \@publicApi
       * @type {?}
       */


      var NG_VALIDATORS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('NgValidators');
      /**
       * \@description
       * An `InjectionToken` for registering additional asynchronous validators used with `AbstractControl`s.
       *
       * @see `NG_VALIDATORS`
       *
       * \@publicApi
       * @type {?}
       */

      var NG_ASYNC_VALIDATORS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('NgAsyncValidators');
      /**
       * A regular expression that matches valid e-mail addresses.
       *
       * At a high level, this regexp matches e-mail addresses of the format `local-part\@tld`, where:
       * - `local-part` consists of one or more of the allowed characters (alphanumeric and some
       *   punctuation symbols).
       * - `local-part` cannot begin or end with a period (`.`).
       * - `local-part` cannot be longer than 64 characters.
       * - `tld` consists of one or more `labels` separated by periods (`.`). For example `localhost` or
       *   `foo.com`.
       * - A `label` consists of one or more of the allowed characters (alphanumeric, dashes (`-`) and
       *   periods (`.`)).
       * - A `label` cannot begin or end with a dash (`-`) or a period (`.`).
       * - A `label` cannot be longer than 63 characters.
       * - The whole address cannot be longer than 254 characters.
       *
       * ## Implementation background
       *
       * This regexp was ported over from AngularJS (see there for git history):
       * https://github.com/angular/angular.js/blob/c133ef836/src/ng/directive/input.js#L27
       * It is based on the
       * [WHATWG version](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with
       * some enhancements to incorporate more RFC rules (such as rules related to domain names and the
       * lengths of different parts of the address). The main differences from the WHATWG version are:
       *   - Disallow `local-part` to begin or end with a period (`.`).
       *   - Disallow `local-part` length to exceed 64 characters.
       *   - Disallow total address length to exceed 254 characters.
       *
       * See [this commit](https://github.com/angular/angular.js/commit/f3f5cf72e) for more details.
       * @type {?}
       */

      var EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
      /**
       * \@description
       * Provides a set of built-in validators that can be used by form controls.
       *
       * A validator is a function that processes a `FormControl` or collection of
       * controls and returns an error map or null. A null map means that validation has passed.
       *
       * @see [Form Validation](/guide/form-validation)
       *
       * \@publicApi
       */

      var Validators = /*#__PURE__*/function () {
        function Validators() {
          _classCallCheck(this, Validators);
        }

        _createClass(Validators, null, [{
          key: "min",

          /**
           * \@description
           * Validator that requires the control's value to be greater than or equal to the provided number.
           * The validator exists only as a function and not as a directive.
           *
           * \@usageNotes
           *
           * ### Validate against a minimum of 3
           *
           * ```typescript
           * const control = new FormControl(2, Validators.min(3));
           *
           * console.log(control.errors); // {min: {min: 3, actual: 2}}
           * ```
           *
           * @see `updateValueAndValidity()`
           *
           * @param {?} min
           * @return {?} A validator function that returns an error map with the
           * `min` property if the validation check fails, otherwise `null`.
           *
           */
          value: function min(_min) {
            return (
              /**
              * @param {?} control
              * @return {?}
              */
              function (control) {
                if (isEmptyInputValue(control.value) || isEmptyInputValue(_min)) {
                  return null; // don't validate empty values to allow optional controls
                }
                /** @type {?} */


                var value = parseFloat(control.value); // Controls with NaN values after parsing should be treated as not having a
                // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min

                return !isNaN(value) && value < _min ? {
                  'min': {
                    'min': _min,
                    'actual': control.value
                  }
                } : null;
              }
            );
          }
          /**
           * \@description
           * Validator that requires the control's value to be less than or equal to the provided number.
           * The validator exists only as a function and not as a directive.
           *
           * \@usageNotes
           *
           * ### Validate against a maximum of 15
           *
           * ```typescript
           * const control = new FormControl(16, Validators.max(15));
           *
           * console.log(control.errors); // {max: {max: 15, actual: 16}}
           * ```
           *
           * @see `updateValueAndValidity()`
           *
           * @param {?} max
           * @return {?} A validator function that returns an error map with the
           * `max` property if the validation check fails, otherwise `null`.
           *
           */

        }, {
          key: "max",
          value: function max(_max) {
            return (
              /**
              * @param {?} control
              * @return {?}
              */
              function (control) {
                if (isEmptyInputValue(control.value) || isEmptyInputValue(_max)) {
                  return null; // don't validate empty values to allow optional controls
                }
                /** @type {?} */


                var value = parseFloat(control.value); // Controls with NaN values after parsing should be treated as not having a
                // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max

                return !isNaN(value) && value > _max ? {
                  'max': {
                    'max': _max,
                    'actual': control.value
                  }
                } : null;
              }
            );
          }
          /**
           * \@description
           * Validator that requires the control have a non-empty value.
           *
           * \@usageNotes
           *
           * ### Validate that the field is non-empty
           *
           * ```typescript
           * const control = new FormControl('', Validators.required);
           *
           * console.log(control.errors); // {required: true}
           * ```
           *
           * @see `updateValueAndValidity()`
           *
           * @param {?} control
           * @return {?} An error map with the `required` property
           * if the validation check fails, otherwise `null`.
           *
           */

        }, {
          key: "required",
          value: function required(control) {
            return isEmptyInputValue(control.value) ? {
              'required': true
            } : null;
          }
          /**
           * \@description
           * Validator that requires the control's value be true. This validator is commonly
           * used for required checkboxes.
           *
           * \@usageNotes
           *
           * ### Validate that the field value is true
           *
           * ```typescript
           * const control = new FormControl('', Validators.requiredTrue);
           *
           * console.log(control.errors); // {required: true}
           * ```
           *
           * @see `updateValueAndValidity()`
           *
           * @param {?} control
           * @return {?} An error map that contains the `required` property
           * set to `true` if the validation check fails, otherwise `null`.
           *
           */

        }, {
          key: "requiredTrue",
          value: function requiredTrue(control) {
            return control.value === true ? null : {
              'required': true
            };
          }
          /**
           * \@description
           * Validator that requires the control's value pass an email validation test.
           *
           * Tests the value using a [regular expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)
           * pattern suitable for common usecases. The pattern is based on the definition of a valid email
           * address in the [WHATWG HTML specification](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address)
           * with some enhancements to incorporate more RFC rules (such as rules related to domain names and
           * the lengths of different parts of the address).
           *
           * The differences from the WHATWG version include:
           * - Disallow `local-part` (the part before the `\@` symbol) to begin or end with a period (`.`).
           * - Disallow `local-part` to be longer than 64 characters.
           * - Disallow the whole address to be longer than 254 characters.
           *
           * If this pattern does not satisfy your business needs, you can use `Validators.pattern()` to
           * validate the value against a different pattern.
           *
           * \@usageNotes
           *
           * ### Validate that the field matches a valid email pattern
           *
           * ```typescript
           * const control = new FormControl('bad\@', Validators.email);
           *
           * console.log(control.errors); // {email: true}
           * ```
           *
           * @see `updateValueAndValidity()`
           *
           * @param {?} control
           * @return {?} An error map with the `email` property
           * if the validation check fails, otherwise `null`.
           *
           */

        }, {
          key: "email",
          value: function email(control) {
            if (isEmptyInputValue(control.value)) {
              return null; // don't validate empty values to allow optional controls
            }

            return EMAIL_REGEXP.test(control.value) ? null : {
              'email': true
            };
          }
          /**
           * \@description
           * Validator that requires the length of the control's value to be greater than or equal
           * to the provided minimum length. This validator is also provided by default if you use the
           * the HTML5 `minlength` attribute.
           *
           * \@usageNotes
           *
           * ### Validate that the field has a minimum of 3 characters
           *
           * ```typescript
           * const control = new FormControl('ng', Validators.minLength(3));
           *
           * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}
           * ```
           *
           * ```html
           * <input minlength="5">
           * ```
           *
           * @see `updateValueAndValidity()`
           *
           * @param {?} minLength
           * @return {?} A validator function that returns an error map with the
           * `minlength` if the validation check fails, otherwise `null`.
           *
           */

        }, {
          key: "minLength",
          value: function minLength(_minLength) {
            return (
              /**
              * @param {?} control
              * @return {?}
              */
              function (control) {
                if (isEmptyInputValue(control.value)) {
                  return null; // don't validate empty values to allow optional controls
                }
                /** @type {?} */


                var length = control.value ? control.value.length : 0;
                return length < _minLength ? {
                  'minlength': {
                    'requiredLength': _minLength,
                    'actualLength': length
                  }
                } : null;
              }
            );
          }
          /**
           * \@description
           * Validator that requires the length of the control's value to be less than or equal
           * to the provided maximum length. This validator is also provided by default if you use the
           * the HTML5 `maxlength` attribute.
           *
           * \@usageNotes
           *
           * ### Validate that the field has maximum of 5 characters
           *
           * ```typescript
           * const control = new FormControl('Angular', Validators.maxLength(5));
           *
           * console.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}
           * ```
           *
           * ```html
           * <input maxlength="5">
           * ```
           *
           * @see `updateValueAndValidity()`
           *
           * @param {?} maxLength
           * @return {?} A validator function that returns an error map with the
           * `maxlength` property if the validation check fails, otherwise `null`.
           *
           */

        }, {
          key: "maxLength",
          value: function maxLength(_maxLength) {
            return (
              /**
              * @param {?} control
              * @return {?}
              */
              function (control) {
                /** @type {?} */
                var length = control.value ? control.value.length : 0;
                return length > _maxLength ? {
                  'maxlength': {
                    'requiredLength': _maxLength,
                    'actualLength': length
                  }
                } : null;
              }
            );
          }
          /**
           * \@description
           * Validator that requires the control's value to match a regex pattern. This validator is also
           * provided by default if you use the HTML5 `pattern` attribute.
           *
           * \@usageNotes
           *
           * ### Validate that the field only contains letters or spaces
           *
           * ```typescript
           * const control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));
           *
           * console.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}
           * ```
           *
           * ```html
           * <input pattern="[a-zA-Z ]*">
           * ```
           *
           * @see `updateValueAndValidity()`
           *
           * @param {?} pattern A regular expression to be used as is to test the values, or a string.
           * If a string is passed, the `^` character is prepended and the `$` character is
           * appended to the provided string (if not already present), and the resulting regular
           * expression is used to test the values.
           *
           * @return {?} A validator function that returns an error map with the
           * `pattern` property if the validation check fails, otherwise `null`.
           *
           */

        }, {
          key: "pattern",
          value: function pattern(_pattern) {
            if (!_pattern) return Validators.nullValidator;
            /** @type {?} */

            var regex;
            /** @type {?} */

            var regexStr;

            if (typeof _pattern === 'string') {
              regexStr = '';
              if (_pattern.charAt(0) !== '^') regexStr += '^';
              regexStr += _pattern;
              if (_pattern.charAt(_pattern.length - 1) !== '$') regexStr += '$';
              regex = new RegExp(regexStr);
            } else {
              regexStr = _pattern.toString();
              regex = _pattern;
            }

            return (
              /**
              * @param {?} control
              * @return {?}
              */
              function (control) {
                if (isEmptyInputValue(control.value)) {
                  return null; // don't validate empty values to allow optional controls
                }
                /** @type {?} */


                var value = control.value;
                return regex.test(value) ? null : {
                  'pattern': {
                    'requiredPattern': regexStr,
                    'actualValue': value
                  }
                };
              }
            );
          }
          /**
           * \@description
           * Validator that performs no operation.
           *
           * @see `updateValueAndValidity()`
           *
           * @param {?} control
           * @return {?}
           */

        }, {
          key: "nullValidator",
          value: function nullValidator(control) {
            return null;
          }
          /**
           * @param {?} validators
           * @return {?}
           */

        }, {
          key: "compose",
          value: function compose(validators) {
            if (!validators) return null;
            /** @type {?} */

            var presentValidators =
            /** @type {?} */
            validators.filter(isPresent);
            if (presentValidators.length == 0) return null;
            return (
              /**
              * @param {?} control
              * @return {?}
              */
              function (control) {
                return _mergeErrors(_executeValidators(control, presentValidators));
              }
            );
          }
          /**
           * \@description
           * Compose multiple async validators into a single function that returns the union
           * of the individual error objects for the provided control.
           *
           * @see `updateValueAndValidity()`
           *
           * @param {?} validators
           * @return {?} A validator function that returns an error map with the
           * merged error objects of the async validators if the validation check fails, otherwise `null`.
           *
           */

        }, {
          key: "composeAsync",
          value: function composeAsync(validators) {
            if (!validators) return null;
            /** @type {?} */

            var presentValidators =
            /** @type {?} */
            validators.filter(isPresent);
            if (presentValidators.length == 0) return null;
            return (
              /**
              * @param {?} control
              * @return {?}
              */
              function (control) {
                /** @type {?} */
                var observables = _executeAsyncValidators(control, presentValidators).map(toObservable);

                return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["forkJoin"])(observables).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(_mergeErrors));
              }
            );
          }
        }]);

        return Validators;
      }();
      /**
       * @param {?} o
       * @return {?}
       */


      function isPresent(o) {
        return o != null;
      }
      /**
       * @param {?} r
       * @return {?}
       */


      function toObservable(r) {
        /** @type {?} */
        var obs = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisPromise"])(r) ? Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["from"])(r) : r;

        if (!Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisObservable"])(obs)) {
          throw new Error("Expected validator to return Promise or Observable.");
        }

        return obs;
      }
      /**
       * @param {?} control
       * @param {?} validators
       * @return {?}
       */


      function _executeValidators(control, validators) {
        return validators.map(
        /**
        * @param {?} v
        * @return {?}
        */
        function (v) {
          return v(control);
        });
      }
      /**
       * @param {?} control
       * @param {?} validators
       * @return {?}
       */


      function _executeAsyncValidators(control, validators) {
        return validators.map(
        /**
        * @param {?} v
        * @return {?}
        */
        function (v) {
          return v(control);
        });
      }
      /**
       * @param {?} arrayOfErrors
       * @return {?}
       */


      function _mergeErrors(arrayOfErrors) {
        /** @type {?} */
        var res = {}; // Not using Array.reduce here due to a Chrome 80 bug
        // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982

        arrayOfErrors.forEach(
        /**
        * @param {?} errors
        * @return {?}
        */
        function (errors) {
          res = errors != null ? Object.assign(Object.assign({},
          /** @type {?} */
          res), errors) :
          /** @type {?} */
          res;
        });
        return Object.keys(res).length === 0 ? null : res;
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/normalize_validator.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @param {?} validator
       * @return {?}
       */


      function normalizeValidator(validator) {
        if (
        /** @type {?} */
        validator.validate) {
          return (
            /**
            * @param {?} c
            * @return {?}
            */
            function (c) {
              return (
                /** @type {?} */
                validator.validate(c)
              );
            }
          );
        } else {
          return (
            /** @type {?} */
            validator
          );
        }
      }
      /**
       * @param {?} validator
       * @return {?}
       */


      function normalizeAsyncValidator(validator) {
        if (
        /** @type {?} */
        validator.validate) {
          return (
            /**
            * @param {?} c
            * @return {?}
            */
            function (c) {
              return (
                /** @type {?} */
                validator.validate(c)
              );
            }
          );
        } else {
          return (
            /** @type {?} */
            validator
          );
        }
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/number_value_accessor.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var NUMBER_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return NumberValueAccessor;
        }),
        multi: true
      };
      /**
       * \@description
       * The `ControlValueAccessor` for writing a number value and listening to number input changes.
       * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`
       * directives.
       *
       * \@usageNotes
       *
       * ### Using a number input with a reactive form.
       *
       * The following example shows how to use a number input with a reactive form.
       *
       * ```ts
       * const totalCountControl = new FormControl();
       * ```
       *
       * ```
       * <input type="number" [formControl]="totalCountControl">
       * ```
       *
       * \@ngModule ReactiveFormsModule
       * \@ngModule FormsModule
       * \@publicApi
       */

      var NumberValueAccessor = /*#__PURE__*/function () {
        /**
         * @param {?} _renderer
         * @param {?} _elementRef
         */
        function NumberValueAccessor(_renderer, _elementRef) {
          _classCallCheck(this, NumberValueAccessor);

          this._renderer = _renderer;
          this._elementRef = _elementRef;
          /**
           * \@description
           * The registered callback function called when a change or input event occurs on the input
           * element.
           */

          this.onChange =
          /**
          * @param {?} _
          * @return {?}
          */
          function (_) {};
          /**
           * \@description
           * The registered callback function called when a blur event occurs on the input element.
           */


          this.onTouched =
          /**
          * @return {?}
          */
          function () {};
        }
        /**
         * Sets the "value" property on the input element.
         *
         * @param {?} value The checked value
         * @return {?}
         */


        _createClass(NumberValueAccessor, [{
          key: "writeValue",
          value: function writeValue(value) {
            // The value needs to be normalized for IE9, otherwise it is set to 'null' when null

            /** @type {?} */
            var normalizedValue = value == null ? '' : value;

            this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);
          }
          /**
           * \@description
           * Registers a function called when the control value changes.
           *
           * @param {?} fn The callback function
           * @return {?}
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.onChange =
            /**
            * @param {?} value
            * @return {?}
            */
            function (value) {
              fn(value == '' ? null : parseFloat(value));
            };
          }
          /**
           * \@description
           * Registers a function called when the control is touched.
           *
           * @param {?} fn The callback function
           * @return {?}
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
          /**
           * Sets the "disabled" property on the input element.
           *
           * @param {?} isDisabled The disabled value
           * @return {?}
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
          }
        }]);

        return NumberValueAccessor;
      }();

      NumberValueAccessor.ɵfac = function NumberValueAccessor_Factory(t) {
        return new (t || NumberValueAccessor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]));
      };

      NumberValueAccessor.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NumberValueAccessor,
        selectors: [["input", "type", "number", "formControlName", ""], ["input", "type", "number", "formControl", ""], ["input", "type", "number", "ngModel", ""]],
        hostBindings: function NumberValueAccessor_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function NumberValueAccessor_change_HostBindingHandler($event) {
              return ctx.onChange($event.target.value);
            })("input", function NumberValueAccessor_input_HostBindingHandler($event) {
              return ctx.onChange($event.target.value);
            })("blur", function NumberValueAccessor_blur_HostBindingHandler() {
              return ctx.onTouched();
            });
          }
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([NUMBER_VALUE_ACCESSOR])]
      });
      /** @nocollapse */

      NumberValueAccessor.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NumberValueAccessor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',
            host: {
              '(change)': 'onChange($event.target.value)',
              '(input)': 'onChange($event.target.value)',
              '(blur)': 'onTouched()'
            },
            providers: [NUMBER_VALUE_ACCESSOR]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/radio_control_value_accessor.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var RADIO_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return RadioControlValueAccessor;
        }),
        multi: true
      };
      /**
       * \@description
       * Class used by Angular to track radio buttons. For internal use only.
       */

      var RadioControlRegistry = /*#__PURE__*/function () {
        function RadioControlRegistry() {
          _classCallCheck(this, RadioControlRegistry);

          this._accessors = [];
        }
        /**
         * \@description
         * Adds a control to the internal registry. For internal use only.
         * @param {?} control
         * @param {?} accessor
         * @return {?}
         */


        _createClass(RadioControlRegistry, [{
          key: "add",
          value: function add(control, accessor) {
            this._accessors.push([control, accessor]);
          }
          /**
           * \@description
           * Removes a control from the internal registry. For internal use only.
           * @param {?} accessor
           * @return {?}
           */

        }, {
          key: "remove",
          value: function remove(accessor) {
            for (var i = this._accessors.length - 1; i >= 0; --i) {
              if (this._accessors[i][1] === accessor) {
                this._accessors.splice(i, 1);

                return;
              }
            }
          }
          /**
           * \@description
           * Selects a radio button. For internal use only.
           * @param {?} accessor
           * @return {?}
           */

        }, {
          key: "select",
          value: function select(accessor) {
            var _this45 = this;

            this._accessors.forEach(
            /**
            * @param {?} c
            * @return {?}
            */
            function (c) {
              if (_this45._isSameGroup(c, accessor) && c[1] !== accessor) {
                c[1].fireUncheck(accessor.value);
              }
            });
          }
          /**
           * @private
           * @param {?} controlPair
           * @param {?} accessor
           * @return {?}
           */

        }, {
          key: "_isSameGroup",
          value: function _isSameGroup(controlPair, accessor) {
            if (!controlPair[0].control) return false;
            return controlPair[0]._parent === accessor._control._parent && controlPair[1].name === accessor.name;
          }
        }]);

        return RadioControlRegistry;
      }();

      RadioControlRegistry.ɵfac = function RadioControlRegistry_Factory(t) {
        return new (t || RadioControlRegistry)();
      };

      RadioControlRegistry.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: RadioControlRegistry,
        factory: RadioControlRegistry.ɵfac
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](RadioControlRegistry, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
        }], function () {
          return [];
        }, null);
      })();

      if (false) {}
      /**
       * \@description
       * The `ControlValueAccessor` for writing radio control values and listening to radio control
       * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and
       * `NgModel` directives.
       *
       * \@usageNotes
       *
       * ### Using radio buttons with reactive form directives
       *
       * The follow example shows how to use radio buttons in a reactive form. When using radio buttons in
       * a reactive form, radio buttons in the same group should have the same `formControlName`.
       * Providing a `name` attribute is optional.
       *
       * {\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}
       *
       * \@ngModule ReactiveFormsModule
       * \@ngModule FormsModule
       * \@publicApi
       */


      var RadioControlValueAccessor = /*#__PURE__*/function () {
        /**
         * @param {?} _renderer
         * @param {?} _elementRef
         * @param {?} _registry
         * @param {?} _injector
         */
        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
          _classCallCheck(this, RadioControlValueAccessor);

          this._renderer = _renderer;
          this._elementRef = _elementRef;
          this._registry = _registry;
          this._injector = _injector;
          /**
           * \@description
           * The registered callback function called when a change event occurs on the input element.
           */

          this.onChange =
          /**
          * @return {?}
          */
          function () {};
          /**
           * \@description
           * The registered callback function called when a blur event occurs on the input element.
           */


          this.onTouched =
          /**
          * @return {?}
          */
          function () {};
        }
        /**
         * \@description
         * A lifecycle method called when the directive is initialized. For internal use only.
         * @return {?}
         */


        _createClass(RadioControlValueAccessor, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            this._control = this._injector.get(NgControl);

            this._checkName();

            this._registry.add(this._control, this);
          }
          /**
           * \@description
           * Lifecycle method called before the directive's instance is destroyed. For internal use only.
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._registry.remove(this);
          }
          /**
           * \@description
           * Sets the "checked" property value on the radio input element.
           *
           * @param {?} value The checked value
           * @return {?}
           */

        }, {
          key: "writeValue",
          value: function writeValue(value) {
            this._state = value === this.value;

            this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);
          }
          /**
           * \@description
           * Registers a function called when the control value changes.
           *
           * @param {?} fn The callback function
           * @return {?}
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            var _this46 = this;

            this._fn = fn;

            this.onChange =
            /**
            * @return {?}
            */
            function () {
              fn(_this46.value);

              _this46._registry.select(_this46);
            };
          }
          /**
           * Sets the "value" on the radio input element and unchecks it.
           *
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "fireUncheck",
          value: function fireUncheck(value) {
            this.writeValue(value);
          }
          /**
           * \@description
           * Registers a function called when the control is touched.
           *
           * @param {?} fn The callback function
           * @return {?}
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
          /**
           * Sets the "disabled" property on the input element.
           *
           * @param {?} isDisabled The disabled value
           * @return {?}
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_checkName",
          value: function _checkName() {
            if (this.name && this.formControlName && this.name !== this.formControlName) {
              this._throwNameError();
            }

            if (!this.name && this.formControlName) this.name = this.formControlName;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_throwNameError",
          value: function _throwNameError() {
            throw new Error("\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    ");
          }
        }]);

        return RadioControlValueAccessor;
      }();

      RadioControlValueAccessor.ɵfac = function RadioControlValueAccessor_Factory(t) {
        return new (t || RadioControlValueAccessor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](RadioControlRegistry), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"]));
      };

      RadioControlValueAccessor.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: RadioControlValueAccessor,
        selectors: [["input", "type", "radio", "formControlName", ""], ["input", "type", "radio", "formControl", ""], ["input", "type", "radio", "ngModel", ""]],
        hostBindings: function RadioControlValueAccessor_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function RadioControlValueAccessor_change_HostBindingHandler() {
              return ctx.onChange();
            })("blur", function RadioControlValueAccessor_blur_HostBindingHandler() {
              return ctx.onTouched();
            });
          }
        },
        inputs: {
          name: "name",
          formControlName: "formControlName",
          value: "value"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([RADIO_VALUE_ACCESSOR])]
      });
      /** @nocollapse */

      RadioControlValueAccessor.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }, {
          type: RadioControlRegistry
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"]
        }];
      };

      RadioControlValueAccessor.propDecorators = {
        name: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        formControlName: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](RadioControlValueAccessor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',
            host: {
              '(change)': 'onChange()',
              '(blur)': 'onTouched()'
            },
            providers: [RADIO_VALUE_ACCESSOR]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }, {
            type: RadioControlRegistry
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"]
          }];
        }, {
          name: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          formControlName: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          value: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/range_value_accessor.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var RANGE_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return RangeValueAccessor;
        }),
        multi: true
      };
      /**
       * \@description
       * The `ControlValueAccessor` for writing a range value and listening to range input changes.
       * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`
       * directives.
       *
       * \@usageNotes
       *
       * ### Using a range input with a reactive form
       *
       * The following example shows how to use a range input with a reactive form.
       *
       * ```ts
       * const ageControl = new FormControl();
       * ```
       *
       * ```
       * <input type="range" [formControl]="ageControl">
       * ```
       *
       * \@ngModule ReactiveFormsModule
       * \@ngModule FormsModule
       * \@publicApi
       */

      var RangeValueAccessor = /*#__PURE__*/function () {
        /**
         * @param {?} _renderer
         * @param {?} _elementRef
         */
        function RangeValueAccessor(_renderer, _elementRef) {
          _classCallCheck(this, RangeValueAccessor);

          this._renderer = _renderer;
          this._elementRef = _elementRef;
          /**
           * \@description
           * The registered callback function called when a change or input event occurs on the input
           * element.
           */

          this.onChange =
          /**
          * @param {?} _
          * @return {?}
          */
          function (_) {};
          /**
           * \@description
           * The registered callback function called when a blur event occurs on the input element.
           */


          this.onTouched =
          /**
          * @return {?}
          */
          function () {};
        }
        /**
         * Sets the "value" property on the input element.
         *
         * @param {?} value The checked value
         * @return {?}
         */


        _createClass(RangeValueAccessor, [{
          key: "writeValue",
          value: function writeValue(value) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'value', parseFloat(value));
          }
          /**
           * \@description
           * Registers a function called when the control value changes.
           *
           * @param {?} fn The callback function
           * @return {?}
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.onChange =
            /**
            * @param {?} value
            * @return {?}
            */
            function (value) {
              fn(value == '' ? null : parseFloat(value));
            };
          }
          /**
           * \@description
           * Registers a function called when the control is touched.
           *
           * @param {?} fn The callback function
           * @return {?}
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
          /**
           * Sets the "disabled" property on the range input element.
           *
           * @param {?} isDisabled The disabled value
           * @return {?}
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
          }
        }]);

        return RangeValueAccessor;
      }();

      RangeValueAccessor.ɵfac = function RangeValueAccessor_Factory(t) {
        return new (t || RangeValueAccessor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]));
      };

      RangeValueAccessor.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: RangeValueAccessor,
        selectors: [["input", "type", "range", "formControlName", ""], ["input", "type", "range", "formControl", ""], ["input", "type", "range", "ngModel", ""]],
        hostBindings: function RangeValueAccessor_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function RangeValueAccessor_change_HostBindingHandler($event) {
              return ctx.onChange($event.target.value);
            })("input", function RangeValueAccessor_input_HostBindingHandler($event) {
              return ctx.onChange($event.target.value);
            })("blur", function RangeValueAccessor_blur_HostBindingHandler() {
              return ctx.onTouched();
            });
          }
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([RANGE_VALUE_ACCESSOR])]
      });
      /** @nocollapse */

      RangeValueAccessor.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](RangeValueAccessor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',
            host: {
              '(change)': 'onChange($event.target.value)',
              '(input)': 'onChange($event.target.value)',
              '(blur)': 'onTouched()'
            },
            providers: [RANGE_VALUE_ACCESSOR]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/error_examples.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** @type {?} */


      var FormErrorExamples = {
        formControlName: "\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });",
        formGroupName: "\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });",
        formArrayName: "\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; index as i\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });",
        ngModelGroup: "\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>",
        ngModelWithFormGroup: "\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  "
      };
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/reactive_errors.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      var ReactiveErrors = /*#__PURE__*/function () {
        function ReactiveErrors() {
          _classCallCheck(this, ReactiveErrors);
        }

        _createClass(ReactiveErrors, null, [{
          key: "controlParentException",

          /**
           * @return {?}
           */
          value: function controlParentException() {
            throw new Error("formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ".concat(FormErrorExamples.formControlName));
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngModelGroupException",
          value: function ngModelGroupException() {
            throw new Error("formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        ".concat(FormErrorExamples.formGroupName, "\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        ").concat(FormErrorExamples.ngModelGroup));
          }
          /**
           * @return {?}
           */

        }, {
          key: "missingFormException",
          value: function missingFormException() {
            throw new Error("formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       ".concat(FormErrorExamples.formControlName));
          }
          /**
           * @return {?}
           */

        }, {
          key: "groupParentException",
          value: function groupParentException() {
            throw new Error("formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ".concat(FormErrorExamples.formGroupName));
          }
          /**
           * @return {?}
           */

        }, {
          key: "arrayParentException",
          value: function arrayParentException() {
            throw new Error("formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        ".concat(FormErrorExamples.formArrayName));
          }
          /**
           * @return {?}
           */

        }, {
          key: "disabledAttrWarning",
          value: function disabledAttrWarning() {
            console.warn("\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    ");
          }
          /**
           * @param {?} directiveName
           * @return {?}
           */

        }, {
          key: "ngModelWarning",
          value: function ngModelWarning(directiveName) {
            console.warn("\n    It looks like you're using ngModel on the same form field as ".concat(directiveName, ". \n    Support for using the ngModel input property and ngModelChange event with \n    reactive form directives has been deprecated in Angular v6 and will be removed \n    in Angular v7.\n    \n    For more information on this, see our API docs here:\n    https://angular.io/api/forms/").concat(directiveName === 'formControl' ? 'FormControlDirective' : 'FormControlName', "#use-with-ngmodel\n    "));
          }
        }]);

        return ReactiveErrors;
      }();
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/select_control_value_accessor.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var SELECT_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return SelectControlValueAccessor;
        }),
        multi: true
      };
      /**
       * @param {?} id
       * @param {?} value
       * @return {?}
       */

      function _buildValueString(id, value) {
        if (id == null) return "".concat(value);
        if (value && typeof value === 'object') value = 'Object';
        return "".concat(id, ": ").concat(value).slice(0, 50);
      }
      /**
       * @param {?} valueString
       * @return {?}
       */


      function _extractId(valueString) {
        return valueString.split(':')[0];
      }
      /**
       * \@description
       * The `ControlValueAccessor` for writing select control values and listening to select control
       * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and
       * `NgModel` directives.
       *
       * \@usageNotes
       *
       * ### Using select controls in a reactive form
       *
       * The following examples show how to use a select control in a reactive form.
       *
       * {\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}
       *
       * ### Using select controls in a template-driven form
       *
       * To use a select in a template-driven form, simply add an `ngModel` and a `name`
       * attribute to the main `<select>` tag.
       *
       * {\@example forms/ts/selectControl/select_control_example.ts region='Component'}
       *
       * ### Customizing option selection
       *
       * Angular uses object identity to select option. It's possible for the identities of items
       * to change while the data does not. This can happen, for example, if the items are produced
       * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the
       * second response will produce objects with different identities.
       *
       * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.
       * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.
       * If `compareWith` is given, Angular selects option by the return value of the function.
       *
       * ```ts
       * const selectedCountriesControl = new FormControl();
       * ```
       *
       * ```
       * <select [compareWith]="compareFn"  [formControl]="selectedCountriesControl">
       *     <option *ngFor="let country of countries" [ngValue]="country">
       *         {{country.name}}
       *     </option>
       * </select>
       *
       * compareFn(c1: Country, c2: Country): boolean {
       *     return c1 && c2 ? c1.id === c2.id : c1 === c2;
       * }
       * ```
       *
       * **Note:** We listen to the 'change' event because 'input' events aren't fired
       * for selects in Firefox and IE:
       * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350
       * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/
       *
       * \@ngModule ReactiveFormsModule
       * \@ngModule FormsModule
       * \@publicApi
       */


      var SelectControlValueAccessor = /*#__PURE__*/function () {
        /**
         * @param {?} _renderer
         * @param {?} _elementRef
         */
        function SelectControlValueAccessor(_renderer, _elementRef) {
          _classCallCheck(this, SelectControlValueAccessor);

          this._renderer = _renderer;
          this._elementRef = _elementRef;
          /**
           * \@internal
           */

          this._optionMap = new Map();
          /**
           * \@internal
           */

          this._idCounter = 0;
          /**
           * \@description
           * The registered callback function called when a change event occurs on the input element.
           */

          this.onChange =
          /**
          * @param {?} _
          * @return {?}
          */
          function (_) {};
          /**
           * \@description
           * The registered callback function called when a blur event occurs on the input element.
           */


          this.onTouched =
          /**
          * @return {?}
          */
          function () {};

          this._compareWith = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵlooseIdentical"];
        }
        /**
         * \@description
         * Tracks the option comparison algorithm for tracking identities when
         * checking for changes.
         * @param {?} fn
         * @return {?}
         */


        _createClass(SelectControlValueAccessor, [{
          key: "writeValue",

          /**
           * Sets the "value" property on the input element. The "selectedIndex"
           * property is also set if an ID is provided on the option element.
           *
           * @param {?} value The checked value
           * @return {?}
           */
          value: function writeValue(value) {
            this.value = value;
            /** @type {?} */

            var id = this._getOptionId(value);

            if (id == null) {
              this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);
            }
            /** @type {?} */


            var valueString = _buildValueString(id, value);

            this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);
          }
          /**
           * \@description
           * Registers a function called when the control value changes.
           *
           * @param {?} fn The callback function
           * @return {?}
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            var _this47 = this;

            this.onChange =
            /**
            * @param {?} valueString
            * @return {?}
            */
            function (valueString) {
              _this47.value = _this47._getOptionValue(valueString);
              fn(_this47.value);
            };
          }
          /**
           * \@description
           * Registers a function called when the control is touched.
           *
           * @param {?} fn The callback function
           * @return {?}
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
          /**
           * Sets the "disabled" property on the select input element.
           *
           * @param {?} isDisabled The disabled value
           * @return {?}
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
          }
          /**
           * \@internal
           * @return {?}
           */

        }, {
          key: "_registerOption",
          value: function _registerOption() {
            return (this._idCounter++).toString();
          }
          /**
           * \@internal
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "_getOptionId",
          value: function _getOptionId(value) {
            for (var _i2 = 0, _Array$from = Array.from(this._optionMap.keys()); _i2 < _Array$from.length; _i2++) {
              var id = _Array$from[_i2];
              if (this._compareWith(this._optionMap.get(id), value)) return id;
            }

            return null;
          }
          /**
           * \@internal
           * @param {?} valueString
           * @return {?}
           */

        }, {
          key: "_getOptionValue",
          value: function _getOptionValue(valueString) {
            /** @type {?} */
            var id = _extractId(valueString);

            return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;
          }
        }, {
          key: "compareWith",
          set: function set(fn) {
            if (typeof fn !== 'function') {
              throw new Error("compareWith must be a function, but received ".concat(JSON.stringify(fn)));
            }

            this._compareWith = fn;
          }
        }]);

        return SelectControlValueAccessor;
      }();

      SelectControlValueAccessor.ɵfac = function SelectControlValueAccessor_Factory(t) {
        return new (t || SelectControlValueAccessor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]));
      };

      SelectControlValueAccessor.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: SelectControlValueAccessor,
        selectors: [["select", "formControlName", "", 3, "multiple", ""], ["select", "formControl", "", 3, "multiple", ""], ["select", "ngModel", "", 3, "multiple", ""]],
        hostBindings: function SelectControlValueAccessor_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function SelectControlValueAccessor_change_HostBindingHandler($event) {
              return ctx.onChange($event.target.value);
            })("blur", function SelectControlValueAccessor_blur_HostBindingHandler() {
              return ctx.onTouched();
            });
          }
        },
        inputs: {
          compareWith: "compareWith"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([SELECT_VALUE_ACCESSOR])]
      });
      /** @nocollapse */

      SelectControlValueAccessor.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }];
      };

      SelectControlValueAccessor.propDecorators = {
        compareWith: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SelectControlValueAccessor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',
            host: {
              '(change)': 'onChange($event.target.value)',
              '(blur)': 'onTouched()'
            },
            providers: [SELECT_VALUE_ACCESSOR]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }];
        }, {
          compareWith: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();

      if (false) {}
      /**
       * \@description
       * Marks `<option>` as dynamic, so Angular can be notified when options change.
       *
       * @see `SelectControlValueAccessor`
       *
       * \@ngModule ReactiveFormsModule
       * \@ngModule FormsModule
       * \@publicApi
       */


      var NgSelectOption = /*#__PURE__*/function () {
        /**
         * @param {?} _element
         * @param {?} _renderer
         * @param {?} _select
         */
        function NgSelectOption(_element, _renderer, _select) {
          _classCallCheck(this, NgSelectOption);

          this._element = _element;
          this._renderer = _renderer;
          this._select = _select;
          if (this._select) this.id = this._select._registerOption();
        }
        /**
         * \@description
         * Tracks the value bound to the option element. Unlike the value binding,
         * ngValue supports binding to objects.
         * @param {?} value
         * @return {?}
         */


        _createClass(NgSelectOption, [{
          key: "_setElementValue",

          /**
           * \@internal
           * @param {?} value
           * @return {?}
           */
          value: function _setElementValue(value) {
            this._renderer.setProperty(this._element.nativeElement, 'value', value);
          }
          /**
           * \@description
           * Lifecycle method called before the directive's instance is destroyed. For internal use only.
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this._select) {
              this._select._optionMap["delete"](this.id);

              this._select.writeValue(this._select.value);
            }
          }
        }, {
          key: "ngValue",
          set: function set(value) {
            if (this._select == null) return;

            this._select._optionMap.set(this.id, value);

            this._setElementValue(_buildValueString(this.id, value));

            this._select.writeValue(this._select.value);
          }
          /**
           * \@description
           * Tracks simple string values bound to the option element.
           * For objects, use the `ngValue` input binding.
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "value",
          set: function set(value) {
            this._setElementValue(value);

            if (this._select) this._select.writeValue(this._select.value);
          }
        }]);

        return NgSelectOption;
      }();

      NgSelectOption.ɵfac = function NgSelectOption_Factory(t) {
        return new (t || NgSelectOption)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SelectControlValueAccessor, 9));
      };

      NgSelectOption.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgSelectOption,
        selectors: [["option"]],
        inputs: {
          ngValue: "ngValue",
          value: "value"
        }
      });
      /** @nocollapse */

      NgSelectOption.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
        }, {
          type: SelectControlValueAccessor,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
          }]
        }];
      };

      NgSelectOption.propDecorators = {
        ngValue: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['ngValue']
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['value']
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgSelectOption, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'option'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
          }, {
            type: SelectControlValueAccessor,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
            }]
          }];
        }, {
          ngValue: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['ngValue']
          }],
          value: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['value']
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/select_multiple_control_value_accessor.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var SELECT_MULTIPLE_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return SelectMultipleControlValueAccessor;
        }),
        multi: true
      };
      /**
       * @param {?} id
       * @param {?} value
       * @return {?}
       */

      function _buildValueString$1(id, value) {
        if (id == null) return "".concat(value);
        if (typeof value === 'string') value = "'".concat(value, "'");
        if (value && typeof value === 'object') value = 'Object';
        return "".concat(id, ": ").concat(value).slice(0, 50);
      }
      /**
       * @param {?} valueString
       * @return {?}
       */


      function _extractId$1(valueString) {
        return valueString.split(':')[0];
      }
      /**
       * Mock interface for HTML Options
       * @record
       */


      function HTMLOption() {}

      if (false) {}
      /**
       * Mock interface for HTMLCollection
       * @abstract
       */


      var HTMLCollection = function HTMLCollection() {
        _classCallCheck(this, HTMLCollection);
      };

      if (false) {}
      /**
       * \@description
       * The `ControlValueAccessor` for writing multi-select control values and listening to multi-select control
       * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and `NgModel`
       * directives.
       *
       * @see `SelectControlValueAccessor`
       *
       * \@usageNotes
       *
       * ### Using a multi-select control
       *
       * The follow example shows you how to use a multi-select control with a reactive form.
       *
       * ```ts
       * const countryControl = new FormControl();
       * ```
       *
       * ```
       * <select multiple name="countries" [formControl]="countryControl">
       *   <option *ngFor="let country of countries" [ngValue]="country">
       *     {{ country.name }}
       *   </option>
       * </select>
       * ```
       *
       * ### Customizing option selection
       *
       * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.
       * See the `SelectControlValueAccessor` for usage.
       *
       * \@ngModule ReactiveFormsModule
       * \@ngModule FormsModule
       * \@publicApi
       */


      var SelectMultipleControlValueAccessor = /*#__PURE__*/function () {
        /**
         * @param {?} _renderer
         * @param {?} _elementRef
         */
        function SelectMultipleControlValueAccessor(_renderer, _elementRef) {
          _classCallCheck(this, SelectMultipleControlValueAccessor);

          this._renderer = _renderer;
          this._elementRef = _elementRef;
          /**
           * \@internal
           */

          this._optionMap = new Map();
          /**
           * \@internal
           */

          this._idCounter = 0;
          /**
           * \@description
           * The registered callback function called when a change event occurs on the input element.
           */

          this.onChange =
          /**
          * @param {?} _
          * @return {?}
          */
          function (_) {};
          /**
           * \@description
           * The registered callback function called when a blur event occurs on the input element.
           */


          this.onTouched =
          /**
          * @return {?}
          */
          function () {};

          this._compareWith = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵlooseIdentical"];
        }
        /**
         * \@description
         * Tracks the option comparison algorithm for tracking identities when
         * checking for changes.
         * @param {?} fn
         * @return {?}
         */


        _createClass(SelectMultipleControlValueAccessor, [{
          key: "writeValue",

          /**
           * \@description
           * Sets the "value" property on one or of more
           * of the select's options.
           *
           * @param {?} value The value
           * @return {?}
           */
          value: function writeValue(value) {
            var _this48 = this;

            this.value = value;
            /** @type {?} */

            var optionSelectedStateSetter;

            if (Array.isArray(value)) {
              // convert values to ids

              /** @type {?} */
              var ids = value.map(
              /**
              * @param {?} v
              * @return {?}
              */
              function (v) {
                return _this48._getOptionId(v);
              });

              optionSelectedStateSetter =
              /**
              * @param {?} opt
              * @param {?} o
              * @return {?}
              */
              function optionSelectedStateSetter(opt, o) {
                opt._setSelected(ids.indexOf(o.toString()) > -1);
              };
            } else {
              optionSelectedStateSetter =
              /**
              * @param {?} opt
              * @param {?} o
              * @return {?}
              */
              function optionSelectedStateSetter(opt, o) {
                opt._setSelected(false);
              };
            }

            this._optionMap.forEach(optionSelectedStateSetter);
          }
          /**
           * \@description
           * Registers a function called when the control value changes
           * and writes an array of the selected options.
           *
           * @param {?} fn The callback function
           * @return {?}
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            var _this49 = this;

            this.onChange =
            /**
            * @param {?} _
            * @return {?}
            */
            function (_) {
              /** @type {?} */
              var selected = [];

              if (_.hasOwnProperty('selectedOptions')) {
                /** @type {?} */
                var options = _.selectedOptions;

                for (var i = 0; i < options.length; i++) {
                  /** @type {?} */
                  var opt = options.item(i);
                  /** @type {?} */

                  var val = _this49._getOptionValue(opt.value);

                  selected.push(val);
                }
              } // Degrade on IE
              else {
                  /** @type {?} */
                  var _options =
                  /** @type {?} */
                  _.options;

                  for (var _i3 = 0; _i3 < _options.length; _i3++) {
                    /** @type {?} */
                    var _opt = _options.item(_i3);

                    if (_opt.selected) {
                      /** @type {?} */
                      var _val = _this49._getOptionValue(_opt.value);

                      selected.push(_val);
                    }
                  }
                }

              _this49.value = selected;
              fn(selected);
            };
          }
          /**
           * \@description
           * Registers a function called when the control is touched.
           *
           * @param {?} fn The callback function
           * @return {?}
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
          /**
           * Sets the "disabled" property on the select input element.
           *
           * @param {?} isDisabled The disabled value
           * @return {?}
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
          }
          /**
           * \@internal
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "_registerOption",
          value: function _registerOption(value) {
            /** @type {?} */
            var id = (this._idCounter++).toString();

            this._optionMap.set(id, value);

            return id;
          }
          /**
           * \@internal
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "_getOptionId",
          value: function _getOptionId(value) {
            for (var _i4 = 0, _Array$from2 = Array.from(this._optionMap.keys()); _i4 < _Array$from2.length; _i4++) {
              var id = _Array$from2[_i4];
              if (this._compareWith(
              /** @type {?} */
              this._optionMap.get(id)._value, value)) return id;
            }

            return null;
          }
          /**
           * \@internal
           * @param {?} valueString
           * @return {?}
           */

        }, {
          key: "_getOptionValue",
          value: function _getOptionValue(valueString) {
            /** @type {?} */
            var id = _extractId$1(valueString);

            return this._optionMap.has(id) ?
            /** @type {?} */
            this._optionMap.get(id)._value : valueString;
          }
        }, {
          key: "compareWith",
          set: function set(fn) {
            if (typeof fn !== 'function') {
              throw new Error("compareWith must be a function, but received ".concat(JSON.stringify(fn)));
            }

            this._compareWith = fn;
          }
        }]);

        return SelectMultipleControlValueAccessor;
      }();

      SelectMultipleControlValueAccessor.ɵfac = function SelectMultipleControlValueAccessor_Factory(t) {
        return new (t || SelectMultipleControlValueAccessor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]));
      };

      SelectMultipleControlValueAccessor.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: SelectMultipleControlValueAccessor,
        selectors: [["select", "multiple", "", "formControlName", ""], ["select", "multiple", "", "formControl", ""], ["select", "multiple", "", "ngModel", ""]],
        hostBindings: function SelectMultipleControlValueAccessor_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function SelectMultipleControlValueAccessor_change_HostBindingHandler($event) {
              return ctx.onChange($event.target);
            })("blur", function SelectMultipleControlValueAccessor_blur_HostBindingHandler() {
              return ctx.onTouched();
            });
          }
        },
        inputs: {
          compareWith: "compareWith"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([SELECT_MULTIPLE_VALUE_ACCESSOR])]
      });
      /** @nocollapse */

      SelectMultipleControlValueAccessor.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }];
      };

      SelectMultipleControlValueAccessor.propDecorators = {
        compareWith: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SelectMultipleControlValueAccessor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',
            host: {
              '(change)': 'onChange($event.target)',
              '(blur)': 'onTouched()'
            },
            providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }];
        }, {
          compareWith: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();

      if (false) {}
      /**
       * \@description
       * Marks `<option>` as dynamic, so Angular can be notified when options change.
       *
       * @see `SelectMultipleControlValueAccessor`
       *
       * \@ngModule ReactiveFormsModule
       * \@ngModule FormsModule
       * \@publicApi
       */


      var ɵNgSelectMultipleOption = /*#__PURE__*/function () {
        /**
         * @param {?} _element
         * @param {?} _renderer
         * @param {?} _select
         */
        function ɵNgSelectMultipleOption(_element, _renderer, _select) {
          _classCallCheck(this, ɵNgSelectMultipleOption);

          this._element = _element;
          this._renderer = _renderer;
          this._select = _select;

          if (this._select) {
            this.id = this._select._registerOption(this);
          }
        }
        /**
         * \@description
         * Tracks the value bound to the option element. Unlike the value binding,
         * ngValue supports binding to objects.
         * @param {?} value
         * @return {?}
         */


        _createClass(ɵNgSelectMultipleOption, [{
          key: "_setElementValue",

          /**
           * \@internal
           * @param {?} value
           * @return {?}
           */
          value: function _setElementValue(value) {
            this._renderer.setProperty(this._element.nativeElement, 'value', value);
          }
          /**
           * \@internal
           * @param {?} selected
           * @return {?}
           */

        }, {
          key: "_setSelected",
          value: function _setSelected(selected) {
            this._renderer.setProperty(this._element.nativeElement, 'selected', selected);
          }
          /**
           * \@description
           * Lifecycle method called before the directive's instance is destroyed. For internal use only.
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this._select) {
              this._select._optionMap["delete"](this.id);

              this._select.writeValue(this._select.value);
            }
          }
        }, {
          key: "ngValue",
          set: function set(value) {
            if (this._select == null) return;
            this._value = value;

            this._setElementValue(_buildValueString$1(this.id, value));

            this._select.writeValue(this._select.value);
          }
          /**
           * \@description
           * Tracks simple string values bound to the option element.
           * For objects, use the `ngValue` input binding.
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "value",
          set: function set(value) {
            if (this._select) {
              this._value = value;

              this._setElementValue(_buildValueString$1(this.id, value));

              this._select.writeValue(this._select.value);
            } else {
              this._setElementValue(value);
            }
          }
        }]);

        return ɵNgSelectMultipleOption;
      }();

      ɵNgSelectMultipleOption.ɵfac = function ɵNgSelectMultipleOption_Factory(t) {
        return new (t || ɵNgSelectMultipleOption)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SelectMultipleControlValueAccessor, 9));
      };

      ɵNgSelectMultipleOption.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: ɵNgSelectMultipleOption,
        selectors: [["option"]],
        inputs: {
          ngValue: "ngValue",
          value: "value"
        }
      });
      /** @nocollapse */

      ɵNgSelectMultipleOption.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
        }, {
          type: SelectMultipleControlValueAccessor,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
          }]
        }];
      };

      ɵNgSelectMultipleOption.propDecorators = {
        ngValue: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['ngValue']
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['value']
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ɵNgSelectMultipleOption, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'option'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
          }, {
            type: SelectMultipleControlValueAccessor,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
            }]
          }];
        }, {
          ngValue: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['ngValue']
          }],
          value: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['value']
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/shared.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @param {?} name
       * @param {?} parent
       * @return {?}
       */


      function controlPath(name, parent) {
        return [].concat(_toConsumableArray(
        /** @type {?} */
        parent.path), [
        /** @type {?} */
        name]);
      }
      /**
       * @param {?} control
       * @param {?} dir
       * @return {?}
       */


      function setUpControl(control, dir) {
        if (!control) _throwError(dir, 'Cannot find control with');
        if (!dir.valueAccessor) _throwError(dir, 'No value accessor for form control with');
        control.validator = Validators.compose([
        /** @type {?} */
        control.validator, dir.validator]);
        control.asyncValidator = Validators.composeAsync([
        /** @type {?} */
        control.asyncValidator, dir.asyncValidator]);

        /** @type {?} */
        dir.valueAccessor.writeValue(control.value);
        setUpViewChangePipeline(control, dir);
        setUpModelChangePipeline(control, dir);
        setUpBlurPipeline(control, dir);

        if (
        /** @type {?} */
        dir.valueAccessor.setDisabledState) {
          control.registerOnDisabledChange(
          /**
          * @param {?} isDisabled
          * @return {?}
          */
          function (isDisabled) {
            /** @type {?} */

            /** @type {?} */
            dir.valueAccessor.setDisabledState(isDisabled);
          });
        } // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4


        dir._rawValidators.forEach(
        /**
        * @param {?} validator
        * @return {?}
        */
        function (validator) {
          if (
          /** @type {?} */
          validator.registerOnValidatorChange)
          /** @type {?} */

          /** @type {?} */
          validator.registerOnValidatorChange(
          /**
          * @return {?}
          */
          function () {
            return control.updateValueAndValidity();
          });
        });

        dir._rawAsyncValidators.forEach(
        /**
        * @param {?} validator
        * @return {?}
        */
        function (validator) {
          if (
          /** @type {?} */
          validator.registerOnValidatorChange)
          /** @type {?} */

          /** @type {?} */
          validator.registerOnValidatorChange(
          /**
          * @return {?}
          */
          function () {
            return control.updateValueAndValidity();
          });
        });
      }
      /**
       * @param {?} control
       * @param {?} dir
       * @return {?}
       */


      function cleanUpControl(control, dir) {
        /** @type {?} */
        dir.valueAccessor.registerOnChange(
        /**
        * @return {?}
        */
        function () {
          return _noControlError(dir);
        });

        /** @type {?} */
        dir.valueAccessor.registerOnTouched(
        /**
        * @return {?}
        */
        function () {
          return _noControlError(dir);
        });

        dir._rawValidators.forEach(
        /**
        * @param {?} validator
        * @return {?}
        */
        function (validator) {
          if (validator.registerOnValidatorChange) {
            validator.registerOnValidatorChange(null);
          }
        });

        dir._rawAsyncValidators.forEach(
        /**
        * @param {?} validator
        * @return {?}
        */
        function (validator) {
          if (validator.registerOnValidatorChange) {
            validator.registerOnValidatorChange(null);
          }
        });

        if (control) control._clearChangeFns();
      }
      /**
       * @param {?} control
       * @param {?} dir
       * @return {?}
       */


      function setUpViewChangePipeline(control, dir) {
        /** @type {?} */
        dir.valueAccessor.registerOnChange(
        /**
        * @param {?} newValue
        * @return {?}
        */
        function (newValue) {
          control._pendingValue = newValue;
          control._pendingChange = true;
          control._pendingDirty = true;
          if (control.updateOn === 'change') updateControl(control, dir);
        });
      }
      /**
       * @param {?} control
       * @param {?} dir
       * @return {?}
       */


      function setUpBlurPipeline(control, dir) {
        /** @type {?} */
        dir.valueAccessor.registerOnTouched(
        /**
        * @return {?}
        */
        function () {
          control._pendingTouched = true;
          if (control.updateOn === 'blur' && control._pendingChange) updateControl(control, dir);
          if (control.updateOn !== 'submit') control.markAsTouched();
        });
      }
      /**
       * @param {?} control
       * @param {?} dir
       * @return {?}
       */


      function updateControl(control, dir) {
        if (control._pendingDirty) control.markAsDirty();
        control.setValue(control._pendingValue, {
          emitModelToViewChange: false
        });
        dir.viewToModelUpdate(control._pendingValue);
        control._pendingChange = false;
      }
      /**
       * @param {?} control
       * @param {?} dir
       * @return {?}
       */


      function setUpModelChangePipeline(control, dir) {
        control.registerOnChange(
        /**
        * @param {?} newValue
        * @param {?} emitModelEvent
        * @return {?}
        */
        function (newValue, emitModelEvent) {
          // control -> view

          /** @type {?} */
          dir.valueAccessor.writeValue(newValue); // control -> ngModel

          if (emitModelEvent) dir.viewToModelUpdate(newValue);
        });
      }
      /**
       * @param {?} control
       * @param {?} dir
       * @return {?}
       */


      function setUpFormContainer(control, dir) {
        if (control == null) _throwError(dir, 'Cannot find control with');
        control.validator = Validators.compose([control.validator, dir.validator]);
        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
      }
      /**
       * @param {?} dir
       * @return {?}
       */


      function _noControlError(dir) {
        return _throwError(dir, 'There is no FormControl instance attached to form control element with');
      }
      /**
       * @param {?} dir
       * @param {?} message
       * @return {?}
       */


      function _throwError(dir, message) {
        /** @type {?} */
        var messageEnd;

        if (
        /** @type {?} */
        dir.path.length > 1) {
          messageEnd = "path: '".concat(
          /** @type {?} */
          dir.path.join(' -> '), "'");
        } else if (
        /** @type {?} */
        dir.path[0]) {
          messageEnd = "name: '".concat(dir.path, "'");
        } else {
          messageEnd = 'unspecified name attribute';
        }

        throw new Error("".concat(message, " ").concat(messageEnd));
      }
      /**
       * @param {?} validators
       * @return {?}
       */


      function composeValidators(validators) {
        return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;
      }
      /**
       * @param {?} validators
       * @return {?}
       */


      function composeAsyncValidators(validators) {
        return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) : null;
      }
      /**
       * @param {?} changes
       * @param {?} viewModel
       * @return {?}
       */


      function isPropertyUpdated(changes, viewModel) {
        if (!changes.hasOwnProperty('model')) return false;
        /** @type {?} */

        var change = changes['model'];
        if (change.isFirstChange()) return true;
        return !Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵlooseIdentical"])(viewModel, change.currentValue);
      }
      /** @type {?} */


      var BUILTIN_ACCESSORS = [CheckboxControlValueAccessor, RangeValueAccessor, NumberValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor];
      /**
       * @param {?} valueAccessor
       * @return {?}
       */

      function isBuiltInAccessor(valueAccessor) {
        return BUILTIN_ACCESSORS.some(
        /**
        * @param {?} a
        * @return {?}
        */
        function (a) {
          return valueAccessor.constructor === a;
        });
      }
      /**
       * @param {?} form
       * @param {?} directives
       * @return {?}
       */


      function syncPendingControls(form, directives) {
        form._syncPendingControls();

        directives.forEach(
        /**
        * @param {?} dir
        * @return {?}
        */
        function (dir) {
          /** @type {?} */
          var control =
          /** @type {?} */
          dir.control;

          if (control.updateOn === 'submit' && control._pendingChange) {
            dir.viewToModelUpdate(control._pendingValue);
            control._pendingChange = false;
          }
        });
      } // TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented

      /**
       * @param {?} dir
       * @param {?} valueAccessors
       * @return {?}
       */


      function selectValueAccessor(dir, valueAccessors) {
        if (!valueAccessors) return null;
        if (!Array.isArray(valueAccessors)) _throwError(dir, 'Value accessor was not provided as an array for form control with');
        /** @type {?} */

        var defaultAccessor = undefined;
        /** @type {?} */

        var builtinAccessor = undefined;
        /** @type {?} */

        var customAccessor = undefined;
        valueAccessors.forEach(
        /**
        * @param {?} v
        * @return {?}
        */
        function (v) {
          if (v.constructor === DefaultValueAccessor) {
            defaultAccessor = v;
          } else if (isBuiltInAccessor(v)) {
            if (builtinAccessor) _throwError(dir, 'More than one built-in value accessor matches form control with');
            builtinAccessor = v;
          } else {
            if (customAccessor) _throwError(dir, 'More than one custom value accessor matches form control with');
            customAccessor = v;
          }
        });
        if (customAccessor) return customAccessor;
        if (builtinAccessor) return builtinAccessor;
        if (defaultAccessor) return defaultAccessor;

        _throwError(dir, 'No valid value accessor for form control with');

        return null;
      }
      /**
       * @template T
       * @param {?} list
       * @param {?} el
       * @return {?}
       */


      function removeDir(list, el) {
        /** @type {?} */
        var index = list.indexOf(el);
        if (index > -1) list.splice(index, 1);
      } // TODO(kara): remove after deprecation period

      /**
       * @param {?} name
       * @param {?} type
       * @param {?} instance
       * @param {?} warningConfig
       * @return {?}
       */


      function _ngModelWarning(name, type, instance, warningConfig) {
        if (!Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["isDevMode"])() || warningConfig === 'never') return;

        if ((warningConfig === null || warningConfig === 'once') && !type._ngModelWarningSentOnce || warningConfig === 'always' && !instance._ngModelWarningSent) {
          ReactiveErrors.ngModelWarning(name);
          type._ngModelWarningSentOnce = true;
          instance._ngModelWarningSent = true;
        }
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/model.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Reports that a FormControl is valid, meaning that no errors exist in the input value.
       *
       * @see `status`
       * @type {?}
       */


      var VALID = 'VALID';
      /**
       * Reports that a FormControl is invalid, meaning that an error exists in the input value.
       *
       * @see `status`
       * @type {?}
       */

      var INVALID = 'INVALID';
      /**
       * Reports that a FormControl is pending, meaning that that async validation is occurring and
       * errors are not yet available for the input value.
       *
       * @see `markAsPending`
       * @see `status`
       * @type {?}
       */

      var PENDING = 'PENDING';
      /**
       * Reports that a FormControl is disabled, meaning that the control is exempt from ancestor
       * calculations of validity or value.
       *
       * @see `markAsDisabled`
       * @see `status`
       * @type {?}
       */

      var DISABLED = 'DISABLED';
      /**
       * @param {?} control
       * @param {?} path
       * @param {?} delimiter
       * @return {?}
       */

      function _find(control, path, delimiter) {
        if (path == null) return null;

        if (!Array.isArray(path)) {
          path = path.split(delimiter);
        }

        if (Array.isArray(path) && path.length === 0) return null; // Not using Array.reduce here due to a Chrome 80 bug
        // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982

        /** @type {?} */

        var controlToFind = control;
        path.forEach(
        /**
        * @param {?} name
        * @return {?}
        */
        function (name) {
          if (controlToFind instanceof FormGroup) {
            controlToFind = controlToFind.controls.hasOwnProperty(
            /** @type {?} */
            name) ? controlToFind.controls[name] : null;
          } else if (controlToFind instanceof FormArray) {
            controlToFind = controlToFind.at(
            /** @type {?} */
            name) || null;
          } else {
            controlToFind = null;
          }
        });
        return controlToFind;
      }
      /**
       * @param {?=} validatorOrOpts
       * @return {?}
       */


      function coerceToValidator(validatorOrOpts) {
        /** @type {?} */
        var validator =
        /** @type {?} */
        isOptionsObj(validatorOrOpts) ?
        /** @type {?} */
        validatorOrOpts.validators : validatorOrOpts;
        return Array.isArray(validator) ? composeValidators(validator) : validator || null;
      }
      /**
       * @param {?=} asyncValidator
       * @param {?=} validatorOrOpts
       * @return {?}
       */


      function coerceToAsyncValidator(asyncValidator, validatorOrOpts) {
        /** @type {?} */
        var origAsyncValidator =
        /** @type {?} */
        isOptionsObj(validatorOrOpts) ?
        /** @type {?} */
        validatorOrOpts.asyncValidators : asyncValidator;
        return Array.isArray(origAsyncValidator) ? composeAsyncValidators(origAsyncValidator) : origAsyncValidator || null;
      }
      /**
       * Interface for options provided to an `AbstractControl`.
       *
       * \@publicApi
       * @record
       */


      function AbstractControlOptions() {}

      if (false) {}
      /**
       * @param {?=} validatorOrOpts
       * @return {?}
       */


      function isOptionsObj(validatorOrOpts) {
        return validatorOrOpts != null && !Array.isArray(validatorOrOpts) && typeof validatorOrOpts === 'object';
      }
      /**
       * This is the base class for `FormControl`, `FormGroup`, and `FormArray`.
       *
       * It provides some of the shared behavior that all controls and groups of controls have, like
       * running validators, calculating status, and resetting state. It also defines the properties
       * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be
       * instantiated directly.
       *
       * @see [Forms Guide](/guide/forms)
       * @see [Reactive Forms Guide](/guide/reactive-forms)
       * @see [Dynamic Forms Guide](/guide/dynamic-form)
       *
       * \@publicApi
       * @abstract
       */


      var AbstractControl = /*#__PURE__*/function () {
        /**
         * Initialize the AbstractControl instance.
         *
         * @param {?} validator The function that determines the synchronous validity of this control.
         * @param {?} asyncValidator The function that determines the asynchronous validity of this
         * control.
         */
        function AbstractControl(validator, asyncValidator) {
          _classCallCheck(this, AbstractControl);

          this.validator = validator;
          this.asyncValidator = asyncValidator;
          /**
           * \@internal
           */

          this._onCollectionChange =
          /**
          * @return {?}
          */
          function () {};
          /**
           * A control is `pristine` if the user has not yet changed
           * the value in the UI.
           *
           * @return True if the user has not yet changed the value in the UI; compare `dirty`.
           * Programmatic changes to a control's value do not mark it dirty.
           */


          this.pristine = true;
          /**
           * True if the control is marked as `touched`.
           *
           * A control is marked `touched` once the user has triggered
           * a `blur` event on it.
           */

          this.touched = false;
          /**
           * \@internal
           */

          this._onDisabledChange = [];
        }
        /**
         * The parent control.
         * @return {?}
         */


        _createClass(AbstractControl, [{
          key: "setValidators",

          /**
           * Sets the synchronous validators that are active on this control.  Calling
           * this overwrites any existing sync validators.
           *
           * When you add or remove a validator at run time, you must call
           * `updateValueAndValidity()` for the new validation to take effect.
           *
           * @param {?} newValidator
           * @return {?}
           */
          value: function setValidators(newValidator) {
            this.validator = coerceToValidator(newValidator);
          }
          /**
           * Sets the async validators that are active on this control. Calling this
           * overwrites any existing async validators.
           *
           * When you add or remove a validator at run time, you must call
           * `updateValueAndValidity()` for the new validation to take effect.
           *
           * @param {?} newValidator
           * @return {?}
           */

        }, {
          key: "setAsyncValidators",
          value: function setAsyncValidators(newValidator) {
            this.asyncValidator = coerceToAsyncValidator(newValidator);
          }
          /**
           * Empties out the sync validator list.
           *
           * When you add or remove a validator at run time, you must call
           * `updateValueAndValidity()` for the new validation to take effect.
           *
           * @return {?}
           */

        }, {
          key: "clearValidators",
          value: function clearValidators() {
            this.validator = null;
          }
          /**
           * Empties out the async validator list.
           *
           * When you add or remove a validator at run time, you must call
           * `updateValueAndValidity()` for the new validation to take effect.
           *
           * @return {?}
           */

        }, {
          key: "clearAsyncValidators",
          value: function clearAsyncValidators() {
            this.asyncValidator = null;
          }
          /**
           * Marks the control as `touched`. A control is touched by focus and
           * blur events that do not change the value.
           *
           * @see `markAsUntouched()` / `markAsDirty()` / `markAsPristine()`
           *
           * @param {?=} opts Configuration options that determine how the control propagates changes
           * and emits events after marking is applied.
           * * `onlySelf`: When true, mark only this control. When false or not supplied,
           * marks all direct ancestors. Default is false.
           * @return {?}
           */

        }, {
          key: "markAsTouched",
          value: function markAsTouched() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            /** @type {?} */
            this.touched = true;

            if (this._parent && !opts.onlySelf) {
              this._parent.markAsTouched(opts);
            }
          }
          /**
           * Marks the control and all its descendant controls as `touched`.
           * @see `markAsTouched()`
           * @return {?}
           */

        }, {
          key: "markAllAsTouched",
          value: function markAllAsTouched() {
            this.markAsTouched({
              onlySelf: true
            });

            this._forEachChild(
            /**
            * @param {?} control
            * @return {?}
            */
            function (control) {
              return control.markAllAsTouched();
            });
          }
          /**
           * Marks the control as `untouched`.
           *
           * If the control has any children, also marks all children as `untouched`
           * and recalculates the `touched` status of all parent controls.
           *
           * @see `markAsTouched()` / `markAsDirty()` / `markAsPristine()`
           *
           * @param {?=} opts Configuration options that determine how the control propagates changes
           * and emits events after the marking is applied.
           * * `onlySelf`: When true, mark only this control. When false or not supplied,
           * marks all direct ancestors. Default is false.
           * @return {?}
           */

        }, {
          key: "markAsUntouched",
          value: function markAsUntouched() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            /** @type {?} */
            this.touched = false;
            this._pendingTouched = false;

            this._forEachChild(
            /**
            * @param {?} control
            * @return {?}
            */
            function (control) {
              control.markAsUntouched({
                onlySelf: true
              });
            });

            if (this._parent && !opts.onlySelf) {
              this._parent._updateTouched(opts);
            }
          }
          /**
           * Marks the control as `dirty`. A control becomes dirty when
           * the control's value is changed through the UI; compare `markAsTouched`.
           *
           * @see `markAsTouched()` / `markAsUntouched()` / `markAsPristine()`
           *
           * @param {?=} opts Configuration options that determine how the control propagates changes
           * and emits events after marking is applied.
           * * `onlySelf`: When true, mark only this control. When false or not supplied,
           * marks all direct ancestors. Default is false.
           * @return {?}
           */

        }, {
          key: "markAsDirty",
          value: function markAsDirty() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            /** @type {?} */
            this.pristine = false;

            if (this._parent && !opts.onlySelf) {
              this._parent.markAsDirty(opts);
            }
          }
          /**
           * Marks the control as `pristine`.
           *
           * If the control has any children, marks all children as `pristine`,
           * and recalculates the `pristine` status of all parent
           * controls.
           *
           * @see `markAsTouched()` / `markAsUntouched()` / `markAsDirty()`
           *
           * @param {?=} opts Configuration options that determine how the control emits events after
           * marking is applied.
           * * `onlySelf`: When true, mark only this control. When false or not supplied,
           * marks all direct ancestors. Default is false..
           * @return {?}
           */

        }, {
          key: "markAsPristine",
          value: function markAsPristine() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            /** @type {?} */
            this.pristine = true;
            this._pendingDirty = false;

            this._forEachChild(
            /**
            * @param {?} control
            * @return {?}
            */
            function (control) {
              control.markAsPristine({
                onlySelf: true
              });
            });

            if (this._parent && !opts.onlySelf) {
              this._parent._updatePristine(opts);
            }
          }
          /**
           * Marks the control as `pending`.
           *
           * A control is pending while the control performs async validation.
           *
           * @see {\@link AbstractControl.status}
           *
           * @param {?=} opts Configuration options that determine how the control propagates changes and
           * emits events after marking is applied.
           * * `onlySelf`: When true, mark only this control. When false or not supplied,
           * marks all direct ancestors. Default is false..
           * * `emitEvent`: When true or not supplied (the default), the `statusChanges`
           * observable emits an event with the latest status the control is marked pending.
           * When false, no events are emitted.
           *
           * @return {?}
           */

        }, {
          key: "markAsPending",
          value: function markAsPending() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            /** @type {?} */
            this.status = PENDING;

            if (opts.emitEvent !== false) {
              /** @type {?} */
              this.statusChanges.emit(this.status);
            }

            if (this._parent && !opts.onlySelf) {
              this._parent.markAsPending(opts);
            }
          }
          /**
           * Disables the control. This means the control is exempt from validation checks and
           * excluded from the aggregate value of any parent. Its status is `DISABLED`.
           *
           * If the control has children, all children are also disabled.
           *
           * @see {\@link AbstractControl.status}
           *
           * @param {?=} opts Configuration options that determine how the control propagates
           * changes and emits events after the control is disabled.
           * * `onlySelf`: When true, mark only this control. When false or not supplied,
           * marks all direct ancestors. Default is false..
           * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
           * `valueChanges`
           * observables emit events with the latest status and value when the control is disabled.
           * When false, no events are emitted.
           * @return {?}
           */

        }, {
          key: "disable",
          value: function disable() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            // If parent has been marked artificially dirty we don't want to re-calculate the
            // parent's dirtiness based on the children.

            /** @type {?} */
            var skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);

            /** @type {?} */
            this.status = DISABLED;

            /** @type {?} */
            this.errors = null;

            this._forEachChild(
            /**
            * @param {?} control
            * @return {?}
            */
            function (control) {
              control.disable(Object.assign(Object.assign({}, opts), {
                onlySelf: true
              }));
            });

            this._updateValue();

            if (opts.emitEvent !== false) {
              /** @type {?} */
              this.valueChanges.emit(this.value);

              /** @type {?} */
              this.statusChanges.emit(this.status);
            }

            this._updateAncestors(Object.assign(Object.assign({}, opts), {
              skipPristineCheck: skipPristineCheck
            }));

            this._onDisabledChange.forEach(
            /**
            * @param {?} changeFn
            * @return {?}
            */
            function (changeFn) {
              return changeFn(true);
            });
          }
          /**
           * Enables the control. This means the control is included in validation checks and
           * the aggregate value of its parent. Its status recalculates based on its value and
           * its validators.
           *
           * By default, if the control has children, all children are enabled.
           *
           * @see {\@link AbstractControl.status}
           *
           * @param {?=} opts Configure options that control how the control propagates changes and
           * emits events when marked as untouched
           * * `onlySelf`: When true, mark only this control. When false or not supplied,
           * marks all direct ancestors. Default is false..
           * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
           * `valueChanges`
           * observables emit events with the latest status and value when the control is enabled.
           * When false, no events are emitted.
           * @return {?}
           */

        }, {
          key: "enable",
          value: function enable() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            // If parent has been marked artificially dirty we don't want to re-calculate the
            // parent's dirtiness based on the children.

            /** @type {?} */
            var skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);

            /** @type {?} */
            this.status = VALID;

            this._forEachChild(
            /**
            * @param {?} control
            * @return {?}
            */
            function (control) {
              control.enable(Object.assign(Object.assign({}, opts), {
                onlySelf: true
              }));
            });

            this.updateValueAndValidity({
              onlySelf: true,
              emitEvent: opts.emitEvent
            });

            this._updateAncestors(Object.assign(Object.assign({}, opts), {
              skipPristineCheck: skipPristineCheck
            }));

            this._onDisabledChange.forEach(
            /**
            * @param {?} changeFn
            * @return {?}
            */
            function (changeFn) {
              return changeFn(false);
            });
          }
          /**
           * @private
           * @param {?} opts
           * @return {?}
           */

        }, {
          key: "_updateAncestors",
          value: function _updateAncestors(opts) {
            if (this._parent && !opts.onlySelf) {
              this._parent.updateValueAndValidity(opts);

              if (!opts.skipPristineCheck) {
                this._parent._updatePristine();
              }

              this._parent._updateTouched();
            }
          }
          /**
           * @param {?} parent Sets the parent of the control
           * @return {?}
           */

        }, {
          key: "setParent",
          value: function setParent(parent) {
            this._parent = parent;
          }
          /**
           * Recalculates the value and validation status of the control.
           *
           * By default, it also updates the value and validity of its ancestors.
           *
           * @param {?=} opts Configuration options determine how the control propagates changes and emits events
           * after updates and validity checks are applied.
           * * `onlySelf`: When true, only update this control. When false or not supplied,
           * update all direct ancestors. Default is false..
           * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
           * `valueChanges`
           * observables emit events with the latest status and value when the control is updated.
           * When false, no events are emitted.
           * @return {?}
           */

        }, {
          key: "updateValueAndValidity",
          value: function updateValueAndValidity() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            this._setInitialStatus();

            this._updateValue();

            if (this.enabled) {
              this._cancelExistingSubscription();

              /** @type {?} */
              this.errors = this._runValidator();

              /** @type {?} */
              this.status = this._calculateStatus();

              if (this.status === VALID || this.status === PENDING) {
                this._runAsyncValidator(opts.emitEvent);
              }
            }

            if (opts.emitEvent !== false) {
              /** @type {?} */
              this.valueChanges.emit(this.value);

              /** @type {?} */
              this.statusChanges.emit(this.status);
            }

            if (this._parent && !opts.onlySelf) {
              this._parent.updateValueAndValidity(opts);
            }
          }
          /**
           * \@internal
           * @param {?=} opts
           * @return {?}
           */

        }, {
          key: "_updateTreeValidity",
          value: function _updateTreeValidity() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
              emitEvent: true
            };

            this._forEachChild(
            /**
            * @param {?} ctrl
            * @return {?}
            */
            function (ctrl) {
              return ctrl._updateTreeValidity(opts);
            });

            this.updateValueAndValidity({
              onlySelf: true,
              emitEvent: opts.emitEvent
            });
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_setInitialStatus",
          value: function _setInitialStatus() {
            /** @type {?} */
            this.status = this._allControlsDisabled() ? DISABLED : VALID;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_runValidator",
          value: function _runValidator() {
            return this.validator ? this.validator(this) : null;
          }
          /**
           * @private
           * @param {?=} emitEvent
           * @return {?}
           */

        }, {
          key: "_runAsyncValidator",
          value: function _runAsyncValidator(emitEvent) {
            var _this50 = this;

            if (this.asyncValidator) {
              /** @type {?} */
              this.status = PENDING;
              /** @type {?} */

              var obs = toObservable(this.asyncValidator(this));
              this._asyncValidationSubscription = obs.subscribe(
              /**
              * @param {?} errors
              * @return {?}
              */
              function (errors) {
                return _this50.setErrors(errors, {
                  emitEvent: emitEvent
                });
              });
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_cancelExistingSubscription",
          value: function _cancelExistingSubscription() {
            if (this._asyncValidationSubscription) {
              this._asyncValidationSubscription.unsubscribe();
            }
          }
          /**
           * Sets errors on a form control when running validations manually, rather than automatically.
           *
           * Calling `setErrors` also updates the validity of the parent control.
           *
           * \@usageNotes
           * ### Manually set the errors for a control
           *
           * ```
           * const login = new FormControl('someLogin');
           * login.setErrors({
           *   notUnique: true
           * });
           *
           * expect(login.valid).toEqual(false);
           * expect(login.errors).toEqual({ notUnique: true });
           *
           * login.setValue('someOtherLogin');
           *
           * expect(login.valid).toEqual(true);
           * ```
           * @param {?} errors
           * @param {?=} opts
           * @return {?}
           */

        }, {
          key: "setErrors",
          value: function setErrors(errors) {
            var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            /** @type {?} */
            this.errors = errors;

            this._updateControlsErrors(opts.emitEvent !== false);
          }
          /**
           * Retrieves a child control given the control's name or path.
           *
           * \@usageNotes
           * ### Retrieve a nested control
           *
           * For example, to get a `name` control nested within a `person` sub-group:
           *
           * * `this.form.get('person.name');`
           *
           * -OR-
           *
           * * `this.form.get(['person', 'name']);`
           * @param {?} path A dot-delimited string or array of string/number values that define the path to the
           * control.
           *
           * @return {?}
           */

        }, {
          key: "get",
          value: function get(path) {
            return _find(this, path, '.');
          }
          /**
           * \@description
           * Reports error data for the control with the given path.
           *
           * \@usageNotes
           * For example, for the following `FormGroup`:
           *
           * ```
           * form = new FormGroup({
           *   address: new FormGroup({ street: new FormControl() })
           * });
           * ```
           *
           * The path to the 'street' control from the root form would be 'address' -> 'street'.
           *
           * It can be provided to this method in one of two formats:
           *
           * 1. An array of string control names, e.g. `['address', 'street']`
           * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
           *
           * @param {?} errorCode The code of the error to check
           * @param {?=} path A list of control names that designates how to move from the current control
           * to the control that should be queried for errors.
           *
           * @return {?} error data for that particular error. If the control or error is not present,
           * null is returned.
           */

        }, {
          key: "getError",
          value: function getError(errorCode, path) {
            /** @type {?} */
            var control = path ? this.get(path) : this;
            return control && control.errors ? control.errors[errorCode] : null;
          }
          /**
           * \@description
           * Reports whether the control with the given path has the error specified.
           *
           * \@usageNotes
           * For example, for the following `FormGroup`:
           *
           * ```
           * form = new FormGroup({
           *   address: new FormGroup({ street: new FormControl() })
           * });
           * ```
           *
           * The path to the 'street' control from the root form would be 'address' -> 'street'.
           *
           * It can be provided to this method in one of two formats:
           *
           * 1. An array of string control names, e.g. `['address', 'street']`
           * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
           *
           * If no path is given, this method checks for the error on the current control.
           *
           * @param {?} errorCode The code of the error to check
           * @param {?=} path A list of control names that designates how to move from the current control
           * to the control that should be queried for errors.
           *
           * @return {?} whether the given error is present in the control at the given path.
           *
           * If the control is not present, false is returned.
           */

        }, {
          key: "hasError",
          value: function hasError(errorCode, path) {
            return !!this.getError(errorCode, path);
          }
          /**
           * Retrieves the top-level ancestor of this control.
           * @return {?}
           */

        }, {
          key: "_updateControlsErrors",

          /**
           * \@internal
           * @param {?} emitEvent
           * @return {?}
           */
          value: function _updateControlsErrors(emitEvent) {
            /** @type {?} */
            this.status = this._calculateStatus();

            if (emitEvent) {
              /** @type {?} */
              this.statusChanges.emit(this.status);
            }

            if (this._parent) {
              this._parent._updateControlsErrors(emitEvent);
            }
          }
          /**
           * \@internal
           * @return {?}
           */

        }, {
          key: "_initObservables",
          value: function _initObservables() {
            /** @type {?} */
            this.valueChanges = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();

            /** @type {?} */
            this.statusChanges = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_calculateStatus",
          value: function _calculateStatus() {
            if (this._allControlsDisabled()) return DISABLED;
            if (this.errors) return INVALID;
            if (this._anyControlsHaveStatus(PENDING)) return PENDING;
            if (this._anyControlsHaveStatus(INVALID)) return INVALID;
            return VALID;
          }
          /**
           * \@internal
           * @param {?} status
           * @return {?}
           */

        }, {
          key: "_anyControlsHaveStatus",
          value: function _anyControlsHaveStatus(status) {
            return this._anyControls(
            /**
            * @param {?} control
            * @return {?}
            */
            function (control) {
              return control.status === status;
            });
          }
          /**
           * \@internal
           * @return {?}
           */

        }, {
          key: "_anyControlsDirty",
          value: function _anyControlsDirty() {
            return this._anyControls(
            /**
            * @param {?} control
            * @return {?}
            */
            function (control) {
              return control.dirty;
            });
          }
          /**
           * \@internal
           * @return {?}
           */

        }, {
          key: "_anyControlsTouched",
          value: function _anyControlsTouched() {
            return this._anyControls(
            /**
            * @param {?} control
            * @return {?}
            */
            function (control) {
              return control.touched;
            });
          }
          /**
           * \@internal
           * @param {?=} opts
           * @return {?}
           */

        }, {
          key: "_updatePristine",
          value: function _updatePristine() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            /** @type {?} */
            this.pristine = !this._anyControlsDirty();

            if (this._parent && !opts.onlySelf) {
              this._parent._updatePristine(opts);
            }
          }
          /**
           * \@internal
           * @param {?=} opts
           * @return {?}
           */

        }, {
          key: "_updateTouched",
          value: function _updateTouched() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            /** @type {?} */
            this.touched = this._anyControlsTouched();

            if (this._parent && !opts.onlySelf) {
              this._parent._updateTouched(opts);
            }
          }
          /**
           * \@internal
           * @param {?} formState
           * @return {?}
           */

        }, {
          key: "_isBoxedValue",
          value: function _isBoxedValue(formState) {
            return typeof formState === 'object' && formState !== null && Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;
          }
          /**
           * \@internal
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "_registerOnCollectionChange",
          value: function _registerOnCollectionChange(fn) {
            this._onCollectionChange = fn;
          }
          /**
           * \@internal
           * @param {?=} opts
           * @return {?}
           */

        }, {
          key: "_setUpdateStrategy",
          value: function _setUpdateStrategy(opts) {
            if (isOptionsObj(opts) &&
            /** @type {?} */
            opts.updateOn != null) {
              this._updateOn =
              /** @type {?} */

              /** @type {?} */
              opts.updateOn;
            }
          }
          /**
           * Check to see if parent has been marked artificially dirty.
           *
           * \@internal
           * @private
           * @param {?=} onlySelf
           * @return {?}
           */

        }, {
          key: "_parentMarkedDirty",
          value: function _parentMarkedDirty(onlySelf) {
            /** @type {?} */
            var parentDirty = this._parent && this._parent.dirty;
            return !onlySelf && parentDirty && !this._parent._anyControlsDirty();
          }
        }, {
          key: "parent",
          get: function get() {
            return this._parent;
          }
          /**
           * A control is `valid` when its `status` is `VALID`.
           *
           * @see {\@link AbstractControl.status}
           *
           * @return {?} True if the control has passed all of its validation tests,
           * false otherwise.
           */

        }, {
          key: "valid",
          get: function get() {
            return this.status === VALID;
          }
          /**
           * A control is `invalid` when its `status` is `INVALID`.
           *
           * @see {\@link AbstractControl.status}
           *
           * @return {?} True if this control has failed one or more of its validation checks,
           * false otherwise.
           */

        }, {
          key: "invalid",
          get: function get() {
            return this.status === INVALID;
          }
          /**
           * A control is `pending` when its `status` is `PENDING`.
           *
           * @see {\@link AbstractControl.status}
           *
           * @return {?} True if this control is in the process of conducting a validation check,
           * false otherwise.
           */

        }, {
          key: "pending",
          get: function get() {
            return this.status == PENDING;
          }
          /**
           * A control is `disabled` when its `status` is `DISABLED`.
           *
           * Disabled controls are exempt from validation checks and
           * are not included in the aggregate value of their ancestor
           * controls.
           *
           * @see {\@link AbstractControl.status}
           *
           * @return {?} True if the control is disabled, false otherwise.
           */

        }, {
          key: "disabled",
          get: function get() {
            return this.status === DISABLED;
          }
          /**
           * A control is `enabled` as long as its `status` is not `DISABLED`.
           *
           * @see {\@link AbstractControl.status}
           *
           * @return {?} True if the control has any status other than 'DISABLED',
           * false if the status is 'DISABLED'.
           *
           */

        }, {
          key: "enabled",
          get: function get() {
            return this.status !== DISABLED;
          }
          /**
           * A control is `dirty` if the user has changed the value
           * in the UI.
           *
           * @return {?} True if the user has changed the value of this control in the UI; compare `pristine`.
           * Programmatic changes to a control's value do not mark it dirty.
           */

        }, {
          key: "dirty",
          get: function get() {
            return !this.pristine;
          }
          /**
           * True if the control has not been marked as touched
           *
           * A control is `untouched` if the user has not yet triggered
           * a `blur` event on it.
           * @return {?}
           */

        }, {
          key: "untouched",
          get: function get() {
            return !this.touched;
          }
          /**
           * Reports the update strategy of the `AbstractControl` (meaning
           * the event on which the control updates itself).
           * Possible values: `'change'` | `'blur'` | `'submit'`
           * Default value: `'change'`
           * @return {?}
           */

        }, {
          key: "updateOn",
          get: function get() {
            return this._updateOn ? this._updateOn : this.parent ? this.parent.updateOn : 'change';
          }
        }, {
          key: "root",
          get: function get() {
            /** @type {?} */
            var x = this;

            while (x._parent) {
              x = x._parent;
            }

            return x;
          }
        }]);

        return AbstractControl;
      }();

      if (false) {}
      /**
       * Tracks the value and validation status of an individual form control.
       *
       * This is one of the three fundamental building blocks of Angular forms, along with
       * `FormGroup` and `FormArray`. It extends the `AbstractControl` class that
       * implements most of the base functionality for accessing the value, validation status,
       * user interactions and events.
       *
       * @see `AbstractControl`
       * @see [Reactive Forms Guide](guide/reactive-forms)
       * @see [Usage Notes](#usage-notes)
       *
       * \@usageNotes
       *
       * ### Initializing Form Controls
       *
       * Instantiate a `FormControl`, with an initial value.
       *
       * ```ts
       * const control = new FormControl('some value');
       * console.log(control.value);     // 'some value'
       * ```
       *
       * The following example initializes the control with a form state object. The `value`
       * and `disabled` keys are required in this case.
       *
       * ```ts
       * const control = new FormControl({ value: 'n/a', disabled: true });
       * console.log(control.value);     // 'n/a'
       * console.log(control.status);    // 'DISABLED'
       * ```
       *
       * The following example initializes the control with a sync validator.
       *
       * ```ts
       * const control = new FormControl('', Validators.required);
       * console.log(control.value);      // ''
       * console.log(control.status);     // 'INVALID'
       * ```
       *
       * The following example initializes the control using an options object.
       *
       * ```ts
       * const control = new FormControl('', {
       *    validators: Validators.required,
       *    asyncValidators: myAsyncValidator
       * });
       * ```
       *
       * ### Configure the control to update on a blur event
       *
       * Set the `updateOn` option to `'blur'` to update on the blur `event`.
       *
       * ```ts
       * const control = new FormControl('', { updateOn: 'blur' });
       * ```
       *
       * ### Configure the control to update on a submit event
       *
       * Set the `updateOn` option to `'submit'` to update on a submit `event`.
       *
       * ```ts
       * const control = new FormControl('', { updateOn: 'submit' });
       * ```
       *
       * ### Reset the control back to an initial value
       *
       * You reset to a specific form state by passing through a standalone
       * value or a form state object that contains both a value and a disabled state
       * (these are the only two properties that cannot be calculated).
       *
       * ```ts
       * const control = new FormControl('Nancy');
       *
       * console.log(control.value); // 'Nancy'
       *
       * control.reset('Drew');
       *
       * console.log(control.value); // 'Drew'
       * ```
       *
       * ### Reset the control back to an initial value and disabled
       *
       * ```
       * const control = new FormControl('Nancy');
       *
       * console.log(control.value); // 'Nancy'
       * console.log(control.status); // 'VALID'
       *
       * control.reset({ value: 'Drew', disabled: true });
       *
       * console.log(control.value); // 'Drew'
       * console.log(control.status); // 'DISABLED'
       * ```
       *
       * \@publicApi
       */


      var FormControl = /*#__PURE__*/function (_AbstractControl) {
        _inherits(FormControl, _AbstractControl);

        var _super21 = _createSuper(FormControl);

        /**
         * Creates a new `FormControl` instance.
         *
         * @param {?=} formState Initializes the control with an initial value,
         * or an object that defines the initial value and disabled state.
         *
         * @param {?=} validatorOrOpts A synchronous validator function, or an array of
         * such functions, or an `AbstractControlOptions` object that contains validation functions
         * and a validation trigger.
         *
         * @param {?=} asyncValidator A single async validator or array of async validator functions
         *
         */
        function FormControl() {
          var _this51;

          var formState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
          var validatorOrOpts = arguments.length > 1 ? arguments[1] : undefined;
          var asyncValidator = arguments.length > 2 ? arguments[2] : undefined;

          _classCallCheck(this, FormControl);

          _this51 = _super21.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts));
          /**
           * \@internal
           */

          _this51._onChange = [];

          _this51._applyFormState(formState);

          _this51._setUpdateStrategy(validatorOrOpts);

          _this51.updateValueAndValidity({
            onlySelf: true,
            emitEvent: false
          });

          _this51._initObservables();

          return _this51;
        }
        /**
         * Sets a new value for the form control.
         *
         * @param {?} value The new value for the control.
         * @param {?=} options Configuration options that determine how the control propagates changes
         * and emits events when the value changes.
         * The configuration options are passed to the {\@link AbstractControl#updateValueAndValidity
         * updateValueAndValidity} method.
         *
         * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
         * false.
         * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
         * `valueChanges`
         * observables emit events with the latest status and value when the control value is updated.
         * When false, no events are emitted.
         * * `emitModelToViewChange`: When true or not supplied  (the default), each change triggers an
         * `onChange` event to
         * update the view.
         * * `emitViewToModelChange`: When true or not supplied (the default), each change triggers an
         * `ngModelChange`
         * event to update the model.
         *
         * @return {?}
         */


        _createClass(FormControl, [{
          key: "setValue",
          value: function setValue(value) {
            var _this52 = this;

            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            /** @type {?} */
            this.value = this._pendingValue = value;

            if (this._onChange.length && options.emitModelToViewChange !== false) {
              this._onChange.forEach(
              /**
              * @param {?} changeFn
              * @return {?}
              */
              function (changeFn) {
                return changeFn(_this52.value, options.emitViewToModelChange !== false);
              });
            }

            this.updateValueAndValidity(options);
          }
          /**
           * Patches the value of a control.
           *
           * This function is functionally the same as {\@link FormControl#setValue setValue} at this level.
           * It exists for symmetry with {\@link FormGroup#patchValue patchValue} on `FormGroups` and
           * `FormArrays`, where it does behave differently.
           *
           * @see `setValue` for options
           * @param {?} value
           * @param {?=} options
           * @return {?}
           */

        }, {
          key: "patchValue",
          value: function patchValue(value) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            this.setValue(value, options);
          }
          /**
           * Resets the form control, marking it `pristine` and `untouched`, and setting
           * the value to null.
           *
           * @param {?=} formState Resets the control with an initial value,
           * or an object that defines the initial value and disabled state.
           *
           * @param {?=} options Configuration options that determine how the control propagates changes
           * and emits events after the value changes.
           *
           * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
           * false.
           * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
           * `valueChanges`
           * observables emit events with the latest status and value when the control is reset.
           * When false, no events are emitted.
           *
           * @return {?}
           */

        }, {
          key: "reset",
          value: function reset() {
            var formState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            this._applyFormState(formState);

            this.markAsPristine(options);
            this.markAsUntouched(options);
            this.setValue(this.value, options);
            this._pendingChange = false;
          }
          /**
           * \@internal
           * @return {?}
           */

        }, {
          key: "_updateValue",
          value: function _updateValue() {}
          /**
           * \@internal
           * @param {?} condition
           * @return {?}
           */

        }, {
          key: "_anyControls",
          value: function _anyControls(condition) {
            return false;
          }
          /**
           * \@internal
           * @return {?}
           */

        }, {
          key: "_allControlsDisabled",
          value: function _allControlsDisabled() {
            return this.disabled;
          }
          /**
           * Register a listener for change events.
           *
           * @param {?} fn The method that is called when the value changes
           * @return {?}
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this._onChange.push(fn);
          }
          /**
           * \@internal
           * @return {?}
           */

        }, {
          key: "_clearChangeFns",
          value: function _clearChangeFns() {
            this._onChange = [];
            this._onDisabledChange = [];

            this._onCollectionChange =
            /**
            * @return {?}
            */
            function () {};
          }
          /**
           * Register a listener for disabled events.
           *
           * @param {?} fn The method that is called when the disabled status changes.
           * @return {?}
           */

        }, {
          key: "registerOnDisabledChange",
          value: function registerOnDisabledChange(fn) {
            this._onDisabledChange.push(fn);
          }
          /**
           * \@internal
           * @param {?} cb
           * @return {?}
           */

        }, {
          key: "_forEachChild",
          value: function _forEachChild(cb) {}
          /**
           * \@internal
           * @return {?}
           */

        }, {
          key: "_syncPendingControls",
          value: function _syncPendingControls() {
            if (this.updateOn === 'submit') {
              if (this._pendingDirty) this.markAsDirty();
              if (this._pendingTouched) this.markAsTouched();

              if (this._pendingChange) {
                this.setValue(this._pendingValue, {
                  onlySelf: true,
                  emitModelToViewChange: false
                });
                return true;
              }
            }

            return false;
          }
          /**
           * @private
           * @param {?} formState
           * @return {?}
           */

        }, {
          key: "_applyFormState",
          value: function _applyFormState(formState) {
            if (this._isBoxedValue(formState)) {
              /** @type {?} */
              this.value = this._pendingValue = formState.value;
              formState.disabled ? this.disable({
                onlySelf: true,
                emitEvent: false
              }) : this.enable({
                onlySelf: true,
                emitEvent: false
              });
            } else {
              /** @type {?} */
              this.value = this._pendingValue = formState;
            }
          }
        }]);

        return FormControl;
      }(AbstractControl);

      if (false) {}
      /**
       * Tracks the value and validity state of a group of `FormControl` instances.
       *
       * A `FormGroup` aggregates the values of each child `FormControl` into one object,
       * with each control name as the key.  It calculates its status by reducing the status values
       * of its children. For example, if one of the controls in a group is invalid, the entire
       * group becomes invalid.
       *
       * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,
       * along with `FormControl` and `FormArray`.
       *
       * When instantiating a `FormGroup`, pass in a collection of child controls as the first
       * argument. The key for each child registers the name for the control.
       *
       * \@usageNotes
       *
       * ### Create a form group with 2 controls
       *
       * ```
       * const form = new FormGroup({
       *   first: new FormControl('Nancy', Validators.minLength(2)),
       *   last: new FormControl('Drew'),
       * });
       *
       * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}
       * console.log(form.status);  // 'VALID'
       * ```
       *
       * ### Create a form group with a group-level validator
       *
       * You include group-level validators as the second arg, or group-level async
       * validators as the third arg. These come in handy when you want to perform validation
       * that considers the value of more than one child control.
       *
       * ```
       * const form = new FormGroup({
       *   password: new FormControl('', Validators.minLength(2)),
       *   passwordConfirm: new FormControl('', Validators.minLength(2)),
       * }, passwordMatchValidator);
       *
       *
       * function passwordMatchValidator(g: FormGroup) {
       *    return g.get('password').value === g.get('passwordConfirm').value
       *       ? null : {'mismatch': true};
       * }
       * ```
       *
       * Like `FormControl` instances, you choose to pass in
       * validators and async validators as part of an options object.
       *
       * ```
       * const form = new FormGroup({
       *   password: new FormControl('')
       *   passwordConfirm: new FormControl('')
       * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });
       * ```
       *
       * ### Set the updateOn property for all controls in a form group
       *
       * The options object is used to set a default value for each child
       * control's `updateOn` property. If you set `updateOn` to `'blur'` at the
       * group level, all child controls default to 'blur', unless the child
       * has explicitly specified a different `updateOn` value.
       *
       * ```ts
       * const c = new FormGroup({
       *   one: new FormControl()
       * }, { updateOn: 'blur' });
       * ```
       *
       * \@publicApi
       */


      var FormGroup = /*#__PURE__*/function (_AbstractControl2) {
        _inherits(FormGroup, _AbstractControl2);

        var _super22 = _createSuper(FormGroup);

        /**
         * Creates a new `FormGroup` instance.
         *
         * @param {?} controls A collection of child controls. The key for each child is the name
         * under which it is registered.
         *
         * @param {?=} validatorOrOpts A synchronous validator function, or an array of
         * such functions, or an `AbstractControlOptions` object that contains validation functions
         * and a validation trigger.
         *
         * @param {?=} asyncValidator A single async validator or array of async validator functions
         *
         */
        function FormGroup(controls, validatorOrOpts, asyncValidator) {
          var _this53;

          _classCallCheck(this, FormGroup);

          _this53 = _super22.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts));
          _this53.controls = controls;

          _this53._initObservables();

          _this53._setUpdateStrategy(validatorOrOpts);

          _this53._setUpControls();

          _this53.updateValueAndValidity({
            onlySelf: true,
            emitEvent: false
          });

          return _this53;
        }
        /**
         * Registers a control with the group's list of controls.
         *
         * This method does not update the value or validity of the control.
         * Use {\@link FormGroup#addControl addControl} instead.
         *
         * @param {?} name The control name to register in the collection
         * @param {?} control Provides the control for the given name
         * @return {?}
         */


        _createClass(FormGroup, [{
          key: "registerControl",
          value: function registerControl(name, control) {
            if (this.controls[name]) return this.controls[name];
            this.controls[name] = control;
            control.setParent(this);

            control._registerOnCollectionChange(this._onCollectionChange);

            return control;
          }
          /**
           * Add a control to this group.
           *
           * This method also updates the value and validity of the control.
           *
           * @param {?} name The control name to add to the collection
           * @param {?} control Provides the control for the given name
           * @return {?}
           */

        }, {
          key: "addControl",
          value: function addControl(name, control) {
            this.registerControl(name, control);
            this.updateValueAndValidity();

            this._onCollectionChange();
          }
          /**
           * Remove a control from this group.
           *
           * @param {?} name The control name to remove from the collection
           * @return {?}
           */

        }, {
          key: "removeControl",
          value: function removeControl(name) {
            if (this.controls[name]) this.controls[name]._registerOnCollectionChange(
            /**
            * @return {?}
            */
            function () {});
            delete this.controls[name];
            this.updateValueAndValidity();

            this._onCollectionChange();
          }
          /**
           * Replace an existing control.
           *
           * @param {?} name The control name to replace in the collection
           * @param {?} control Provides the control for the given name
           * @return {?}
           */

        }, {
          key: "setControl",
          value: function setControl(name, control) {
            if (this.controls[name]) this.controls[name]._registerOnCollectionChange(
            /**
            * @return {?}
            */
            function () {});
            delete this.controls[name];
            if (control) this.registerControl(name, control);
            this.updateValueAndValidity();

            this._onCollectionChange();
          }
          /**
           * Check whether there is an enabled control with the given name in the group.
           *
           * Reports false for disabled controls. If you'd like to check for existence in the group
           * only, use {\@link AbstractControl#get get} instead.
           *
           * @param {?} controlName The control name to check for existence in the collection
           *
           * @return {?} false for disabled controls, true otherwise.
           */

        }, {
          key: "contains",
          value: function contains(controlName) {
            return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;
          }
          /**
           * Sets the value of the `FormGroup`. It accepts an object that matches
           * the structure of the group, with control names as keys.
           *
           * \@usageNotes
           * ### Set the complete value for the form group
           *
           * ```
           * const form = new FormGroup({
           *   first: new FormControl(),
           *   last: new FormControl()
           * });
           *
           * console.log(form.value);   // {first: null, last: null}
           *
           * form.setValue({first: 'Nancy', last: 'Drew'});
           * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}
           * ```
           *
           * @throws When strict checks fail, such as setting the value of a control
           * that doesn't exist or if you exclude a value of a control that does exist.
           *
           * @param {?} value The new value for the control that matches the structure of the group.
           * @param {?=} options Configuration options that determine how the control propagates changes
           * and emits events after the value changes.
           * The configuration options are passed to the {\@link AbstractControl#updateValueAndValidity
           * updateValueAndValidity} method.
           *
           * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
           * false.
           * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
           * `valueChanges`
           * observables emit events with the latest status and value when the control value is updated.
           * When false, no events are emitted.
           * @return {?}
           */

        }, {
          key: "setValue",
          value: function setValue(value) {
            var _this54 = this;

            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            this._checkAllValuesPresent(value);

            Object.keys(value).forEach(
            /**
            * @param {?} name
            * @return {?}
            */
            function (name) {
              _this54._throwIfControlMissing(name);

              _this54.controls[name].setValue(value[name], {
                onlySelf: true,
                emitEvent: options.emitEvent
              });
            });
            this.updateValueAndValidity(options);
          }
          /**
           * Patches the value of the `FormGroup`. It accepts an object with control
           * names as keys, and does its best to match the values to the correct controls
           * in the group.
           *
           * It accepts both super-sets and sub-sets of the group without throwing an error.
           *
           * \@usageNotes
           * ### Patch the value for a form group
           *
           * ```
           * const form = new FormGroup({
           *    first: new FormControl(),
           *    last: new FormControl()
           * });
           * console.log(form.value);   // {first: null, last: null}
           *
           * form.patchValue({first: 'Nancy'});
           * console.log(form.value);   // {first: 'Nancy', last: null}
           * ```
           *
           * @param {?} value The object that matches the structure of the group.
           * @param {?=} options Configuration options that determine how the control propagates changes and
           * emits events after the value is patched.
           * * `onlySelf`: When true, each change only affects this control and not its parent. Default is
           * true.
           * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
           * `valueChanges`
           * observables emit events with the latest status and value when the control value is updated.
           * When false, no events are emitted.
           * The configuration options are passed to the {\@link AbstractControl#updateValueAndValidity
           * updateValueAndValidity} method.
           * @return {?}
           */

        }, {
          key: "patchValue",
          value: function patchValue(value) {
            var _this55 = this;

            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            Object.keys(value).forEach(
            /**
            * @param {?} name
            * @return {?}
            */
            function (name) {
              if (_this55.controls[name]) {
                _this55.controls[name].patchValue(value[name], {
                  onlySelf: true,
                  emitEvent: options.emitEvent
                });
              }
            });
            this.updateValueAndValidity(options);
          }
          /**
           * Resets the `FormGroup`, marks all descendants are marked `pristine` and `untouched`, and
           * the value of all descendants to null.
           *
           * You reset to a specific form state by passing in a map of states
           * that matches the structure of your form, with control names as keys. The state
           * is a standalone value or a form state object with both a value and a disabled
           * status.
           *
           * \@usageNotes
           *
           * ### Reset the form group values
           *
           * ```ts
           * const form = new FormGroup({
           *   first: new FormControl('first name'),
           *   last: new FormControl('last name')
           * });
           *
           * console.log(form.value);  // {first: 'first name', last: 'last name'}
           *
           * form.reset({ first: 'name', last: 'last name' });
           *
           * console.log(form.value);  // {first: 'name', last: 'last name'}
           * ```
           *
           * ### Reset the form group values and disabled status
           *
           * ```
           * const form = new FormGroup({
           *   first: new FormControl('first name'),
           *   last: new FormControl('last name')
           * });
           *
           * form.reset({
           *   first: {value: 'name', disabled: true},
           *   last: 'last'
           * });
           *
           * console.log(this.form.value);  // {first: 'name', last: 'last name'}
           * console.log(this.form.get('first').status);  // 'DISABLED'
           * ```
           * @param {?=} value Resets the control with an initial value,
           * or an object that defines the initial value and disabled state.
           *
           * @param {?=} options Configuration options that determine how the control propagates changes
           * and emits events when the group is reset.
           * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
           * false.
           * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
           * `valueChanges`
           * observables emit events with the latest status and value when the control is reset.
           * When false, no events are emitted.
           * The configuration options are passed to the {\@link AbstractControl#updateValueAndValidity
           * updateValueAndValidity} method.
           *
           * @return {?}
           */

        }, {
          key: "reset",
          value: function reset() {
            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            this._forEachChild(
            /**
            * @param {?} control
            * @param {?} name
            * @return {?}
            */
            function (control, name) {
              control.reset(value[name], {
                onlySelf: true,
                emitEvent: options.emitEvent
              });
            });

            this._updatePristine(options);

            this._updateTouched(options);

            this.updateValueAndValidity(options);
          }
          /**
           * The aggregate value of the `FormGroup`, including any disabled controls.
           *
           * Retrieves all values regardless of disabled status.
           * The `value` property is the best way to get the value of the group, because
           * it excludes disabled controls in the `FormGroup`.
           * @return {?}
           */

        }, {
          key: "getRawValue",
          value: function getRawValue() {
            return this._reduceChildren({},
            /**
            * @param {?} acc
            * @param {?} control
            * @param {?} name
            * @return {?}
            */
            function (acc, control, name) {
              acc[name] = control instanceof FormControl ? control.value :
              /** @type {?} */
              control.getRawValue();
              return acc;
            });
          }
          /**
           * \@internal
           * @return {?}
           */

        }, {
          key: "_syncPendingControls",
          value: function _syncPendingControls() {
            /** @type {?} */
            var subtreeUpdated = this._reduceChildren(false,
            /**
            * @param {?} updated
            * @param {?} child
            * @return {?}
            */
            function (updated, child) {
              return child._syncPendingControls() ? true : updated;
            });

            if (subtreeUpdated) this.updateValueAndValidity({
              onlySelf: true
            });
            return subtreeUpdated;
          }
          /**
           * \@internal
           * @param {?} name
           * @return {?}
           */

        }, {
          key: "_throwIfControlMissing",
          value: function _throwIfControlMissing(name) {
            if (!Object.keys(this.controls).length) {
              throw new Error("\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
            }

            if (!this.controls[name]) {
              throw new Error("Cannot find form control with name: ".concat(name, "."));
            }
          }
          /**
           * \@internal
           * @param {?} cb
           * @return {?}
           */

        }, {
          key: "_forEachChild",
          value: function _forEachChild(cb) {
            var _this56 = this;

            Object.keys(this.controls).forEach(
            /**
            * @param {?} k
            * @return {?}
            */
            function (k) {
              return cb(_this56.controls[k], k);
            });
          }
          /**
           * \@internal
           * @return {?}
           */

        }, {
          key: "_setUpControls",
          value: function _setUpControls() {
            var _this57 = this;

            this._forEachChild(
            /**
            * @param {?} control
            * @return {?}
            */
            function (control) {
              control.setParent(_this57);

              control._registerOnCollectionChange(_this57._onCollectionChange);
            });
          }
          /**
           * \@internal
           * @return {?}
           */

        }, {
          key: "_updateValue",
          value: function _updateValue() {
            /** @type {?} */
            this.value = this._reduceValue();
          }
          /**
           * \@internal
           * @param {?} condition
           * @return {?}
           */

        }, {
          key: "_anyControls",
          value: function _anyControls(condition) {
            var _this58 = this;

            /** @type {?} */
            var res = false;

            this._forEachChild(
            /**
            * @param {?} control
            * @param {?} name
            * @return {?}
            */
            function (control, name) {
              res = res || _this58.contains(name) && condition(control);
            });

            return res;
          }
          /**
           * \@internal
           * @return {?}
           */

        }, {
          key: "_reduceValue",
          value: function _reduceValue() {
            var _this59 = this;

            return this._reduceChildren({},
            /**
            * @param {?} acc
            * @param {?} control
            * @param {?} name
            * @return {?}
            */
            function (acc, control, name) {
              if (control.enabled || _this59.disabled) {
                acc[name] = control.value;
              }

              return acc;
            });
          }
          /**
           * \@internal
           * @param {?} initValue
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "_reduceChildren",
          value: function _reduceChildren(initValue, fn) {
            /** @type {?} */
            var res = initValue;

            this._forEachChild(
            /**
            * @param {?} control
            * @param {?} name
            * @return {?}
            */
            function (control, name) {
              res = fn(res, control, name);
            });

            return res;
          }
          /**
           * \@internal
           * @return {?}
           */

        }, {
          key: "_allControlsDisabled",
          value: function _allControlsDisabled() {
            for (var _i5 = 0, _Object$keys = Object.keys(this.controls); _i5 < _Object$keys.length; _i5++) {
              var controlName = _Object$keys[_i5];

              if (this.controls[controlName].enabled) {
                return false;
              }
            }

            return Object.keys(this.controls).length > 0 || this.disabled;
          }
          /**
           * \@internal
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "_checkAllValuesPresent",
          value: function _checkAllValuesPresent(value) {
            this._forEachChild(
            /**
            * @param {?} control
            * @param {?} name
            * @return {?}
            */
            function (control, name) {
              if (value[name] === undefined) {
                throw new Error("Must supply a value for form control with name: '".concat(name, "'."));
              }
            });
          }
        }]);

        return FormGroup;
      }(AbstractControl);

      if (false) {}
      /**
       * Tracks the value and validity state of an array of `FormControl`,
       * `FormGroup` or `FormArray` instances.
       *
       * A `FormArray` aggregates the values of each child `FormControl` into an array.
       * It calculates its status by reducing the status values of its children. For example, if one of
       * the controls in a `FormArray` is invalid, the entire array becomes invalid.
       *
       * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,
       * along with `FormControl` and `FormGroup`.
       *
       * \@usageNotes
       *
       * ### Create an array of form controls
       *
       * ```
       * const arr = new FormArray([
       *   new FormControl('Nancy', Validators.minLength(2)),
       *   new FormControl('Drew'),
       * ]);
       *
       * console.log(arr.value);   // ['Nancy', 'Drew']
       * console.log(arr.status);  // 'VALID'
       * ```
       *
       * ### Create a form array with array-level validators
       *
       * You include array-level validators and async validators. These come in handy
       * when you want to perform validation that considers the value of more than one child
       * control.
       *
       * The two types of validators are passed in separately as the second and third arg
       * respectively, or together as part of an options object.
       *
       * ```
       * const arr = new FormArray([
       *   new FormControl('Nancy'),
       *   new FormControl('Drew')
       * ], {validators: myValidator, asyncValidators: myAsyncValidator});
       * ```
       *
       * ### Set the updateOn property for all controls in a form array
       *
       * The options object is used to set a default value for each child
       * control's `updateOn` property. If you set `updateOn` to `'blur'` at the
       * array level, all child controls default to 'blur', unless the child
       * has explicitly specified a different `updateOn` value.
       *
       * ```ts
       * const arr = new FormArray([
       *    new FormControl()
       * ], {updateOn: 'blur'});
       * ```
       *
       * ### Adding or removing controls from a form array
       *
       * To change the controls in the array, use the `push`, `insert`, `removeAt` or `clear` methods
       * in `FormArray` itself. These methods ensure the controls are properly tracked in the
       * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate
       * the `FormArray` directly, as that result in strange and unexpected behavior such
       * as broken change detection.
       *
       * \@publicApi
       */


      var FormArray = /*#__PURE__*/function (_AbstractControl3) {
        _inherits(FormArray, _AbstractControl3);

        var _super23 = _createSuper(FormArray);

        /**
         * Creates a new `FormArray` instance.
         *
         * @param {?} controls An array of child controls. Each child control is given an index
         * where it is registered.
         *
         * @param {?=} validatorOrOpts A synchronous validator function, or an array of
         * such functions, or an `AbstractControlOptions` object that contains validation functions
         * and a validation trigger.
         *
         * @param {?=} asyncValidator A single async validator or array of async validator functions
         *
         */
        function FormArray(controls, validatorOrOpts, asyncValidator) {
          var _this60;

          _classCallCheck(this, FormArray);

          _this60 = _super23.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts));
          _this60.controls = controls;

          _this60._initObservables();

          _this60._setUpdateStrategy(validatorOrOpts);

          _this60._setUpControls();

          _this60.updateValueAndValidity({
            onlySelf: true,
            emitEvent: false
          });

          return _this60;
        }
        /**
         * Get the `AbstractControl` at the given `index` in the array.
         *
         * @param {?} index Index in the array to retrieve the control
         * @return {?}
         */


        _createClass(FormArray, [{
          key: "at",
          value: function at(index) {
            return this.controls[index];
          }
          /**
           * Insert a new `AbstractControl` at the end of the array.
           *
           * @param {?} control Form control to be inserted
           * @return {?}
           */

        }, {
          key: "push",
          value: function push(control) {
            this.controls.push(control);

            this._registerControl(control);

            this.updateValueAndValidity();

            this._onCollectionChange();
          }
          /**
           * Insert a new `AbstractControl` at the given `index` in the array.
           *
           * @param {?} index Index in the array to insert the control
           * @param {?} control Form control to be inserted
           * @return {?}
           */

        }, {
          key: "insert",
          value: function insert(index, control) {
            this.controls.splice(index, 0, control);

            this._registerControl(control);

            this.updateValueAndValidity();
          }
          /**
           * Remove the control at the given `index` in the array.
           *
           * @param {?} index Index in the array to remove the control
           * @return {?}
           */

        }, {
          key: "removeAt",
          value: function removeAt(index) {
            if (this.controls[index]) this.controls[index]._registerOnCollectionChange(
            /**
            * @return {?}
            */
            function () {});
            this.controls.splice(index, 1);
            this.updateValueAndValidity();
          }
          /**
           * Replace an existing control.
           *
           * @param {?} index Index in the array to replace the control
           * @param {?} control The `AbstractControl` control to replace the existing control
           * @return {?}
           */

        }, {
          key: "setControl",
          value: function setControl(index, control) {
            if (this.controls[index]) this.controls[index]._registerOnCollectionChange(
            /**
            * @return {?}
            */
            function () {});
            this.controls.splice(index, 1);

            if (control) {
              this.controls.splice(index, 0, control);

              this._registerControl(control);
            }

            this.updateValueAndValidity();

            this._onCollectionChange();
          }
          /**
           * Length of the control array.
           * @return {?}
           */

        }, {
          key: "setValue",

          /**
           * Sets the value of the `FormArray`. It accepts an array that matches
           * the structure of the control.
           *
           * This method performs strict checks, and throws an error if you try
           * to set the value of a control that doesn't exist or if you exclude the
           * value of a control.
           *
           * \@usageNotes
           * ### Set the values for the controls in the form array
           *
           * ```
           * const arr = new FormArray([
           *   new FormControl(),
           *   new FormControl()
           * ]);
           * console.log(arr.value);   // [null, null]
           *
           * arr.setValue(['Nancy', 'Drew']);
           * console.log(arr.value);   // ['Nancy', 'Drew']
           * ```
           *
           * @param {?} value Array of values for the controls
           * @param {?=} options Configure options that determine how the control propagates changes and
           * emits events after the value changes
           *
           * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
           * is false.
           * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
           * `valueChanges`
           * observables emit events with the latest status and value when the control value is updated.
           * When false, no events are emitted.
           * The configuration options are passed to the {\@link AbstractControl#updateValueAndValidity
           * updateValueAndValidity} method.
           * @return {?}
           */
          value: function setValue(value) {
            var _this61 = this;

            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            this._checkAllValuesPresent(value);

            value.forEach(
            /**
            * @param {?} newValue
            * @param {?} index
            * @return {?}
            */
            function (newValue, index) {
              _this61._throwIfControlMissing(index);

              _this61.at(index).setValue(newValue, {
                onlySelf: true,
                emitEvent: options.emitEvent
              });
            });
            this.updateValueAndValidity(options);
          }
          /**
           * Patches the value of the `FormArray`. It accepts an array that matches the
           * structure of the control, and does its best to match the values to the correct
           * controls in the group.
           *
           * It accepts both super-sets and sub-sets of the array without throwing an error.
           *
           * \@usageNotes
           * ### Patch the values for controls in a form array
           *
           * ```
           * const arr = new FormArray([
           *    new FormControl(),
           *    new FormControl()
           * ]);
           * console.log(arr.value);   // [null, null]
           *
           * arr.patchValue(['Nancy']);
           * console.log(arr.value);   // ['Nancy', null]
           * ```
           *
           * @param {?} value Array of latest values for the controls
           * @param {?=} options Configure options that determine how the control propagates changes and
           * emits events after the value changes
           *
           * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
           * is false.
           * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
           * `valueChanges`
           * observables emit events with the latest status and value when the control value is updated.
           * When false, no events are emitted.
           * The configuration options are passed to the {\@link AbstractControl#updateValueAndValidity
           * updateValueAndValidity} method.
           * @return {?}
           */

        }, {
          key: "patchValue",
          value: function patchValue(value) {
            var _this62 = this;

            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            value.forEach(
            /**
            * @param {?} newValue
            * @param {?} index
            * @return {?}
            */
            function (newValue, index) {
              if (_this62.at(index)) {
                _this62.at(index).patchValue(newValue, {
                  onlySelf: true,
                  emitEvent: options.emitEvent
                });
              }
            });
            this.updateValueAndValidity(options);
          }
          /**
           * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the
           * value of all descendants to null or null maps.
           *
           * You reset to a specific form state by passing in an array of states
           * that matches the structure of the control. The state is a standalone value
           * or a form state object with both a value and a disabled status.
           *
           * \@usageNotes
           * ### Reset the values in a form array
           *
           * ```ts
           * const arr = new FormArray([
           *    new FormControl(),
           *    new FormControl()
           * ]);
           * arr.reset(['name', 'last name']);
           *
           * console.log(this.arr.value);  // ['name', 'last name']
           * ```
           *
           * ### Reset the values in a form array and the disabled status for the first control
           *
           * ```
           * this.arr.reset([
           *   {value: 'name', disabled: true},
           *   'last'
           * ]);
           *
           * console.log(this.arr.value);  // ['name', 'last name']
           * console.log(this.arr.get(0).status);  // 'DISABLED'
           * ```
           *
           * @param {?=} value Array of values for the controls
           * @param {?=} options Configure options that determine how the control propagates changes and
           * emits events after the value changes
           *
           * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
           * is false.
           * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
           * `valueChanges`
           * observables emit events with the latest status and value when the control is reset.
           * When false, no events are emitted.
           * The configuration options are passed to the {\@link AbstractControl#updateValueAndValidity
           * updateValueAndValidity} method.
           * @return {?}
           */

        }, {
          key: "reset",
          value: function reset() {
            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            this._forEachChild(
            /**
            * @param {?} control
            * @param {?} index
            * @return {?}
            */
            function (control, index) {
              control.reset(value[index], {
                onlySelf: true,
                emitEvent: options.emitEvent
              });
            });

            this._updatePristine(options);

            this._updateTouched(options);

            this.updateValueAndValidity(options);
          }
          /**
           * The aggregate value of the array, including any disabled controls.
           *
           * Reports all values regardless of disabled status.
           * For enabled controls only, the `value` property is the best way to get the value of the array.
           * @return {?}
           */

        }, {
          key: "getRawValue",
          value: function getRawValue() {
            return this.controls.map(
            /**
            * @param {?} control
            * @return {?}
            */
            function (control) {
              return control instanceof FormControl ? control.value :
              /** @type {?} */
              control.getRawValue();
            });
          }
          /**
           * Remove all controls in the `FormArray`.
           *
           * \@usageNotes
           * ### Remove all elements from a FormArray
           *
           * ```ts
           * const arr = new FormArray([
           *    new FormControl(),
           *    new FormControl()
           * ]);
           * console.log(arr.length);  // 2
           *
           * arr.clear();
           * console.log(arr.length);  // 0
           * ```
           *
           * It's a simpler and more efficient alternative to removing all elements one by one:
           *
           * ```ts
           * const arr = new FormArray([
           *    new FormControl(),
           *    new FormControl()
           * ]);
           *
           * while (arr.length) {
           *    arr.removeAt(0);
           * }
           * ```
           * @return {?}
           */

        }, {
          key: "clear",
          value: function clear() {
            if (this.controls.length < 1) return;

            this._forEachChild(
            /**
            * @param {?} control
            * @return {?}
            */
            function (control) {
              return control._registerOnCollectionChange(
              /**
              * @return {?}
              */
              function () {});
            });

            this.controls.splice(0);
            this.updateValueAndValidity();
          }
          /**
           * \@internal
           * @return {?}
           */

        }, {
          key: "_syncPendingControls",
          value: function _syncPendingControls() {
            /** @type {?} */
            var subtreeUpdated = this.controls.reduce(
            /**
            * @param {?} updated
            * @param {?} child
            * @return {?}
            */
            function (updated, child) {
              return child._syncPendingControls() ? true : updated;
            }, false);
            if (subtreeUpdated) this.updateValueAndValidity({
              onlySelf: true
            });
            return subtreeUpdated;
          }
          /**
           * \@internal
           * @param {?} index
           * @return {?}
           */

        }, {
          key: "_throwIfControlMissing",
          value: function _throwIfControlMissing(index) {
            if (!this.controls.length) {
              throw new Error("\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
            }

            if (!this.at(index)) {
              throw new Error("Cannot find form control at index ".concat(index));
            }
          }
          /**
           * \@internal
           * @param {?} cb
           * @return {?}
           */

        }, {
          key: "_forEachChild",
          value: function _forEachChild(cb) {
            this.controls.forEach(
            /**
            * @param {?} control
            * @param {?} index
            * @return {?}
            */
            function (control, index) {
              cb(control, index);
            });
          }
          /**
           * \@internal
           * @return {?}
           */

        }, {
          key: "_updateValue",
          value: function _updateValue() {
            var _this63 = this;

            /** @type {?} */
            this.value = this.controls.filter(
            /**
            * @param {?} control
            * @return {?}
            */
            function (control) {
              return control.enabled || _this63.disabled;
            }).map(
            /**
            * @param {?} control
            * @return {?}
            */
            function (control) {
              return control.value;
            });
          }
          /**
           * \@internal
           * @param {?} condition
           * @return {?}
           */

        }, {
          key: "_anyControls",
          value: function _anyControls(condition) {
            return this.controls.some(
            /**
            * @param {?} control
            * @return {?}
            */
            function (control) {
              return control.enabled && condition(control);
            });
          }
          /**
           * \@internal
           * @return {?}
           */

        }, {
          key: "_setUpControls",
          value: function _setUpControls() {
            var _this64 = this;

            this._forEachChild(
            /**
            * @param {?} control
            * @return {?}
            */
            function (control) {
              return _this64._registerControl(control);
            });
          }
          /**
           * \@internal
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "_checkAllValuesPresent",
          value: function _checkAllValuesPresent(value) {
            this._forEachChild(
            /**
            * @param {?} control
            * @param {?} i
            * @return {?}
            */
            function (control, i) {
              if (value[i] === undefined) {
                throw new Error("Must supply a value for form control at index: ".concat(i, "."));
              }
            });
          }
          /**
           * \@internal
           * @return {?}
           */

        }, {
          key: "_allControlsDisabled",
          value: function _allControlsDisabled() {
            var _iterator3 = _createForOfIteratorHelper(this.controls),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var control = _step3.value;
                if (control.enabled) return false;
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }

            return this.controls.length > 0 || this.disabled;
          }
          /**
           * @private
           * @param {?} control
           * @return {?}
           */

        }, {
          key: "_registerControl",
          value: function _registerControl(control) {
            control.setParent(this);

            control._registerOnCollectionChange(this._onCollectionChange);
          }
        }, {
          key: "length",
          get: function get() {
            return this.controls.length;
          }
        }]);

        return FormArray;
      }(AbstractControl);

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/ng_form.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var formDirectiveProvider = {
        provide: ControlContainer,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return NgForm;
        })
      };

      var ɵ0 =
      /**
      * @return {?}
      */
      function ɵ0() {
        return Promise.resolve(null);
      };
      /** @type {?} */


      var resolvedPromise = ɵ0();
      /**
       * \@description
       * Creates a top-level `FormGroup` instance and binds it to a form
       * to track aggregate form value and validation status.
       *
       * As soon as you import the `FormsModule`, this directive becomes active by default on
       * all `<form>` tags.  You don't need to add a special selector.
       *
       * You optionally export the directive into a local template variable using `ngForm` as the key
       * (ex: `#myForm="ngForm"`). This is optional, but useful.  Many properties from the underlying
       * `FormGroup` instance are duplicated on the directive itself, so a reference to it
       * gives you access to the aggregate value and validity status of the form, as well as
       * user interaction properties like `dirty` and `touched`.
       *
       * To register child controls with the form, use `NgModel` with a `name`
       * attribute. You may use `NgModelGroup` to create sub-groups within the form.
       *
       * If necessary, listen to the directive's `ngSubmit` event to be notified when the user has
       * triggered a form submission. The `ngSubmit` event emits the original form
       * submission event.
       *
       * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.
       * To import the `FormsModule` but skip its usage in some forms,
       * for example, to use native HTML5 validation, add the `ngNoForm` and the `<form>`
       * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is
       * unnecessary because the `<form>` tags are inert. In that case, you would
       * refrain from using the `formGroup` directive.
       *
       * \@usageNotes
       *
       * ### Listening for form submission
       *
       * The following example shows how to capture the form values from the "ngSubmit" event.
       *
       * {\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
       *
       * ### Setting the update options
       *
       * The following example shows you how to change the "updateOn" option from its default using
       * ngFormOptions.
       *
       * ```html
       * <form [ngFormOptions]="{updateOn: 'blur'}">
       *    <input name="one" ngModel>  <!-- this ngModel will update on blur -->
       * </form>
       * ```
       *
       * ### Native DOM validation UI
       *
       * In order to prevent the native DOM form validation UI from interfering with Angular's form
       * validation, Angular automatically adds the `novalidate` attribute on any `<form>` whenever
       * `FormModule` or `ReactiveFormModule` are imported into the application.
       * If you want to explicitly enable native DOM validation UI with Angular forms, you can add the
       * `ngNativeValidate` attribute to the `<form>` element:
       *
       * ```html
       * <form ngNativeValidate>
       *   ...
       * </form>
       * ```
       *
       * \@ngModule FormsModule
       * \@publicApi
       */

      var NgForm = /*#__PURE__*/function (_ControlContainer) {
        _inherits(NgForm, _ControlContainer);

        var _super24 = _createSuper(NgForm);

        /**
         * @param {?} validators
         * @param {?} asyncValidators
         */
        function NgForm(validators, asyncValidators) {
          var _this65;

          _classCallCheck(this, NgForm);

          _this65 = _super24.call(this);
          /**
           * \@description
           * Returns whether the form submission has been triggered.
           */

          _this65.submitted = false;
          _this65._directives = [];
          /**
           * \@description
           * Event emitter for the "ngSubmit" event
           */

          _this65.ngSubmit = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          _this65.form = new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));
          return _this65;
        }
        /**
         * \@description
         * Lifecycle method called after the view is initialized. For internal use only.
         * @return {?}
         */


        _createClass(NgForm, [{
          key: "ngAfterViewInit",
          value: function ngAfterViewInit() {
            this._setUpdateStrategy();
          }
          /**
           * \@description
           * The directive instance.
           * @return {?}
           */

        }, {
          key: "addControl",

          /**
           * \@description
           * Method that sets up the control directive in this group, re-calculates its value
           * and validity, and adds the instance to the internal list of directives.
           *
           * @param {?} dir The `NgModel` directive instance.
           * @return {?}
           */
          value: function addControl(dir) {
            var _this66 = this;

            resolvedPromise.then(
            /**
            * @return {?}
            */
            function () {
              /** @type {?} */
              var container = _this66._findContainer(dir.path);

              /** @type {?} */
              dir.control =
              /** @type {?} */
              container.registerControl(dir.name, dir.control);
              setUpControl(dir.control, dir);
              dir.control.updateValueAndValidity({
                emitEvent: false
              });

              _this66._directives.push(dir);
            });
          }
          /**
           * \@description
           * Retrieves the `FormControl` instance from the provided `NgModel` directive.
           *
           * @param {?} dir The `NgModel` directive instance.
           * @return {?}
           */

        }, {
          key: "getControl",
          value: function getControl(dir) {
            return (
              /** @type {?} */
              this.form.get(dir.path)
            );
          }
          /**
           * \@description
           * Removes the `NgModel` instance from the internal list of directives
           *
           * @param {?} dir The `NgModel` directive instance.
           * @return {?}
           */

        }, {
          key: "removeControl",
          value: function removeControl(dir) {
            var _this67 = this;

            resolvedPromise.then(
            /**
            * @return {?}
            */
            function () {
              /** @type {?} */
              var container = _this67._findContainer(dir.path);

              if (container) {
                container.removeControl(dir.name);
              }

              removeDir(_this67._directives, dir);
            });
          }
          /**
           * \@description
           * Adds a new `NgModelGroup` directive instance to the form.
           *
           * @param {?} dir The `NgModelGroup` directive instance.
           * @return {?}
           */

        }, {
          key: "addFormGroup",
          value: function addFormGroup(dir) {
            var _this68 = this;

            resolvedPromise.then(
            /**
            * @return {?}
            */
            function () {
              /** @type {?} */
              var container = _this68._findContainer(dir.path);
              /** @type {?} */


              var group = new FormGroup({});
              setUpFormContainer(group, dir);
              container.registerControl(dir.name, group);
              group.updateValueAndValidity({
                emitEvent: false
              });
            });
          }
          /**
           * \@description
           * Removes the `NgModelGroup` directive instance from the form.
           *
           * @param {?} dir The `NgModelGroup` directive instance.
           * @return {?}
           */

        }, {
          key: "removeFormGroup",
          value: function removeFormGroup(dir) {
            var _this69 = this;

            resolvedPromise.then(
            /**
            * @return {?}
            */
            function () {
              /** @type {?} */
              var container = _this69._findContainer(dir.path);

              if (container) {
                container.removeControl(dir.name);
              }
            });
          }
          /**
           * \@description
           * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance
           *
           * @param {?} dir The `NgModelGroup` directive instance.
           * @return {?}
           */

        }, {
          key: "getFormGroup",
          value: function getFormGroup(dir) {
            return (
              /** @type {?} */
              this.form.get(dir.path)
            );
          }
          /**
           * Sets the new value for the provided `NgControl` directive.
           *
           * @param {?} dir The `NgControl` directive instance.
           * @param {?} value The new value for the directive's control.
           * @return {?}
           */

        }, {
          key: "updateModel",
          value: function updateModel(dir, value) {
            var _this70 = this;

            resolvedPromise.then(
            /**
            * @return {?}
            */
            function () {
              /** @type {?} */
              var ctrl =
              /** @type {?} */
              _this70.form.get(
              /** @type {?} */
              dir.path);

              ctrl.setValue(value);
            });
          }
          /**
           * \@description
           * Sets the value for this `FormGroup`.
           *
           * @param {?} value The new value
           * @return {?}
           */

        }, {
          key: "setValue",
          value: function setValue(value) {
            this.control.setValue(value);
          }
          /**
           * \@description
           * Method called when the "submit" event is triggered on the form.
           * Triggers the `ngSubmit` emitter to emit the "submit" event as its payload.
           *
           * @param {?} $event The "submit" event object
           * @return {?}
           */

        }, {
          key: "onSubmit",
          value: function onSubmit($event) {
            /** @type {?} */
            this.submitted = true;
            syncPendingControls(this.form, this._directives);
            this.ngSubmit.emit($event);
            return false;
          }
          /**
           * \@description
           * Method called when the "reset" event is triggered on the form.
           * @return {?}
           */

        }, {
          key: "onReset",
          value: function onReset() {
            this.resetForm();
          }
          /**
           * \@description
           * Resets the form to an initial value and resets its submitted status.
           *
           * @param {?=} value The new value for the form.
           * @return {?}
           */

        }, {
          key: "resetForm",
          value: function resetForm() {
            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
            this.form.reset(value);

            /** @type {?} */
            this.submitted = false;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_setUpdateStrategy",
          value: function _setUpdateStrategy() {
            if (this.options && this.options.updateOn != null) {
              this.form._updateOn = this.options.updateOn;
            }
          }
          /**
           * \@internal
           * @param {?} path
           * @return {?}
           */

        }, {
          key: "_findContainer",
          value: function _findContainer(path) {
            path.pop();
            return path.length ?
            /** @type {?} */
            this.form.get(path) : this.form;
          }
        }, {
          key: "formDirective",
          get: function get() {
            return this;
          }
          /**
           * \@description
           * The internal `FormGroup` instance.
           * @return {?}
           */

        }, {
          key: "control",
          get: function get() {
            return this.form;
          }
          /**
           * \@description
           * Returns an array representing the path to this group. Because this directive
           * always lives at the top level of a form, it is always an empty array.
           * @return {?}
           */

        }, {
          key: "path",
          get: function get() {
            return [];
          }
          /**
           * \@description
           * Returns a map of the controls in this group.
           * @return {?}
           */

        }, {
          key: "controls",
          get: function get() {
            return this.form.controls;
          }
        }]);

        return NgForm;
      }(ControlContainer);

      NgForm.ɵfac = function NgForm_Factory(t) {
        return new (t || NgForm)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10));
      };

      NgForm.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgForm,
        selectors: [["form", 3, "ngNoForm", "", 3, "formGroup", ""], ["ng-form"], ["", "ngForm", ""]],
        hostBindings: function NgForm_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("submit", function NgForm_submit_HostBindingHandler($event) {
              return ctx.onSubmit($event);
            })("reset", function NgForm_reset_HostBindingHandler() {
              return ctx.onReset();
            });
          }
        },
        inputs: {
          options: ["ngFormOptions", "options"]
        },
        outputs: {
          ngSubmit: "ngSubmit"
        },
        exportAs: ["ngForm"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([formDirectiveProvider]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });
      /** @nocollapse */

      NgForm.ctorParameters = function () {
        return [{
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_ASYNC_VALIDATORS]
          }]
        }];
      };

      NgForm.propDecorators = {
        options: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['ngFormOptions']
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgForm, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]',
            providers: [formDirectiveProvider],
            host: {
              '(submit)': 'onSubmit($event)',
              '(reset)': 'onReset()'
            },
            outputs: ['ngSubmit'],
            exportAs: 'ngForm'
          }]
        }], function () {
          return [{
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_VALIDATORS]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_ASYNC_VALIDATORS]
            }]
          }];
        }, {
          options: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['ngFormOptions']
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/abstract_form_group_directive.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@description
       * A base class for code shared between the `NgModelGroup` and `FormGroupName` directives.
       *
       * \@publicApi
       */


      var AbstractFormGroupDirective = /*#__PURE__*/function (_ControlContainer2) {
        _inherits(AbstractFormGroupDirective, _ControlContainer2);

        var _super25 = _createSuper(AbstractFormGroupDirective);

        function AbstractFormGroupDirective() {
          _classCallCheck(this, AbstractFormGroupDirective);

          return _super25.apply(this, arguments);
        }

        _createClass(AbstractFormGroupDirective, [{
          key: "ngOnInit",

          /**
           * \@description
           * An internal callback method triggered on the instance after the inputs are set.
           * Registers the group with its parent group.
           * @return {?}
           */
          value: function ngOnInit() {
            this._checkParentType();

            /** @type {?} */
            this.formDirective.addFormGroup(this);
          }
          /**
           * \@description
           * An internal callback method triggered before the instance is destroyed.
           * Removes the group from its parent group.
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this.formDirective) {
              this.formDirective.removeFormGroup(this);
            }
          }
          /**
           * \@description
           * The `FormGroup` bound to this directive.
           * @return {?}
           */

        }, {
          key: "_checkParentType",

          /**
           * \@internal
           * @return {?}
           */
          value: function _checkParentType() {}
        }, {
          key: "control",
          get: function get() {
            return (
              /** @type {?} */
              this.formDirective.getFormGroup(this)
            );
          }
          /**
           * \@description
           * The path to this group from the top-level directive.
           * @return {?}
           */

        }, {
          key: "path",
          get: function get() {
            return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
          }
          /**
           * \@description
           * The top-level directive for this group if present, otherwise null.
           * @return {?}
           */

        }, {
          key: "formDirective",
          get: function get() {
            return this._parent ? this._parent.formDirective : null;
          }
          /**
           * \@description
           * The synchronous validators registered with this group.
           * @return {?}
           */

        }, {
          key: "validator",
          get: function get() {
            return composeValidators(this._validators);
          }
          /**
           * \@description
           * The async validators registered with this group.
           * @return {?}
           */

        }, {
          key: "asyncValidator",
          get: function get() {
            return composeAsyncValidators(this._asyncValidators);
          }
        }]);

        return AbstractFormGroupDirective;
      }(ControlContainer);

      AbstractFormGroupDirective.ɵfac = function AbstractFormGroupDirective_Factory(t) {
        return ɵAbstractFormGroupDirective_BaseFactory(t || AbstractFormGroupDirective);
      };

      AbstractFormGroupDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: AbstractFormGroupDirective,
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      var ɵAbstractFormGroupDirective_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](AbstractFormGroupDirective);

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/template_driven_errors.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var TemplateDrivenErrors = /*#__PURE__*/function () {
        function TemplateDrivenErrors() {
          _classCallCheck(this, TemplateDrivenErrors);
        }

        _createClass(TemplateDrivenErrors, null, [{
          key: "modelParentException",

          /**
           * @return {?}
           */
          value: function modelParentException() {
            throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      ".concat(FormErrorExamples.formControlName, "\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      ").concat(FormErrorExamples.ngModelWithFormGroup));
          }
          /**
           * @return {?}
           */

        }, {
          key: "formGroupNameException",
          value: function formGroupNameException() {
            throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      ".concat(FormErrorExamples.formGroupName, "\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      ").concat(FormErrorExamples.ngModelGroup));
          }
          /**
           * @return {?}
           */

        }, {
          key: "missingNameException",
          value: function missingNameException() {
            throw new Error("If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">");
          }
          /**
           * @return {?}
           */

        }, {
          key: "modelGroupParentException",
          value: function modelGroupParentException() {
            throw new Error("\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      ".concat(FormErrorExamples.formGroupName, "\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      ").concat(FormErrorExamples.ngModelGroup));
          }
        }]);

        return TemplateDrivenErrors;
      }();
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/ng_model_group.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var modelGroupProvider = {
        provide: ControlContainer,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return NgModelGroup;
        })
      };
      /**
       * \@description
       * Creates and binds a `FormGroup` instance to a DOM element.
       *
       * This directive can only be used as a child of `NgForm` (within `<form>` tags).
       *
       * Use this directive to validate a sub-group of your form separately from the
       * rest of your form, or if some values in your domain model make more sense
       * to consume together in a nested object.
       *
       * Provide a name for the sub-group and it will become the key
       * for the sub-group in the form's full value. If you need direct access, export the directive into
       * a local template variable using `ngModelGroup` (ex: `#myGroup="ngModelGroup"`).
       *
       * \@usageNotes
       *
       * ### Consuming controls in a grouping
       *
       * The following example shows you how to combine controls together in a sub-group
       * of the form.
       *
       * {\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}
       *
       * \@ngModule FormsModule
       * \@publicApi
       */

      var NgModelGroup = /*#__PURE__*/function (_AbstractFormGroupDir) {
        _inherits(NgModelGroup, _AbstractFormGroupDir);

        var _super26 = _createSuper(NgModelGroup);

        /**
         * @param {?} parent
         * @param {?} validators
         * @param {?} asyncValidators
         */
        function NgModelGroup(parent, validators, asyncValidators) {
          var _this71;

          _classCallCheck(this, NgModelGroup);

          _this71 = _super26.call(this);
          _this71._parent = parent;
          _this71._validators = validators;
          _this71._asyncValidators = asyncValidators;
          return _this71;
        }
        /**
         * \@internal
         * @return {?}
         */


        _createClass(NgModelGroup, [{
          key: "_checkParentType",
          value: function _checkParentType() {
            if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
              TemplateDrivenErrors.modelGroupParentException();
            }
          }
        }]);

        return NgModelGroup;
      }(AbstractFormGroupDirective);

      NgModelGroup.ɵfac = function NgModelGroup_Factory(t) {
        return new (t || NgModelGroup)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ControlContainer, 5), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10));
      };

      NgModelGroup.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgModelGroup,
        selectors: [["", "ngModelGroup", ""]],
        inputs: {
          name: ["ngModelGroup", "name"]
        },
        exportAs: ["ngModelGroup"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([modelGroupProvider]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });
      /** @nocollapse */

      NgModelGroup.ctorParameters = function () {
        return [{
          type: ControlContainer,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_ASYNC_VALIDATORS]
          }]
        }];
      };

      NgModelGroup.propDecorators = {
        name: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['ngModelGroup']
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgModelGroup, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[ngModelGroup]',
            providers: [modelGroupProvider],
            exportAs: 'ngModelGroup'
          }]
        }], function () {
          return [{
            type: ControlContainer,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_VALIDATORS]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_ASYNC_VALIDATORS]
            }]
          }];
        }, {
          name: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['ngModelGroup']
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/ng_model.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var formControlBinding = {
        provide: NgControl,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return NgModel;
        })
      };

      var ɵ0$1 =
      /**
      * @return {?}
      */
      function ɵ0$1() {
        return Promise.resolve(null);
      };
      /**
       * `ngModel` forces an additional change detection run when its inputs change:
       * E.g.:
       * ```
       * <div>{{myModel.valid}}</div>
       * <input [(ngModel)]="myValue" #myModel="ngModel">
       * ```
       * I.e. `ngModel` can export itself on the element and then be used in the template.
       * Normally, this would result in expressions before the `input` that use the exported directive
       * to have and old value as they have been
       * dirty checked before. As this is a very common case for `ngModel`, we added this second change
       * detection run.
       *
       * Notes:
       * - this is just one extra run no matter how many `ngModel` have been changed.
       * - this is a general problem when using `exportAs` for directives!
       * @type {?}
       */


      var resolvedPromise$1 = ɵ0$1();
      /**
       * \@description
       * Creates a `FormControl` instance from a domain model and binds it
       * to a form control element.
       *
       * The `FormControl` instance tracks the value, user interaction, and
       * validation status of the control and keeps the view synced with the model. If used
       * within a parent form, the directive also registers itself with the form as a child
       * control.
       *
       * This directive is used by itself or as part of a larger form. Use the
       * `ngModel` selector to activate it.
       *
       * It accepts a domain model as an optional `Input`. If you have a one-way binding
       * to `ngModel` with `[]` syntax, changing the value of the domain model in the component
       * class sets the value in the view. If you have a two-way binding with `[()]` syntax
       * (also known as 'banana-box syntax'), the value in the UI always syncs back to
       * the domain model in your class.
       *
       * To inspect the properties of the associated `FormControl` (like validity state),
       * export the directive into a local template variable using `ngModel` as the key (ex: `#myVar="ngModel"`).
       * You then access the control using the directive's `control` property,
       * but most properties used (like `valid` and `dirty`) fall through to the control anyway for direct access.
       * See a full list of properties directly available in `AbstractControlDirective`.
       *
       * @see `RadioControlValueAccessor`
       * @see `SelectControlValueAccessor`
       *
       * \@usageNotes
       *
       * ### Using ngModel on a standalone control
       *
       * The following examples show a simple standalone control using `ngModel`:
       *
       * {\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}
       *
       * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute
       * so that the control can be registered with the parent form under that name.
       *
       * In the context of a parent form, it's often unnecessary to include one-way or two-way binding,
       * as the parent form syncs the value for you. You access its properties by exporting it into a
       * local template variable using `ngForm` such as (`#f="ngForm"`). Use the variable where
       * needed on form submission.
       *
       * If you do need to populate initial values into your form, using a one-way binding for
       * `ngModel` tends to be sufficient as long as you use the exported form's value rather
       * than the domain model's value on submit.
       *
       * ### Using ngModel within a form
       *
       * The following example shows controls using `ngModel` within a form:
       *
       * {\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
       *
       * ### Using a standalone ngModel within a group
       *
       * The following example shows you how to use a standalone ngModel control
       * within a form. This controls the display of the form, but doesn't contain form data.
       *
       * ```html
       * <form>
       *   <input name="login" ngModel placeholder="Login">
       *   <input type="checkbox" ngModel [ngModelOptions]="{standalone: true}"> Show more options?
       * </form>
       * <!-- form value: {login: ''} -->
       * ```
       *
       * ### Setting the ngModel name attribute through options
       *
       * The following example shows you an alternate way to set the name attribute. The name attribute is used
       * within a custom form component, and the name `\@Input` property serves a different purpose.
       *
       * ```html
       * <form>
       *   <my-person-control name="Nancy" ngModel [ngModelOptions]="{name: 'user'}">
       *   </my-person-control>
       * </form>
       * <!-- form value: {user: ''} -->
       * ```
       *
       * \@ngModule FormsModule
       * \@publicApi
       */

      var NgModel = /*#__PURE__*/function (_NgControl) {
        _inherits(NgModel, _NgControl);

        var _super27 = _createSuper(NgModel);

        /**
         * @param {?} parent
         * @param {?} validators
         * @param {?} asyncValidators
         * @param {?} valueAccessors
         */
        function NgModel(parent, validators, asyncValidators, valueAccessors) {
          var _this72;

          _classCallCheck(this, NgModel);

          _this72 = _super27.call(this);
          _this72.control = new FormControl();
          /**
           * \@internal
           */

          _this72._registered = false;
          /**
           * \@description
           * Event emitter for producing the `ngModelChange` event after
           * the view model updates.
           */

          _this72.update = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          _this72._parent = parent;
          _this72._rawValidators = validators || [];
          _this72._rawAsyncValidators = asyncValidators || [];
          _this72.valueAccessor = selectValueAccessor(_assertThisInitialized(_this72), valueAccessors);
          return _this72;
        }
        /**
         * \@description
         * A lifecycle method called when the directive's inputs change. For internal use
         * only.
         *
         * @param {?} changes A object of key/value pairs for the set of changed inputs.
         * @return {?}
         */


        _createClass(NgModel, [{
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            this._checkForErrors();

            if (!this._registered) this._setUpControl();

            if ('isDisabled' in changes) {
              this._updateDisabled(changes);
            }

            if (isPropertyUpdated(changes, this.viewModel)) {
              this._updateValue(this.model);

              this.viewModel = this.model;
            }
          }
          /**
           * \@description
           * Lifecycle method called before the directive's instance is destroyed. For internal
           * use only.
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.formDirective && this.formDirective.removeControl(this);
          }
          /**
           * \@description
           * Returns an array that represents the path from the top-level form to this control.
           * Each index is the string name of the control on that level.
           * @return {?}
           */

        }, {
          key: "viewToModelUpdate",

          /**
           * \@description
           * Sets the new value for the view model and emits an `ngModelChange` event.
           *
           * @param {?} newValue The new value emitted by `ngModelChange`.
           * @return {?}
           */
          value: function viewToModelUpdate(newValue) {
            this.viewModel = newValue;
            this.update.emit(newValue);
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_setUpControl",
          value: function _setUpControl() {
            this._setUpdateStrategy();

            this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);
            this._registered = true;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_setUpdateStrategy",
          value: function _setUpdateStrategy() {
            if (this.options && this.options.updateOn != null) {
              this.control._updateOn = this.options.updateOn;
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_isStandalone",
          value: function _isStandalone() {
            return !this._parent || !!(this.options && this.options.standalone);
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_setUpStandalone",
          value: function _setUpStandalone() {
            setUpControl(this.control, this);
            this.control.updateValueAndValidity({
              emitEvent: false
            });
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_checkForErrors",
          value: function _checkForErrors() {
            if (!this._isStandalone()) {
              this._checkParentType();
            }

            this._checkName();
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_checkParentType",
          value: function _checkParentType() {
            if (!(this._parent instanceof NgModelGroup) && this._parent instanceof AbstractFormGroupDirective) {
              TemplateDrivenErrors.formGroupNameException();
            } else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
              TemplateDrivenErrors.modelParentException();
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_checkName",
          value: function _checkName() {
            if (this.options && this.options.name) this.name = this.options.name;

            if (!this._isStandalone() && !this.name) {
              TemplateDrivenErrors.missingNameException();
            }
          }
          /**
           * @private
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "_updateValue",
          value: function _updateValue(value) {
            var _this73 = this;

            resolvedPromise$1.then(
            /**
            * @return {?}
            */
            function () {
              _this73.control.setValue(value, {
                emitViewToModelChange: false
              });
            });
          }
          /**
           * @private
           * @param {?} changes
           * @return {?}
           */

        }, {
          key: "_updateDisabled",
          value: function _updateDisabled(changes) {
            var _this74 = this;

            /** @type {?} */
            var disabledValue = changes['isDisabled'].currentValue;
            /** @type {?} */

            var isDisabled = disabledValue === '' || disabledValue && disabledValue !== 'false';
            resolvedPromise$1.then(
            /**
            * @return {?}
            */
            function () {
              if (isDisabled && !_this74.control.disabled) {
                _this74.control.disable();
              } else if (!isDisabled && _this74.control.disabled) {
                _this74.control.enable();
              }
            });
          }
        }, {
          key: "path",
          get: function get() {
            return this._parent ? controlPath(this.name, this._parent) : [this.name];
          }
          /**
           * \@description
           * The top-level directive for this control if present, otherwise null.
           * @return {?}
           */

        }, {
          key: "formDirective",
          get: function get() {
            return this._parent ? this._parent.formDirective : null;
          }
          /**
           * \@description
           * Synchronous validator function composed of all the synchronous validators
           * registered with this directive.
           * @return {?}
           */

        }, {
          key: "validator",
          get: function get() {
            return composeValidators(this._rawValidators);
          }
          /**
           * \@description
           * Async validator function composed of all the async validators registered with this
           * directive.
           * @return {?}
           */

        }, {
          key: "asyncValidator",
          get: function get() {
            return composeAsyncValidators(this._rawAsyncValidators);
          }
        }]);

        return NgModel;
      }(NgControl);

      NgModel.ɵfac = function NgModel_Factory(t) {
        return new (t || NgModel)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ControlContainer, 9), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALUE_ACCESSOR, 10));
      };

      NgModel.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgModel,
        selectors: [["", "ngModel", "", 3, "formControlName", "", 3, "formControl", ""]],
        inputs: {
          name: "name",
          isDisabled: ["disabled", "isDisabled"],
          model: ["ngModel", "model"],
          options: ["ngModelOptions", "options"]
        },
        outputs: {
          update: "ngModelChange"
        },
        exportAs: ["ngModel"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([formControlBinding]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });
      /** @nocollapse */

      NgModel.ctorParameters = function () {
        return [{
          type: ControlContainer,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_ASYNC_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_VALUE_ACCESSOR]
          }]
        }];
      };

      NgModel.propDecorators = {
        name: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        isDisabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['disabled']
        }],
        model: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['ngModel']
        }],
        options: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['ngModelOptions']
        }],
        update: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
          args: ['ngModelChange']
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgModel, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[ngModel]:not([formControlName]):not([formControl])',
            providers: [formControlBinding],
            exportAs: 'ngModel'
          }]
        }], function () {
          return [{
            type: ControlContainer,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_VALIDATORS]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_ASYNC_VALIDATORS]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_VALUE_ACCESSOR]
            }]
          }];
        }, {
          update: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
            args: ['ngModelChange']
          }],
          name: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          isDisabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['disabled']
          }],
          model: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['ngModel']
          }],
          options: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['ngModelOptions']
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/ng_no_validate_directive.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@description
       *
       * Adds `novalidate` attribute to all forms by default.
       *
       * `novalidate` is used to disable browser's native form validation.
       *
       * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:
       *
       * ```
       * <form ngNativeValidate></form>
       * ```
       *
       * \@publicApi
       * \@ngModule ReactiveFormsModule
       * \@ngModule FormsModule
       */


      var ɵNgNoValidate = function ɵNgNoValidate() {
        _classCallCheck(this, ɵNgNoValidate);
      };

      ɵNgNoValidate.ɵfac = function ɵNgNoValidate_Factory(t) {
        return new (t || ɵNgNoValidate)();
      };

      ɵNgNoValidate.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: ɵNgNoValidate,
        selectors: [["form", 3, "ngNoForm", "", 3, "ngNativeValidate", ""]],
        hostAttrs: ["novalidate", ""]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ɵNgNoValidate, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'form:not([ngNoForm]):not([ngNativeValidate])',
            host: {
              'novalidate': ''
            }
          }]
        }], null, null);
      })();
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/reactive_directives/form_control_directive.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Token to provide to turn off the ngModel warning on formControl and formControlName.
       * @type {?}
       */


      var NG_MODEL_WITH_FORM_CONTROL_WARNING = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('NgModelWithFormControlWarning');
      /** @type {?} */

      var formControlBinding$1 = {
        provide: NgControl,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return FormControlDirective;
        })
      };
      /**
       * \@description
       * * Syncs a standalone `FormControl` instance to a form control element.
       *
       * @see [Reactive Forms Guide](guide/reactive-forms)
       * @see `FormControl`
       * @see `AbstractControl`
       *
       * \@usageNotes
       *
       * ### Registering a single form control
       *
       * The following examples shows how to register a standalone control and set its value.
       *
       * {\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}
       *
       * ### Use with ngModel
       *
       * Support for using the `ngModel` input property and `ngModelChange` event with reactive
       * form directives has been deprecated in Angular v6 and will be removed in a future version
       * of Angular.
       *
       * Now deprecated:
       *
       * ```html
       * <input [formControl]="control" [(ngModel)]="value">
       * ```
       *
       * ```ts
       * this.value = 'some value';
       * ```
       *
       * This has been deprecated for a few reasons. First, developers have found this pattern
       * confusing. It seems like the actual `ngModel` directive is being used, but in fact it's
       * an input/output property named `ngModel` on the reactive form directive that simply
       * approximates (some of) its behavior. Specifically, it allows getting/setting the value
       * and intercepting value events. However, some of `ngModel`'s other features - like
       * delaying updates with`ngModelOptions` or exporting the directive - simply don't work,
       * which has understandably caused some confusion.
       *
       * In addition, this pattern mixes template-driven and reactive forms strategies, which
       * we generally don't recommend because it doesn't take advantage of the full benefits of
       * either strategy. Setting the value in the template violates the template-agnostic
       * principles behind reactive forms, whereas adding a `FormControl`/`FormGroup` layer in
       * the class removes the convenience of defining forms in the template.
       *
       * To update your code before support is removed, you'll want to decide whether to stick
       * with reactive form directives (and get/set values using reactive forms patterns) or
       * switch over to template-driven directives.
       *
       * After (choice 1 - use reactive forms):
       *
       * ```html
       * <input [formControl]="control">
       * ```
       *
       * ```ts
       * this.control.setValue('some value');
       * ```
       *
       * After (choice 2 - use template-driven forms):
       *
       * ```html
       * <input [(ngModel)]="value">
       * ```
       *
       * ```ts
       * this.value = 'some value';
       * ```
       *
       * By default, when you use this pattern, you will see a deprecation warning once in dev
       * mode. You can choose to silence this warning by providing a config for
       * `ReactiveFormsModule` at import time:
       *
       * ```ts
       * imports: [
       *   ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'});
       * ]
       * ```
       *
       * Alternatively, you can choose to surface a separate warning for each instance of this
       * pattern with a config value of `"always"`. This may help to track down where in the code
       * the pattern is being used as the code is being updated.
       *
       * \@ngModule ReactiveFormsModule
       * \@publicApi
       */

      var FormControlDirective = /*#__PURE__*/function (_NgControl2) {
        _inherits(FormControlDirective, _NgControl2);

        var _super28 = _createSuper(FormControlDirective);

        /**
         * @param {?} validators
         * @param {?} asyncValidators
         * @param {?} valueAccessors
         * @param {?} _ngModelWarningConfig
         */
        function FormControlDirective(validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {
          var _this75;

          _classCallCheck(this, FormControlDirective);

          _this75 = _super28.call(this);
          _this75._ngModelWarningConfig = _ngModelWarningConfig;
          /**
           * @deprecated as of v6
           */

          _this75.update = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          /**
           * \@description
           * Instance property used to track whether an ngModel warning has been sent out for this
           * particular `FormControlDirective` instance. Used to support warning config of "always".
           *
           * \@internal
           */

          _this75._ngModelWarningSent = false;
          _this75._rawValidators = validators || [];
          _this75._rawAsyncValidators = asyncValidators || [];
          _this75.valueAccessor = selectValueAccessor(_assertThisInitialized(_this75), valueAccessors);
          return _this75;
        }
        /**
         * \@description
         * Triggers a warning that this input should not be used with reactive forms.
         * @param {?} isDisabled
         * @return {?}
         */


        _createClass(FormControlDirective, [{
          key: "ngOnChanges",

          /**
           * \@description
           * A lifecycle method called when the directive's inputs change. For internal use
           * only.
           *
           * @param {?} changes A object of key/value pairs for the set of changed inputs.
           * @return {?}
           */
          value: function ngOnChanges(changes) {
            if (this._isControlChanged(changes)) {
              setUpControl(this.form, this);

              if (this.control.disabled &&
              /** @type {?} */
              this.valueAccessor.setDisabledState) {
                /** @type {?} */

                /** @type {?} */
                this.valueAccessor.setDisabledState(true);
              }

              this.form.updateValueAndValidity({
                emitEvent: false
              });
            }

            if (isPropertyUpdated(changes, this.viewModel)) {
              _ngModelWarning('formControl', FormControlDirective, this, this._ngModelWarningConfig);

              this.form.setValue(this.model);
              this.viewModel = this.model;
            }
          }
          /**
           * \@description
           * Returns an array that represents the path from the top-level form to this control.
           * Each index is the string name of the control on that level.
           * @return {?}
           */

        }, {
          key: "viewToModelUpdate",

          /**
           * \@description
           * Sets the new value for the view model and emits an `ngModelChange` event.
           *
           * @param {?} newValue The new value for the view model.
           * @return {?}
           */
          value: function viewToModelUpdate(newValue) {
            this.viewModel = newValue;
            this.update.emit(newValue);
          }
          /**
           * @private
           * @param {?} changes
           * @return {?}
           */

        }, {
          key: "_isControlChanged",
          value: function _isControlChanged(changes) {
            return changes.hasOwnProperty('form');
          }
        }, {
          key: "isDisabled",
          set: function set(isDisabled) {
            ReactiveErrors.disabledAttrWarning();
          }
        }, {
          key: "path",
          get: function get() {
            return [];
          }
          /**
           * \@description
           * Synchronous validator function composed of all the synchronous validators
           * registered with this directive.
           * @return {?}
           */

        }, {
          key: "validator",
          get: function get() {
            return composeValidators(this._rawValidators);
          }
          /**
           * \@description
           * Async validator function composed of all the async validators registered with this
           * directive.
           * @return {?}
           */

        }, {
          key: "asyncValidator",
          get: function get() {
            return composeAsyncValidators(this._rawAsyncValidators);
          }
          /**
           * \@description
           * The `FormControl` bound to this directive.
           * @return {?}
           */

        }, {
          key: "control",
          get: function get() {
            return this.form;
          }
        }]);

        return FormControlDirective;
      }(NgControl);

      FormControlDirective.ɵfac = function FormControlDirective_Factory(t) {
        return new (t || FormControlDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALUE_ACCESSOR, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_MODEL_WITH_FORM_CONTROL_WARNING, 8));
      };

      FormControlDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: FormControlDirective,
        selectors: [["", "formControl", ""]],
        inputs: {
          isDisabled: ["disabled", "isDisabled"],
          form: ["formControl", "form"],
          model: ["ngModel", "model"]
        },
        outputs: {
          update: "ngModelChange"
        },
        exportAs: ["ngForm"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([formControlBinding$1]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });
      /**
       * \@description
       * Static property used to track whether any ngModel warnings have been sent across
       * all instances of FormControlDirective. Used to support warning config of "once".
       *
       * \@internal
       */

      FormControlDirective._ngModelWarningSentOnce = false;
      /** @nocollapse */

      FormControlDirective.ctorParameters = function () {
        return [{
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_ASYNC_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_VALUE_ACCESSOR]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]
          }]
        }];
      };

      FormControlDirective.propDecorators = {
        form: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['formControl']
        }],
        isDisabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['disabled']
        }],
        model: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['ngModel']
        }],
        update: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
          args: ['ngModelChange']
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FormControlDirective, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[formControl]',
            providers: [formControlBinding$1],
            exportAs: 'ngForm'
          }]
        }], function () {
          return [{
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_VALIDATORS]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_ASYNC_VALIDATORS]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_VALUE_ACCESSOR]
            }]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]
            }]
          }];
        }, {
          update: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
            args: ['ngModelChange']
          }],
          isDisabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['disabled']
          }],
          form: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['formControl']
          }],
          model: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['ngModel']
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/reactive_directives/form_group_directive.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var formDirectiveProvider$1 = {
        provide: ControlContainer,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return FormGroupDirective;
        })
      };
      /**
       * \@description
       *
       * Binds an existing `FormGroup` to a DOM element.
       *
       * This directive accepts an existing `FormGroup` instance. It will then use this
       * `FormGroup` instance to match any child `FormControl`, `FormGroup`,
       * and `FormArray` instances to child `FormControlName`, `FormGroupName`,
       * and `FormArrayName` directives.
       *
       * @see [Reactive Forms Guide](guide/reactive-forms)
       * @see `AbstractControl`
       *
       * ### Register Form Group
       *
       * The following example registers a `FormGroup` with first name and last name controls,
       * and listens for the *ngSubmit* event when the button is clicked.
       *
       * {\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
       *
       * \@ngModule ReactiveFormsModule
       * \@publicApi
       */

      var FormGroupDirective = /*#__PURE__*/function (_ControlContainer3) {
        _inherits(FormGroupDirective, _ControlContainer3);

        var _super29 = _createSuper(FormGroupDirective);

        /**
         * @param {?} _validators
         * @param {?} _asyncValidators
         */
        function FormGroupDirective(_validators, _asyncValidators) {
          var _this76;

          _classCallCheck(this, FormGroupDirective);

          _this76 = _super29.call(this);
          _this76._validators = _validators;
          _this76._asyncValidators = _asyncValidators;
          /**
           * \@description
           * Reports whether the form submission has been triggered.
           */

          _this76.submitted = false;
          /**
           * \@description
           * Tracks the list of added `FormControlName` instances
           */

          _this76.directives = [];
          /**
           * \@description
           * Tracks the `FormGroup` bound to this directive.
           */

          _this76.form =
          /** @type {?} */
          null;
          /**
           * \@description
           * Emits an event when the form submission has been triggered.
           */

          _this76.ngSubmit = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          return _this76;
        }
        /**
         * \@description
         * A lifecycle method called when the directive's inputs change. For internal use only.
         *
         * @param {?} changes A object of key/value pairs for the set of changed inputs.
         * @return {?}
         */


        _createClass(FormGroupDirective, [{
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            this._checkFormPresent();

            if (changes.hasOwnProperty('form')) {
              this._updateValidators();

              this._updateDomValue();

              this._updateRegistrations();
            }
          }
          /**
           * \@description
           * Returns this directive's instance.
           * @return {?}
           */

        }, {
          key: "addControl",

          /**
           * \@description
           * Method that sets up the control directive in this group, re-calculates its value
           * and validity, and adds the instance to the internal list of directives.
           *
           * @param {?} dir The `FormControlName` directive instance.
           * @return {?}
           */
          value: function addControl(dir) {
            /** @type {?} */
            var ctrl = this.form.get(dir.path);
            setUpControl(ctrl, dir);
            ctrl.updateValueAndValidity({
              emitEvent: false
            });
            this.directives.push(dir);
            return ctrl;
          }
          /**
           * \@description
           * Retrieves the `FormControl` instance from the provided `FormControlName` directive
           *
           * @param {?} dir The `FormControlName` directive instance.
           * @return {?}
           */

        }, {
          key: "getControl",
          value: function getControl(dir) {
            return (
              /** @type {?} */
              this.form.get(dir.path)
            );
          }
          /**
           * \@description
           * Removes the `FormControlName` instance from the internal list of directives
           *
           * @param {?} dir The `FormControlName` directive instance.
           * @return {?}
           */

        }, {
          key: "removeControl",
          value: function removeControl(dir) {
            removeDir(this.directives, dir);
          }
          /**
           * Adds a new `FormGroupName` directive instance to the form.
           *
           * @param {?} dir The `FormGroupName` directive instance.
           * @return {?}
           */

        }, {
          key: "addFormGroup",
          value: function addFormGroup(dir) {
            /** @type {?} */
            var ctrl = this.form.get(dir.path);
            setUpFormContainer(ctrl, dir);
            ctrl.updateValueAndValidity({
              emitEvent: false
            });
          }
          /**
           * No-op method to remove the form group.
           *
           * @param {?} dir The `FormGroupName` directive instance.
           * @return {?}
           */

        }, {
          key: "removeFormGroup",
          value: function removeFormGroup(dir) {}
          /**
           * \@description
           * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance
           *
           * @param {?} dir The `FormGroupName` directive instance.
           * @return {?}
           */

        }, {
          key: "getFormGroup",
          value: function getFormGroup(dir) {
            return (
              /** @type {?} */
              this.form.get(dir.path)
            );
          }
          /**
           * Adds a new `FormArrayName` directive instance to the form.
           *
           * @param {?} dir The `FormArrayName` directive instance.
           * @return {?}
           */

        }, {
          key: "addFormArray",
          value: function addFormArray(dir) {
            /** @type {?} */
            var ctrl = this.form.get(dir.path);
            setUpFormContainer(ctrl, dir);
            ctrl.updateValueAndValidity({
              emitEvent: false
            });
          }
          /**
           * No-op method to remove the form array.
           *
           * @param {?} dir The `FormArrayName` directive instance.
           * @return {?}
           */

        }, {
          key: "removeFormArray",
          value: function removeFormArray(dir) {}
          /**
           * \@description
           * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.
           *
           * @param {?} dir The `FormArrayName` directive instance.
           * @return {?}
           */

        }, {
          key: "getFormArray",
          value: function getFormArray(dir) {
            return (
              /** @type {?} */
              this.form.get(dir.path)
            );
          }
          /**
           * Sets the new value for the provided `FormControlName` directive.
           *
           * @param {?} dir The `FormControlName` directive instance.
           * @param {?} value The new value for the directive's control.
           * @return {?}
           */

        }, {
          key: "updateModel",
          value: function updateModel(dir, value) {
            /** @type {?} */
            var ctrl =
            /** @type {?} */
            this.form.get(dir.path);
            ctrl.setValue(value);
          }
          /**
           * \@description
           * Method called with the "submit" event is triggered on the form.
           * Triggers the `ngSubmit` emitter to emit the "submit" event as its payload.
           *
           * @param {?} $event The "submit" event object
           * @return {?}
           */

        }, {
          key: "onSubmit",
          value: function onSubmit($event) {
            /** @type {?} */
            this.submitted = true;
            syncPendingControls(this.form, this.directives);
            this.ngSubmit.emit($event);
            return false;
          }
          /**
           * \@description
           * Method called when the "reset" event is triggered on the form.
           * @return {?}
           */

        }, {
          key: "onReset",
          value: function onReset() {
            this.resetForm();
          }
          /**
           * \@description
           * Resets the form to an initial value and resets its submitted status.
           *
           * @param {?=} value The new value for the form.
           * @return {?}
           */

        }, {
          key: "resetForm",
          value: function resetForm() {
            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
            this.form.reset(value);

            /** @type {?} */
            this.submitted = false;
          }
          /**
           * \@internal
           * @return {?}
           */

        }, {
          key: "_updateDomValue",
          value: function _updateDomValue() {
            var _this77 = this;

            this.directives.forEach(
            /**
            * @param {?} dir
            * @return {?}
            */
            function (dir) {
              /** @type {?} */
              var newCtrl = _this77.form.get(dir.path);

              if (dir.control !== newCtrl) {
                cleanUpControl(dir.control, dir);
                if (newCtrl) setUpControl(newCtrl, dir);

                /** @type {?} */
                dir.control = newCtrl;
              }
            });

            this.form._updateTreeValidity({
              emitEvent: false
            });
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_updateRegistrations",
          value: function _updateRegistrations() {
            var _this78 = this;

            this.form._registerOnCollectionChange(
            /**
            * @return {?}
            */
            function () {
              return _this78._updateDomValue();
            });

            if (this._oldForm) this._oldForm._registerOnCollectionChange(
            /**
            * @return {?}
            */
            function () {});
            this._oldForm = this.form;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_updateValidators",
          value: function _updateValidators() {
            /** @type {?} */
            var sync = composeValidators(this._validators);
            this.form.validator = Validators.compose([
            /** @type {?} */
            this.form.validator,
            /** @type {?} */
            sync]);
            /** @type {?} */

            var async = composeAsyncValidators(this._asyncValidators);
            this.form.asyncValidator = Validators.composeAsync([
            /** @type {?} */
            this.form.asyncValidator,
            /** @type {?} */
            async]);
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_checkFormPresent",
          value: function _checkFormPresent() {
            if (!this.form) {
              ReactiveErrors.missingFormException();
            }
          }
        }, {
          key: "formDirective",
          get: function get() {
            return this;
          }
          /**
           * \@description
           * Returns the `FormGroup` bound to this directive.
           * @return {?}
           */

        }, {
          key: "control",
          get: function get() {
            return this.form;
          }
          /**
           * \@description
           * Returns an array representing the path to this group. Because this directive
           * always lives at the top level of a form, it always an empty array.
           * @return {?}
           */

        }, {
          key: "path",
          get: function get() {
            return [];
          }
        }]);

        return FormGroupDirective;
      }(ControlContainer);

      FormGroupDirective.ɵfac = function FormGroupDirective_Factory(t) {
        return new (t || FormGroupDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10));
      };

      FormGroupDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: FormGroupDirective,
        selectors: [["", "formGroup", ""]],
        hostBindings: function FormGroupDirective_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("submit", function FormGroupDirective_submit_HostBindingHandler($event) {
              return ctx.onSubmit($event);
            })("reset", function FormGroupDirective_reset_HostBindingHandler() {
              return ctx.onReset();
            });
          }
        },
        inputs: {
          form: ["formGroup", "form"]
        },
        outputs: {
          ngSubmit: "ngSubmit"
        },
        exportAs: ["ngForm"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([formDirectiveProvider$1]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });
      /** @nocollapse */

      FormGroupDirective.ctorParameters = function () {
        return [{
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_ASYNC_VALIDATORS]
          }]
        }];
      };

      FormGroupDirective.propDecorators = {
        form: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['formGroup']
        }],
        ngSubmit: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FormGroupDirective, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[formGroup]',
            providers: [formDirectiveProvider$1],
            host: {
              '(submit)': 'onSubmit($event)',
              '(reset)': 'onReset()'
            },
            exportAs: 'ngForm'
          }]
        }], function () {
          return [{
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_VALIDATORS]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_ASYNC_VALIDATORS]
            }]
          }];
        }, {
          form: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['formGroup']
          }],
          ngSubmit: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/reactive_directives/form_group_name.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var formGroupNameProvider = {
        provide: ControlContainer,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return FormGroupName;
        })
      };
      /**
       * \@description
       *
       * Syncs a nested `FormGroup` to a DOM element.
       *
       * This directive can only be used with a parent `FormGroupDirective`.
       *
       * It accepts the string name of the nested `FormGroup` to link, and
       * looks for a `FormGroup` registered with that name in the parent
       * `FormGroup` instance you passed into `FormGroupDirective`.
       *
       * Use nested form groups to validate a sub-group of a
       * form separately from the rest or to group the values of certain
       * controls into their own nested object.
       *
       * @see [Reactive Forms Guide](guide/reactive-forms)
       *
       * \@usageNotes
       *
       * ### Access the group by name
       *
       * The following example uses the {\@link AbstractControl#get get} method to access the
       * associated `FormGroup`
       *
       * ```ts
       *   this.form.get('name');
       * ```
       *
       * ### Access individual controls in the group
       *
       * The following example uses the {\@link AbstractControl#get get} method to access
       * individual controls within the group using dot syntax.
       *
       * ```ts
       *   this.form.get('name.first');
       * ```
       *
       * ### Register a nested `FormGroup`.
       *
       * The following example registers a nested *name* `FormGroup` within an existing `FormGroup`,
       * and provides methods to retrieve the nested `FormGroup` and individual controls.
       *
       * {\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}
       *
       * \@ngModule ReactiveFormsModule
       * \@publicApi
       */

      var FormGroupName = /*#__PURE__*/function (_AbstractFormGroupDir2) {
        _inherits(FormGroupName, _AbstractFormGroupDir2);

        var _super30 = _createSuper(FormGroupName);

        /**
         * @param {?} parent
         * @param {?} validators
         * @param {?} asyncValidators
         */
        function FormGroupName(parent, validators, asyncValidators) {
          var _this79;

          _classCallCheck(this, FormGroupName);

          _this79 = _super30.call(this);
          _this79._parent = parent;
          _this79._validators = validators;
          _this79._asyncValidators = asyncValidators;
          return _this79;
        }
        /**
         * \@internal
         * @return {?}
         */


        _createClass(FormGroupName, [{
          key: "_checkParentType",
          value: function _checkParentType() {
            if (_hasInvalidParent(this._parent)) {
              ReactiveErrors.groupParentException();
            }
          }
        }]);

        return FormGroupName;
      }(AbstractFormGroupDirective);

      FormGroupName.ɵfac = function FormGroupName_Factory(t) {
        return new (t || FormGroupName)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ControlContainer, 13), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10));
      };

      FormGroupName.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: FormGroupName,
        selectors: [["", "formGroupName", ""]],
        inputs: {
          name: ["formGroupName", "name"]
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([formGroupNameProvider]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });
      /** @nocollapse */

      FormGroupName.ctorParameters = function () {
        return [{
          type: ControlContainer,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_ASYNC_VALIDATORS]
          }]
        }];
      };

      FormGroupName.propDecorators = {
        name: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['formGroupName']
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FormGroupName, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[formGroupName]',
            providers: [formGroupNameProvider]
          }]
        }], function () {
          return [{
            type: ControlContainer,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_VALIDATORS]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_ASYNC_VALIDATORS]
            }]
          }];
        }, {
          name: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['formGroupName']
          }]
        });
      })();

      if (false) {}
      /** @type {?} */


      var formArrayNameProvider = {
        provide: ControlContainer,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return FormArrayName;
        })
      };
      /**
       * \@description
       *
       * Syncs a nested `FormArray` to a DOM element.
       *
       * This directive is designed to be used with a parent `FormGroupDirective` (selector:
       * `[formGroup]`).
       *
       * It accepts the string name of the nested `FormArray` you want to link, and
       * will look for a `FormArray` registered with that name in the parent
       * `FormGroup` instance you passed into `FormGroupDirective`.
       *
       * @see [Reactive Forms Guide](guide/reactive-forms)
       * @see `AbstractControl`
       *
       * \@usageNotes
       *
       * ### Example
       *
       * {\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}
       *
       * \@ngModule ReactiveFormsModule
       * \@publicApi
       */

      var FormArrayName = /*#__PURE__*/function (_ControlContainer4) {
        _inherits(FormArrayName, _ControlContainer4);

        var _super31 = _createSuper(FormArrayName);

        /**
         * @param {?} parent
         * @param {?} validators
         * @param {?} asyncValidators
         */
        function FormArrayName(parent, validators, asyncValidators) {
          var _this80;

          _classCallCheck(this, FormArrayName);

          _this80 = _super31.call(this);
          _this80._parent = parent;
          _this80._validators = validators;
          _this80._asyncValidators = asyncValidators;
          return _this80;
        }
        /**
         * \@description
         * A lifecycle method called when the directive's inputs are initialized. For internal use only.
         *
         * @throws If the directive does not have a valid parent.
         * @return {?}
         */


        _createClass(FormArrayName, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            this._checkParentType();

            /** @type {?} */
            this.formDirective.addFormArray(this);
          }
          /**
           * \@description
           * A lifecycle method called before the directive's instance is destroyed. For internal use only.
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this.formDirective) {
              this.formDirective.removeFormArray(this);
            }
          }
          /**
           * \@description
           * The `FormArray` bound to this directive.
           * @return {?}
           */

        }, {
          key: "_checkParentType",

          /**
           * @private
           * @return {?}
           */
          value: function _checkParentType() {
            if (_hasInvalidParent(this._parent)) {
              ReactiveErrors.arrayParentException();
            }
          }
        }, {
          key: "control",
          get: function get() {
            return (
              /** @type {?} */
              this.formDirective.getFormArray(this)
            );
          }
          /**
           * \@description
           * The top-level directive for this group if present, otherwise null.
           * @return {?}
           */

        }, {
          key: "formDirective",
          get: function get() {
            return this._parent ?
            /** @type {?} */
            this._parent.formDirective : null;
          }
          /**
           * \@description
           * Returns an array that represents the path from the top-level form to this control.
           * Each index is the string name of the control on that level.
           * @return {?}
           */

        }, {
          key: "path",
          get: function get() {
            return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
          }
          /**
           * \@description
           * Synchronous validator function composed of all the synchronous validators registered with this
           * directive.
           * @return {?}
           */

        }, {
          key: "validator",
          get: function get() {
            return composeValidators(this._validators);
          }
          /**
           * \@description
           * Async validator function composed of all the async validators registered with this directive.
           * @return {?}
           */

        }, {
          key: "asyncValidator",
          get: function get() {
            return composeAsyncValidators(this._asyncValidators);
          }
        }]);

        return FormArrayName;
      }(ControlContainer);

      FormArrayName.ɵfac = function FormArrayName_Factory(t) {
        return new (t || FormArrayName)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ControlContainer, 13), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10));
      };

      FormArrayName.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: FormArrayName,
        selectors: [["", "formArrayName", ""]],
        inputs: {
          name: ["formArrayName", "name"]
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([formArrayNameProvider]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });
      /** @nocollapse */

      FormArrayName.ctorParameters = function () {
        return [{
          type: ControlContainer,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_ASYNC_VALIDATORS]
          }]
        }];
      };

      FormArrayName.propDecorators = {
        name: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['formArrayName']
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FormArrayName, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[formArrayName]',
            providers: [formArrayNameProvider]
          }]
        }], function () {
          return [{
            type: ControlContainer,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_VALIDATORS]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_ASYNC_VALIDATORS]
            }]
          }];
        }, {
          name: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['formArrayName']
          }]
        });
      })();

      if (false) {}
      /**
       * @param {?} parent
       * @return {?}
       */


      function _hasInvalidParent(parent) {
        return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) && !(parent instanceof FormArrayName);
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/reactive_directives/form_control_name.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var controlNameBinding = {
        provide: NgControl,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return FormControlName;
        })
      };
      /**
       * \@description
       * Syncs a `FormControl` in an existing `FormGroup` to a form control
       * element by name.
       *
       * @see [Reactive Forms Guide](guide/reactive-forms)
       * @see `FormControl`
       * @see `AbstractControl`
       *
       * \@usageNotes
       *
       * ### Register `FormControl` within a group
       *
       * The following example shows how to register multiple form controls within a form group
       * and set their value.
       *
       * {\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
       *
       * To see `formControlName` examples with different form control types, see:
       *
       * * Radio buttons: `RadioControlValueAccessor`
       * * Selects: `SelectControlValueAccessor`
       *
       * ### Use with ngModel
       *
       * Support for using the `ngModel` input property and `ngModelChange` event with reactive
       * form directives has been deprecated in Angular v6 and will be removed in a future
       * version of Angular.
       *
       * Now deprecated:
       *
       * ```html
       * <form [formGroup]="form">
       *   <input formControlName="first" [(ngModel)]="value">
       * </form>
       * ```
       *
       * ```ts
       * this.value = 'some value';
       * ```
       *
       * This has been deprecated for a few reasons. First, developers have found this pattern
       * confusing. It seems like the actual `ngModel` directive is being used, but in fact it's
       * an input/output property named `ngModel` on the reactive form directive that simply
       * approximates (some of) its behavior. Specifically, it allows getting/setting the value
       * and intercepting value events. However, some of `ngModel`'s other features - like
       * delaying updates with `ngModelOptions` or exporting the directive - simply don't work,
       * which has understandably caused some confusion.
       *
       * In addition, this pattern mixes template-driven and reactive forms strategies, which
       * we generally don't recommend because it doesn't take advantage of the full benefits of
       * either strategy. Setting the value in the template violates the template-agnostic
       * principles behind reactive forms, whereas adding a `FormControl`/`FormGroup` layer in
       * the class removes the convenience of defining forms in the template.
       *
       * To update your code before support is removed, you'll want to decide whether to stick with
       * reactive form directives (and get/set values using reactive forms patterns) or switch over to
       * template-driven directives.
       *
       * After (choice 1 - use reactive forms):
       *
       * ```html
       * <form [formGroup]="form">
       *   <input formControlName="first">
       * </form>
       * ```
       *
       * ```ts
       * this.form.get('first').setValue('some value');
       * ```
       *
       * After (choice 2 - use template-driven forms):
       *
       * ```html
       * <input [(ngModel)]="value">
       * ```
       *
       * ```ts
       * this.value = 'some value';
       * ```
       *
       * By default, when you use this pattern, you will see a deprecation warning once in dev
       * mode. You can choose to silence this warning by providing a config for
       * `ReactiveFormsModule` at import time:
       *
       * ```ts
       * imports: [
       *   ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'})
       * ]
       * ```
       *
       * Alternatively, you can choose to surface a separate warning for each instance of this
       * pattern with a config value of `"always"`. This may help to track down where in the code
       * the pattern is being used as the code is being updated.
       *
       * \@ngModule ReactiveFormsModule
       * \@publicApi
       */

      var FormControlName = /*#__PURE__*/function (_NgControl3) {
        _inherits(FormControlName, _NgControl3);

        var _super32 = _createSuper(FormControlName);

        /**
         * @param {?} parent
         * @param {?} validators
         * @param {?} asyncValidators
         * @param {?} valueAccessors
         * @param {?} _ngModelWarningConfig
         */
        function FormControlName(parent, validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {
          var _this81;

          _classCallCheck(this, FormControlName);

          _this81 = _super32.call(this);
          _this81._ngModelWarningConfig = _ngModelWarningConfig;
          _this81._added = false;
          /**
           * @deprecated as of v6
           */

          _this81.update = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          /**
           * \@description
           * Instance property used to track whether an ngModel warning has been sent out for this
           * particular FormControlName instance. Used to support warning config of "always".
           *
           * \@internal
           */

          _this81._ngModelWarningSent = false;
          _this81._parent = parent;
          _this81._rawValidators = validators || [];
          _this81._rawAsyncValidators = asyncValidators || [];
          _this81.valueAccessor = selectValueAccessor(_assertThisInitialized(_this81), valueAccessors);
          return _this81;
        }
        /**
         * \@description
         * Triggers a warning that this input should not be used with reactive forms.
         * @param {?} isDisabled
         * @return {?}
         */


        _createClass(FormControlName, [{
          key: "ngOnChanges",

          /**
           * \@description
           * A lifecycle method called when the directive's inputs change. For internal use only.
           *
           * @param {?} changes A object of key/value pairs for the set of changed inputs.
           * @return {?}
           */
          value: function ngOnChanges(changes) {
            if (!this._added) this._setUpControl();

            if (isPropertyUpdated(changes, this.viewModel)) {
              _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);

              this.viewModel = this.model;
              this.formDirective.updateModel(this, this.model);
            }
          }
          /**
           * \@description
           * Lifecycle method called before the directive's instance is destroyed. For internal use only.
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this.formDirective) {
              this.formDirective.removeControl(this);
            }
          }
          /**
           * \@description
           * Sets the new value for the view model and emits an `ngModelChange` event.
           *
           * @param {?} newValue The new value for the view model.
           * @return {?}
           */

        }, {
          key: "viewToModelUpdate",
          value: function viewToModelUpdate(newValue) {
            this.viewModel = newValue;
            this.update.emit(newValue);
          }
          /**
           * \@description
           * Returns an array that represents the path from the top-level form to this control.
           * Each index is the string name of the control on that level.
           * @return {?}
           */

        }, {
          key: "_checkParentType",

          /**
           * @private
           * @return {?}
           */
          value: function _checkParentType() {
            if (!(this._parent instanceof FormGroupName) && this._parent instanceof AbstractFormGroupDirective) {
              ReactiveErrors.ngModelGroupException();
            } else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) && !(this._parent instanceof FormArrayName)) {
              ReactiveErrors.controlParentException();
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_setUpControl",
          value: function _setUpControl() {
            this._checkParentType();

            /** @type {?} */
            this.control = this.formDirective.addControl(this);

            if (this.control.disabled &&
            /** @type {?} */
            this.valueAccessor.setDisabledState) {
              /** @type {?} */

              /** @type {?} */
              this.valueAccessor.setDisabledState(true);
            }

            this._added = true;
          }
        }, {
          key: "isDisabled",
          set: function set(isDisabled) {
            ReactiveErrors.disabledAttrWarning();
          }
        }, {
          key: "path",
          get: function get() {
            return controlPath(this.name == null ? this.name : this.name.toString(),
            /** @type {?} */
            this._parent);
          }
          /**
           * \@description
           * The top-level directive for this group if present, otherwise null.
           * @return {?}
           */

        }, {
          key: "formDirective",
          get: function get() {
            return this._parent ? this._parent.formDirective : null;
          }
          /**
           * \@description
           * Synchronous validator function composed of all the synchronous validators
           * registered with this directive.
           * @return {?}
           */

        }, {
          key: "validator",
          get: function get() {
            return composeValidators(this._rawValidators);
          }
          /**
           * \@description
           * Async validator function composed of all the async validators registered with this
           * directive.
           * @return {?}
           */

        }, {
          key: "asyncValidator",
          get: function get() {
            return (
              /** @type {?} */
              composeAsyncValidators(this._rawAsyncValidators)
            );
          }
        }]);

        return FormControlName;
      }(NgControl);

      FormControlName.ɵfac = function FormControlName_Factory(t) {
        return new (t || FormControlName)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ControlContainer, 13), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALUE_ACCESSOR, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_MODEL_WITH_FORM_CONTROL_WARNING, 8));
      };

      FormControlName.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: FormControlName,
        selectors: [["", "formControlName", ""]],
        inputs: {
          isDisabled: ["disabled", "isDisabled"],
          name: ["formControlName", "name"],
          model: ["ngModel", "model"]
        },
        outputs: {
          update: "ngModelChange"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([controlNameBinding]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });
      /**
       * \@description
       * Static property used to track whether any ngModel warnings have been sent across
       * all instances of FormControlName. Used to support warning config of "once".
       *
       * \@internal
       */

      FormControlName._ngModelWarningSentOnce = false;
      /** @nocollapse */

      FormControlName.ctorParameters = function () {
        return [{
          type: ControlContainer,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_ASYNC_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_VALUE_ACCESSOR]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]
          }]
        }];
      };

      FormControlName.propDecorators = {
        name: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['formControlName']
        }],
        isDisabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['disabled']
        }],
        model: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['ngModel']
        }],
        update: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
          args: ['ngModelChange']
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FormControlName, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[formControlName]',
            providers: [controlNameBinding]
          }]
        }], function () {
          return [{
            type: ControlContainer,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_VALIDATORS]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_ASYNC_VALIDATORS]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_VALUE_ACCESSOR]
            }]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]
            }]
          }];
        }, {
          update: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
            args: ['ngModelChange']
          }],
          isDisabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['disabled']
          }],
          name: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['formControlName']
          }],
          model: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['ngModel']
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives/validators.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@description
       * An interface implemented by classes that perform synchronous validation.
       *
       * \@usageNotes
       *
       * ### Provide a custom validator
       *
       * The following example implements the `Validator` interface to create a
       * validator directive with a custom error key.
       *
       * ```typescript
       * \@Directive({
       *   selector: '[customValidator]',
       *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]
       * })
       * class CustomValidatorDirective implements Validator {
       *   validate(control: AbstractControl): ValidationErrors|null {
       *     return {'custom': true};
       *   }
       * }
       * ```
       *
       * \@publicApi
       * @record
       */


      function Validator() {}

      if (false) {}
      /**
       * \@description
       * An interface implemented by classes that perform asynchronous validation.
       *
       * \@usageNotes
       *
       * ### Provide a custom async validator directive
       *
       * The following example implements the `AsyncValidator` interface to create an
       * async validator directive with a custom error key.
       *
       * ```typescript
       * import { of as observableOf } from 'rxjs';
       *
       * \@Directive({
       *   selector: '[customAsyncValidator]',
       *   providers: [{provide: NG_ASYNC_VALIDATORS, useExisting: CustomAsyncValidatorDirective, multi:
       * true}]
       * })
       * class CustomAsyncValidatorDirective implements AsyncValidator {
       *   validate(control: AbstractControl): Observable<ValidationErrors|null> {
       *     return observableOf({'custom': true});
       *   }
       * }
       * ```
       *
       * \@publicApi
       * @record
       */


      function AsyncValidator() {}

      if (false) {}
      /**
       * \@description
       * Provider which adds `RequiredValidator` to the `NG_VALIDATORS` multi-provider list.
       * @type {?}
       */


      var REQUIRED_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return RequiredValidator;
        }),
        multi: true
      };
      /**
       * \@description
       * Provider which adds `CheckboxRequiredValidator` to the `NG_VALIDATORS` multi-provider list.
       * @type {?}
       */

      var CHECKBOX_REQUIRED_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return CheckboxRequiredValidator;
        }),
        multi: true
      };
      /**
       * \@description
       * A directive that adds the `required` validator to any controls marked with the
       * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
       *
       * @see [Form Validation](guide/form-validation)
       *
       * \@usageNotes
       *
       * ### Adding a required validator using template-driven forms
       *
       * ```
       * <input name="fullName" ngModel required>
       * ```
       *
       * \@ngModule FormsModule
       * \@ngModule ReactiveFormsModule
       * \@publicApi
       */

      var RequiredValidator = /*#__PURE__*/function () {
        function RequiredValidator() {
          _classCallCheck(this, RequiredValidator);
        }

        _createClass(RequiredValidator, [{
          key: "validate",

          /**
           * \@description
           * Method that validates whether the control is empty.
           * Returns the validation result if enabled, otherwise null.
           * @param {?} control
           * @return {?}
           */
          value: function validate(control) {
            return this.required ? Validators.required(control) : null;
          }
          /**
           * \@description
           * Registers a callback function to call when the validator inputs change.
           *
           * @param {?} fn The callback function
           * @return {?}
           */

        }, {
          key: "registerOnValidatorChange",
          value: function registerOnValidatorChange(fn) {
            this._onChange = fn;
          }
        }, {
          key: "required",

          /**
           * \@description
           * Tracks changes to the required attribute bound to this directive.
           * @return {?}
           */
          get: function get() {
            return this._required;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._required = value != null && value !== false && "".concat(value) !== 'false';
            if (this._onChange) this._onChange();
          }
        }]);

        return RequiredValidator;
      }();

      RequiredValidator.ɵfac = function RequiredValidator_Factory(t) {
        return new (t || RequiredValidator)();
      };

      RequiredValidator.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: RequiredValidator,
        selectors: [["", "required", "", "formControlName", "", 3, "type", "checkbox"], ["", "required", "", "formControl", "", 3, "type", "checkbox"], ["", "required", "", "ngModel", "", 3, "type", "checkbox"]],
        hostVars: 1,
        hostBindings: function RequiredValidator_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("required", ctx.required ? "" : null);
          }
        },
        inputs: {
          required: "required"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([REQUIRED_VALIDATOR])]
      });
      RequiredValidator.propDecorators = {
        required: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](RequiredValidator, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',
            providers: [REQUIRED_VALIDATOR],
            host: {
              '[attr.required]': 'required ? "" : null'
            }
          }]
        }], null, {
          required: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();

      if (false) {}
      /**
       * A Directive that adds the `required` validator to checkbox controls marked with the
       * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
       *
       * @see [Form Validation](guide/form-validation)
       *
       * \@usageNotes
       *
       * ### Adding a required checkbox validator using template-driven forms
       *
       * The following example shows how to add a checkbox required validator to an input attached to an ngModel binding.
       *
       * ```
       * <input type="checkbox" name="active" ngModel required>
       * ```
       *
       * \@publicApi
       * \@ngModule FormsModule
       * \@ngModule ReactiveFormsModule
       */


      var CheckboxRequiredValidator = /*#__PURE__*/function (_RequiredValidator) {
        _inherits(CheckboxRequiredValidator, _RequiredValidator);

        var _super33 = _createSuper(CheckboxRequiredValidator);

        function CheckboxRequiredValidator() {
          _classCallCheck(this, CheckboxRequiredValidator);

          return _super33.apply(this, arguments);
        }

        _createClass(CheckboxRequiredValidator, [{
          key: "validate",

          /**
           * \@description
           * Method that validates whether or not the checkbox has been checked.
           * Returns the validation result if enabled, otherwise null.
           * @param {?} control
           * @return {?}
           */
          value: function validate(control) {
            return this.required ? Validators.requiredTrue(control) : null;
          }
        }]);

        return CheckboxRequiredValidator;
      }(RequiredValidator);

      CheckboxRequiredValidator.ɵfac = function CheckboxRequiredValidator_Factory(t) {
        return ɵCheckboxRequiredValidator_BaseFactory(t || CheckboxRequiredValidator);
      };

      CheckboxRequiredValidator.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: CheckboxRequiredValidator,
        selectors: [["input", "type", "checkbox", "required", "", "formControlName", ""], ["input", "type", "checkbox", "required", "", "formControl", ""], ["input", "type", "checkbox", "required", "", "ngModel", ""]],
        hostVars: 1,
        hostBindings: function CheckboxRequiredValidator_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("required", ctx.required ? "" : null);
          }
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([CHECKBOX_REQUIRED_VALIDATOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      var ɵCheckboxRequiredValidator_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](CheckboxRequiredValidator);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CheckboxRequiredValidator, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',
            providers: [CHECKBOX_REQUIRED_VALIDATOR],
            host: {
              '[attr.required]': 'required ? "" : null'
            }
          }]
        }], null, null);
      })();
      /**
       * \@description
       * Provider which adds `EmailValidator` to the `NG_VALIDATORS` multi-provider list.
       * @type {?}
       */


      var EMAIL_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return EmailValidator;
        }),
        multi: true
      };
      /**
       * A directive that adds the `email` validator to controls marked with the
       * `email` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
       *
       * @see [Form Validation](guide/form-validation)
       *
       * \@usageNotes
       *
       * ### Adding an email validator
       *
       * The following example shows how to add an email validator to an input attached to an ngModel binding.
       *
       * ```
       * <input type="email" name="email" ngModel email>
       * <input type="email" name="email" ngModel email="true">
       * <input type="email" name="email" ngModel [email]="true">
       * ```
       *
       * \@publicApi
       * \@ngModule FormsModule
       * \@ngModule ReactiveFormsModule
       */

      var EmailValidator = /*#__PURE__*/function () {
        function EmailValidator() {
          _classCallCheck(this, EmailValidator);
        }

        _createClass(EmailValidator, [{
          key: "validate",

          /**
           * \@description
           * Method that validates whether an email address is valid.
           * Returns the validation result if enabled, otherwise null.
           * @param {?} control
           * @return {?}
           */
          value: function validate(control) {
            return this._enabled ? Validators.email(control) : null;
          }
          /**
           * \@description
           * Registers a callback function to call when the validator inputs change.
           *
           * @param {?} fn The callback function
           * @return {?}
           */

        }, {
          key: "registerOnValidatorChange",
          value: function registerOnValidatorChange(fn) {
            this._onChange = fn;
          }
        }, {
          key: "email",

          /**
           * \@description
           * Tracks changes to the email attribute bound to this directive.
           * @param {?} value
           * @return {?}
           */
          set: function set(value) {
            this._enabled = value === '' || value === true || value === 'true';
            if (this._onChange) this._onChange();
          }
        }]);

        return EmailValidator;
      }();

      EmailValidator.ɵfac = function EmailValidator_Factory(t) {
        return new (t || EmailValidator)();
      };

      EmailValidator.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: EmailValidator,
        selectors: [["", "email", "", "formControlName", ""], ["", "email", "", "formControl", ""], ["", "email", "", "ngModel", ""]],
        inputs: {
          email: "email"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([EMAIL_VALIDATOR])]
      });
      EmailValidator.propDecorators = {
        email: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](EmailValidator, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[email][formControlName],[email][formControl],[email][ngModel]',
            providers: [EMAIL_VALIDATOR]
          }]
        }], null, {
          email: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();

      if (false) {}
      /**
       * \@description
       * A function that receives a control and synchronously returns a map of
       * validation errors if present, otherwise null.
       *
       * \@publicApi
       * @record
       */


      function ValidatorFn() {}
      /**
       * \@description
       * A function that receives a control and returns a Promise or observable
       * that emits validation errors if present, otherwise null.
       *
       * \@publicApi
       * @record
       */


      function AsyncValidatorFn() {}
      /**
       * \@description
       * Provider which adds `MinLengthValidator` to the `NG_VALIDATORS` multi-provider list.
       * @type {?}
       */


      var MIN_LENGTH_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return MinLengthValidator;
        }),
        multi: true
      };
      /**
       * A directive that adds minimum length validation to controls marked with the
       * `minlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
       *
       * @see [Form Validation](guide/form-validation)
       *
       * \@usageNotes
       *
       * ### Adding a minimum length validator
       *
       * The following example shows how to add a minimum length validator to an input attached to an
       * ngModel binding.
       *
       * ```html
       * <input name="firstName" ngModel minlength="4">
       * ```
       *
       * \@ngModule ReactiveFormsModule
       * \@ngModule FormsModule
       * \@publicApi
       */

      var MinLengthValidator = /*#__PURE__*/function () {
        function MinLengthValidator() {
          _classCallCheck(this, MinLengthValidator);
        }

        _createClass(MinLengthValidator, [{
          key: "ngOnChanges",

          /**
           * \@description
           * A lifecycle method called when the directive's inputs change. For internal use
           * only.
           *
           * @param {?} changes A object of key/value pairs for the set of changed inputs.
           * @return {?}
           */
          value: function ngOnChanges(changes) {
            if ('minlength' in changes) {
              this._createValidator();

              if (this._onChange) this._onChange();
            }
          }
          /**
           * \@description
           * Method that validates whether the value meets a minimum length
           * requirement. Returns the validation result if enabled, otherwise null.
           * @param {?} control
           * @return {?}
           */

        }, {
          key: "validate",
          value: function validate(control) {
            return this.minlength == null ? null : this._validator(control);
          }
          /**
           * \@description
           * Registers a callback function to call when the validator inputs change.
           *
           * @param {?} fn The callback function
           * @return {?}
           */

        }, {
          key: "registerOnValidatorChange",
          value: function registerOnValidatorChange(fn) {
            this._onChange = fn;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_createValidator",
          value: function _createValidator() {
            this._validator = Validators.minLength(typeof this.minlength === 'number' ? this.minlength : parseInt(this.minlength, 10));
          }
        }]);

        return MinLengthValidator;
      }();

      MinLengthValidator.ɵfac = function MinLengthValidator_Factory(t) {
        return new (t || MinLengthValidator)();
      };

      MinLengthValidator.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MinLengthValidator,
        selectors: [["", "minlength", "", "formControlName", ""], ["", "minlength", "", "formControl", ""], ["", "minlength", "", "ngModel", ""]],
        hostVars: 1,
        hostBindings: function MinLengthValidator_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("minlength", ctx.minlength ? ctx.minlength : null);
          }
        },
        inputs: {
          minlength: "minlength"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([MIN_LENGTH_VALIDATOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });
      MinLengthValidator.propDecorators = {
        minlength: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MinLengthValidator, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',
            providers: [MIN_LENGTH_VALIDATOR],
            host: {
              '[attr.minlength]': 'minlength ? minlength : null'
            }
          }]
        }], null, {
          minlength: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();

      if (false) {}
      /**
       * \@description
       * Provider which adds `MaxLengthValidator` to the `NG_VALIDATORS` multi-provider list.
       * @type {?}
       */


      var MAX_LENGTH_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return MaxLengthValidator;
        }),
        multi: true
      };
      /**
       * A directive that adds max length validation to controls marked with the
       * `maxlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
       *
       * @see [Form Validation](guide/form-validation)
       *
       * \@usageNotes
       *
       * ### Adding a maximum length validator
       *
       * The following example shows how to add a maximum length validator to an input attached to an
       * ngModel binding.
       *
       * ```html
       * <input name="firstName" ngModel maxlength="25">
       * ```
       *
       * \@ngModule ReactiveFormsModule
       * \@ngModule FormsModule
       * \@publicApi
       */

      var MaxLengthValidator = /*#__PURE__*/function () {
        function MaxLengthValidator() {
          _classCallCheck(this, MaxLengthValidator);
        }

        _createClass(MaxLengthValidator, [{
          key: "ngOnChanges",

          /**
           * \@description
           * A lifecycle method called when the directive's inputs change. For internal use
           * only.
           *
           * @param {?} changes A object of key/value pairs for the set of changed inputs.
           * @return {?}
           */
          value: function ngOnChanges(changes) {
            if ('maxlength' in changes) {
              this._createValidator();

              if (this._onChange) this._onChange();
            }
          }
          /**
           * \@description
           * Method that validates whether the value exceeds
           * the maximum length requirement.
           * @param {?} control
           * @return {?}
           */

        }, {
          key: "validate",
          value: function validate(control) {
            return this.maxlength != null ? this._validator(control) : null;
          }
          /**
           * \@description
           * Registers a callback function to call when the validator inputs change.
           *
           * @param {?} fn The callback function
           * @return {?}
           */

        }, {
          key: "registerOnValidatorChange",
          value: function registerOnValidatorChange(fn) {
            this._onChange = fn;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_createValidator",
          value: function _createValidator() {
            this._validator = Validators.maxLength(typeof this.maxlength === 'number' ? this.maxlength : parseInt(this.maxlength, 10));
          }
        }]);

        return MaxLengthValidator;
      }();

      MaxLengthValidator.ɵfac = function MaxLengthValidator_Factory(t) {
        return new (t || MaxLengthValidator)();
      };

      MaxLengthValidator.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MaxLengthValidator,
        selectors: [["", "maxlength", "", "formControlName", ""], ["", "maxlength", "", "formControl", ""], ["", "maxlength", "", "ngModel", ""]],
        hostVars: 1,
        hostBindings: function MaxLengthValidator_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("maxlength", ctx.maxlength ? ctx.maxlength : null);
          }
        },
        inputs: {
          maxlength: "maxlength"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([MAX_LENGTH_VALIDATOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });
      MaxLengthValidator.propDecorators = {
        maxlength: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MaxLengthValidator, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',
            providers: [MAX_LENGTH_VALIDATOR],
            host: {
              '[attr.maxlength]': 'maxlength ? maxlength : null'
            }
          }]
        }], null, {
          maxlength: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();

      if (false) {}
      /**
       * \@description
       * Provider which adds `PatternValidator` to the `NG_VALIDATORS` multi-provider list.
       * @type {?}
       */


      var PATTERN_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return PatternValidator;
        }),
        multi: true
      };
      /**
       * \@description
       * A directive that adds regex pattern validation to controls marked with the
       * `pattern` attribute. The regex must match the entire control value.
       * The directive is provided with the `NG_VALIDATORS` multi-provider list.
       *
       * @see [Form Validation](guide/form-validation)
       *
       * \@usageNotes
       *
       * ### Adding a pattern validator
       *
       * The following example shows how to add a pattern validator to an input attached to an
       * ngModel binding.
       *
       * ```html
       * <input name="firstName" ngModel pattern="[a-zA-Z ]*">
       * ```
       *
       * \@ngModule ReactiveFormsModule
       * \@ngModule FormsModule
       * \@publicApi
       */

      var PatternValidator = /*#__PURE__*/function () {
        function PatternValidator() {
          _classCallCheck(this, PatternValidator);
        }

        _createClass(PatternValidator, [{
          key: "ngOnChanges",

          /**
           * \@description
           * A lifecycle method called when the directive's inputs change. For internal use
           * only.
           *
           * @param {?} changes A object of key/value pairs for the set of changed inputs.
           * @return {?}
           */
          value: function ngOnChanges(changes) {
            if ('pattern' in changes) {
              this._createValidator();

              if (this._onChange) this._onChange();
            }
          }
          /**
           * \@description
           * Method that validates whether the value matches the
           * the pattern requirement.
           * @param {?} control
           * @return {?}
           */

        }, {
          key: "validate",
          value: function validate(control) {
            return this._validator(control);
          }
          /**
           * \@description
           * Registers a callback function to call when the validator inputs change.
           *
           * @param {?} fn The callback function
           * @return {?}
           */

        }, {
          key: "registerOnValidatorChange",
          value: function registerOnValidatorChange(fn) {
            this._onChange = fn;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_createValidator",
          value: function _createValidator() {
            this._validator = Validators.pattern(this.pattern);
          }
        }]);

        return PatternValidator;
      }();

      PatternValidator.ɵfac = function PatternValidator_Factory(t) {
        return new (t || PatternValidator)();
      };

      PatternValidator.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: PatternValidator,
        selectors: [["", "pattern", "", "formControlName", ""], ["", "pattern", "", "formControl", ""], ["", "pattern", "", "ngModel", ""]],
        hostVars: 1,
        hostBindings: function PatternValidator_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("pattern", ctx.pattern ? ctx.pattern : null);
          }
        },
        inputs: {
          pattern: "pattern"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([PATTERN_VALIDATOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });
      PatternValidator.propDecorators = {
        pattern: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](PatternValidator, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',
            providers: [PATTERN_VALIDATOR],
            host: {
              '[attr.pattern]': 'pattern ? pattern : null'
            }
          }]
        }], null, {
          pattern: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/directives.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var SHARED_FORM_DIRECTIVES = [ɵNgNoValidate, NgSelectOption, ɵNgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator];
      /** @type {?} */

      var TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];
      /** @type {?} */

      var REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];
      /**
       * Internal module used for sharing directives between FormsModule and ReactiveFormsModule
       */

      var ɵInternalFormsSharedModule = function ɵInternalFormsSharedModule() {
        _classCallCheck(this, ɵInternalFormsSharedModule);
      };

      ɵInternalFormsSharedModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: ɵInternalFormsSharedModule
      });
      ɵInternalFormsSharedModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        factory: function ɵInternalFormsSharedModule_Factory(t) {
          return new (t || ɵInternalFormsSharedModule)();
        }
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](ɵInternalFormsSharedModule, {
          declarations: [ɵNgNoValidate, NgSelectOption, ɵNgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator],
          exports: [ɵNgNoValidate, NgSelectOption, ɵNgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ɵInternalFormsSharedModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            declarations: SHARED_FORM_DIRECTIVES,
            exports: SHARED_FORM_DIRECTIVES
          }]
        }], null, null);
      })();
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/form_builder.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @param {?} options
       * @return {?}
       */


      function isAbstractControlOptions(options) {
        return (
          /** @type {?} */
          options.asyncValidators !== undefined ||
          /** @type {?} */
          options.validators !== undefined ||
          /** @type {?} */
          options.updateOn !== undefined
        );
      }
      /**
       * \@description
       * Creates an `AbstractControl` from a user-specified configuration.
       *
       * The `FormBuilder` provides syntactic sugar that shortens creating instances of a `FormControl`,
       * `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to build complex
       * forms.
       *
       * @see [Reactive Forms Guide](/guide/reactive-forms)
       *
       * \@publicApi
       */


      var FormBuilder = /*#__PURE__*/function () {
        function FormBuilder() {
          _classCallCheck(this, FormBuilder);
        }

        _createClass(FormBuilder, [{
          key: "group",

          /**
           * \@description
           * Construct a new `FormGroup` instance.
           *
           * @param {?} controlsConfig A collection of child controls. The key for each child is the name
           * under which it is registered.
           *
           * @param {?=} options Configuration options object for the `FormGroup`. The object can
           * have two shapes:
           *
           * 1) `AbstractControlOptions` object (preferred), which consists of:
           * * `validators`: A synchronous validator function, or an array of validator functions
           * * `asyncValidators`: A single async validator or array of async validator functions
           * * `updateOn`: The event upon which the control should be updated (options: 'change' | 'blur' |
           * submit')
           *
           * 2) Legacy configuration object, which consists of:
           * * `validator`: A synchronous validator function, or an array of validator functions
           * * `asyncValidator`: A single async validator or array of async validator functions
           *
           * @return {?}
           */
          value: function group(controlsConfig) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            /** @type {?} */
            var controls = this._reduceControls(controlsConfig);
            /** @type {?} */


            var validators = null;
            /** @type {?} */

            var asyncValidators = null;
            /** @type {?} */

            var updateOn = undefined;

            if (options != null) {
              if (isAbstractControlOptions(options)) {
                // `options` are `AbstractControlOptions`
                validators = options.validators != null ? options.validators : null;
                asyncValidators = options.asyncValidators != null ? options.asyncValidators : null;
                updateOn = options.updateOn != null ? options.updateOn : undefined;
              } else {
                // `options` are legacy form group options
                validators = options['validator'] != null ? options['validator'] : null;
                asyncValidators = options['asyncValidator'] != null ? options['asyncValidator'] : null;
              }
            }

            return new FormGroup(controls, {
              asyncValidators: asyncValidators,
              updateOn: updateOn,
              validators: validators
            });
          }
          /**
           * \@description
           * Construct a new `FormControl` with the given state, validators and options.
           *
           * \@usageNotes
           *
           * ### Initialize a control as disabled
           *
           * The following example returns a control with an initial value in a disabled state.
           *
           * <code-example path="forms/ts/formBuilder/form_builder_example.ts" region="disabled-control">
           * </code-example>
           * @param {?} formState Initializes the control with an initial state value, or
           * with an object that contains both a value and a disabled status.
           *
           * @param {?=} validatorOrOpts A synchronous validator function, or an array of
           * such functions, or an `AbstractControlOptions` object that contains
           * validation functions and a validation trigger.
           *
           * @param {?=} asyncValidator A single async validator or array of async validator
           * functions.
           *
           * @return {?}
           */

        }, {
          key: "control",
          value: function control(formState, validatorOrOpts, asyncValidator) {
            return new FormControl(formState, validatorOrOpts, asyncValidator);
          }
          /**
           * Constructs a new `FormArray` from the given array of configurations,
           * validators and options.
           *
           * @param {?} controlsConfig An array of child controls or control configs. Each
           * child control is given an index when it is registered.
           *
           * @param {?=} validatorOrOpts A synchronous validator function, or an array of
           * such functions, or an `AbstractControlOptions` object that contains
           * validation functions and a validation trigger.
           *
           * @param {?=} asyncValidator A single async validator or array of async validator
           * functions.
           * @return {?}
           */

        }, {
          key: "array",
          value: function array(controlsConfig, validatorOrOpts, asyncValidator) {
            var _this82 = this;

            /** @type {?} */
            var controls = controlsConfig.map(
            /**
            * @param {?} c
            * @return {?}
            */
            function (c) {
              return _this82._createControl(c);
            });
            return new FormArray(controls, validatorOrOpts, asyncValidator);
          }
          /**
           * \@internal
           * @param {?} controlsConfig
           * @return {?}
           */

        }, {
          key: "_reduceControls",
          value: function _reduceControls(controlsConfig) {
            var _this83 = this;

            /** @type {?} */
            var controls = {};
            Object.keys(controlsConfig).forEach(
            /**
            * @param {?} controlName
            * @return {?}
            */
            function (controlName) {
              controls[controlName] = _this83._createControl(controlsConfig[controlName]);
            });
            return controls;
          }
          /**
           * \@internal
           * @param {?} controlConfig
           * @return {?}
           */

        }, {
          key: "_createControl",
          value: function _createControl(controlConfig) {
            if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup || controlConfig instanceof FormArray) {
              return controlConfig;
            } else if (Array.isArray(controlConfig)) {
              /** @type {?} */
              var value = controlConfig[0];
              /** @type {?} */

              var validator = controlConfig.length > 1 ? controlConfig[1] : null;
              /** @type {?} */

              var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
              return this.control(value, validator, asyncValidator);
            } else {
              return this.control(controlConfig);
            }
          }
        }]);

        return FormBuilder;
      }();

      FormBuilder.ɵfac = function FormBuilder_Factory(t) {
        return new (t || FormBuilder)();
      };

      FormBuilder.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: FormBuilder,
        factory: FormBuilder.ɵfac
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FormBuilder, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
        }], null, null);
      })();
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/version.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@publicApi
       * @type {?}
       */


      var VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Version"]('9.0.7');
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/form_providers.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Exports the required providers and directives for template-driven forms,
       * making them available for import by NgModules that import this module.
       *
       * @see [Forms Guide](/guide/forms)
       *
       * \@publicApi
       */

      var FormsModule = function FormsModule() {
        _classCallCheck(this, FormsModule);
      };

      FormsModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: FormsModule
      });
      FormsModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        factory: function FormsModule_Factory(t) {
          return new (t || FormsModule)();
        },
        providers: [RadioControlRegistry],
        imports: [ɵInternalFormsSharedModule]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](FormsModule, {
          declarations: [NgModel, NgModelGroup, NgForm],
          exports: [ɵInternalFormsSharedModule, NgModel, NgModelGroup, NgForm]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FormsModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            declarations: TEMPLATE_DRIVEN_DIRECTIVES,
            providers: [RadioControlRegistry],
            exports: [ɵInternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]
          }]
        }], null, null);
      })();
      /**
       * Exports the required infrastructure and directives for reactive forms,
       * making them available for import by NgModules that import this module.
       * @see [Forms](guide/reactive-forms)
       *
       * @see [Reactive Forms Guide](/guide/reactive-forms)
       *
       * \@publicApi
       */


      var ReactiveFormsModule = /*#__PURE__*/function () {
        function ReactiveFormsModule() {
          _classCallCheck(this, ReactiveFormsModule);
        }

        _createClass(ReactiveFormsModule, null, [{
          key: "withConfig",

          /**
           * \@description
           * Provides options for configuring the reactive forms module.
           *
           * @param {?} opts An object of configuration options
           * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`
           * binding is used with reactive form directives.
           * @return {?}
           */
          value: function withConfig(opts) {
            return {
              ngModule: ReactiveFormsModule,
              providers: [{
                provide: NG_MODEL_WITH_FORM_CONTROL_WARNING,
                useValue: opts.warnOnNgModelWithFormControl
              }]
            };
          }
        }]);

        return ReactiveFormsModule;
      }();

      ReactiveFormsModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: ReactiveFormsModule
      });
      ReactiveFormsModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        factory: function ReactiveFormsModule_Factory(t) {
          return new (t || ReactiveFormsModule)();
        },
        providers: [FormBuilder, RadioControlRegistry],
        imports: [ɵInternalFormsSharedModule]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](ReactiveFormsModule, {
          declarations: [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName],
          exports: [ɵInternalFormsSharedModule, FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ReactiveFormsModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            declarations: [REACTIVE_DRIVEN_DIRECTIVES],
            providers: [FormBuilder, RadioControlRegistry],
            exports: [ɵInternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]
          }]
        }], null, null);
      })();
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/src/forms.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/public_api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: packages/forms/index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=forms.js.map

      /***/

    },

    /***/
    "7zEN":
    /*!************************************************************!*\
      !*** ./src/app/shared/interceptors/headers.interceptor.ts ***!
      \************************************************************/

    /*! exports provided: HeadersInterceptor */

    /***/
    function zEN(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HeadersInterceptor", function () {
        return HeadersInterceptor;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var aws_amplify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! aws-amplify */
      "AL3R");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");

      var HeadersInterceptor = /*#__PURE__*/function () {
        function HeadersInterceptor() {
          _classCallCheck(this, HeadersInterceptor);
        }

        _createClass(HeadersInterceptor, [{
          key: "getToken",
          value: function getToken() {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["from"])(aws_amplify__WEBPACK_IMPORTED_MODULE_2__["Auth"].currentSession()).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (session) {
              return session.getAccessToken().getJwtToken();
            }));
          }
        }, {
          key: "intercept",
          value: function intercept(request, next) {
            var headersConfig = {
              'Content-Type': 'application/json',
              // 'Access-Control-Allow-Origin': '*',
              Authorization: ''
            }; // Add a HeaderRequest Unique Request Id

            var requestBody = request.body;

            if (request.method === 'PUT' || request.method === 'POST') {
              requestBody.requestHeader = {
                requestId: this.uuidv4()
              };
            }

            return this.getToken().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["mergeMap"])(function (token) {
              headersConfig.Authorization = token;
              request = request.clone({
                setHeaders: headersConfig,
                body: JSON.stringify(requestBody)
              });
              return next.handle(request);
            }));
          }
          /**
           *  This function will generate Unique RequestId Number.
           */

        }, {
          key: "uuidv4",
          value: function uuidv4() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
              // tslint:disable-next-line:no-bitwise
              var r = Math.random() * 16 | 0; // tslint:disable-next-line:no-bitwise

              var v = c === 'x' ? r : r & 0x3 | 0x8;
              return v.toString(16);
            });
          }
        }]);

        return HeadersInterceptor;
      }();

      HeadersInterceptor.ɵfac = function HeadersInterceptor_Factory(t) {
        return new (t || HeadersInterceptor)();
      };

      HeadersInterceptor.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: HeadersInterceptor,
        factory: HeadersInterceptor.ɵfac
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](HeadersInterceptor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
        }], function () {
          return [];
        }, null);
      })();
      /***/

    },

    /***/
    "8pUG":
    /*!*********************************************!*\
      !*** ./src/app/shared/constant/constant.ts ***!
      \*********************************************/

    /*! exports provided: Constant */

    /***/
    function pUG(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Constant", function () {
        return Constant;
      });

      var Constant = function Constant() {
        _classCallCheck(this, Constant);
      };

      Constant.TOGGLE_TEXT_LESS = 'Less';
      Constant.TOGGLE_TEXT_MORE = 'More';
      Constant.CHART_ICON_WIDTH = '22';
      Constant.CHART_ICON_HEIGHT = '22';
      Constant.CHART_CUTOFF_PERCENTAGE = 80;
      Constant.CHART_ICON_MARGIN = 10;
      Constant.MENU_TOGGLE_CLASS = 'menu-toggle';
      Constant.MENU_TOGGLE_ICON = 'bt-close'; //Default popup text

      Constant.DEFAULT_HEADER_TEXT = 'Nearly there!'; //Email popup text

      Constant.EMAIL_CONFIRM_TEXT = 'An email has been sent to you, click the link in the email to verify.'; //Universal  button text

      Constant.UNIVERSAL_FIRST_BUTTON_TEXT = 'OK';
      Constant.UNIVERSAL_SECOND_BUTTON_TEXT = 'CLOSE';
      Constant.EMAIL_HEADER_TEXT = '';
      Constant.EMAIL_FIRST_BUTTON_TEXT = 'SEND AGAIN';
      Constant.EMAIL_SECOND_BUTTON_TEXT = 'OK'; //Insurance popup text

      Constant.INSURANCE_CONFIRM_TEXT = 'To access insurance produces, provide few more details to unlock'; //Aml-onboard popup text 

      Constant.ONBOARD_CONFIRM_TEXT = 'Allow "mmob" to share data with Brolly?'; //utilities constants

      Constant.USER_DETAILS_TO_ACCESS_UTILITIES = 'To access utilities provide few more details to unlock';
      Constant.SHARE_DETIALS_WITH_OCTOPUS_ENERGY = 'Allow mmob to share data with octopus energy'; //lending popup text 

      Constant.LENDING_CONFIRM_TEXT = 'To access landing produces, provide few more details to unlock';
      Constant.ONBOARD_HEADER_TEXT = '';
      Constant.ONBOARD_FIRST_BUTTON_TEXT = 'NO THANKS';
      Constant.ONBOARD_SECOND_BUTTON_TEXT = 'ALLOW';
      Constant.INSURANCE_HEADER_TEXT = 'Nearly there!';
      Constant.INSURANCE_FIRST_BUTTON_TEXT = 'NO THANKS';
      Constant.INSURANCE_SECOND_BUTTON_TEXT = 'ALLOW';
      Constant.TUTORIAL_CONFIRMATION_TEXT = 'We would like to show you notifications for spending and product renewal reminders.';
      Constant.MERCHANTS_CONFIRM_TEXT = 'Allow mmob to pull your jd sports basket into our app';
      Constant.TERMS_CONDITION_VALIDATION_TEXT = 'Both checkbox are required.';
      Constant.BANK_NAME = 'bankName';
      Constant.CONTACT_NUMBER = 'mobileNumber';
      /***/
    },

    /***/
    "J622":
    /*!***********************************************************************!*\
      !*** ./src/app/shared/services/get-address-io/get-address.service.ts ***!
      \***********************************************************************/

    /*! exports provided: GetAddressService */

    /***/
    function J622(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "GetAddressService", function () {
        return GetAddressService;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common/http */
      "tk/3");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");

      var GetAddressService = /*#__PURE__*/function () {
        function GetAddressService(handler) {
          _classCallCheck(this, GetAddressService);

          this.apiBaseUrl = 'https://api.getAddress.io/'; // assign API Key

          this.apiKey = '8iNCZkzgDEyT4rRBDhR6jg29209';
          this.requestFormat = '';
          this.httpClient = new _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"](handler);
          this.requestFormat = '?api-key=' + this.apiKey + '&expand=true';
        }

        _createClass(GetAddressService, [{
          key: "findByPostCode",
          value: function findByPostCode(postCode) {
            // const data = {
            //   postcode: 'E14 5AB',
            //   latitude: 51.5046194,
            //   longitude: -0.0187023,
            //   addresses: [
            //     {
            //       formatted_address: [
            //         'Banfico Ltd',
            //         '1 Canada Square',
            //         '',
            //         'London',
            //         ''
            //       ],
            //       thoroughfare: 'Canada Square',
            //       isSelected: false,
            //       building_name: '',
            //       sub_building_name: 'Banfico Ltd',
            //       sub_building_number: '',
            //       building_number: '1',
            //       line_1: 'Banfico Ltd',
            //       line_2: '1 Canada Square',
            //       line_3: '',
            //       line_4: '',
            //       locality: '',
            //       town_or_city: 'London',
            //       county: '',
            //       district: 'Tower Hamlets',
            //       country: 'England'
            //     },
            //     {
            //       formatted_address: [
            //         'Canada Square (Pavilion) Ltd',
            //         '1 Canada Square',
            //         '',
            //         'London',
            //         ''
            //       ],
            //       thoroughfare: 'Canada Square',
            //       isSelected: false,
            //       building_name: '',
            //       sub_building_name: 'Canada Square (Pavilion) Ltd',
            //       sub_building_number: '',
            //       building_number: '1',
            //       line_1: 'Canada Square (Pavilion) Ltd',
            //       line_2: '1 Canada Square',
            //       line_3: '',
            //       line_4: '',
            //       locality: '',
            //       town_or_city: 'London',
            //       county: '',
            //       district: 'Tower Hamlets',
            //       country: 'England'
            //     },
            //     {
            //       formatted_address: [
            //         'Canary Wharf (North Quay) Ltd',
            //         '1 Canada Square',
            //         '',
            //         'London',
            //         ''
            //       ],
            //       thoroughfare: 'Canada Square',
            //       isSelected: false,
            //
            //       building_name: '',
            //       sub_building_name: 'Canary Wharf (North Quay) Ltd',
            //       sub_building_number: '',
            //       building_number: '1',
            //       line_1: 'Canary Wharf (North Quay) Ltd',
            //       line_2: '1 Canada Square',
            //       line_3: '',
            //       line_4: '',
            //       locality: '',
            //       town_or_city: 'London',
            //       county: '',
            //       district: 'Tower Hamlets',
            //       country: 'England'
            //     },
            //     {
            //       formatted_address: [
            //         'Canary Wharf Contractors (Crossrail) Ltd',
            //         '1 Canada Square',
            //         '',
            //         'London',
            //         ''
            //       ],
            //       thoroughfare: 'Canada Square',
            //       isSelected: false,
            //
            //       building_name: '',
            //       sub_building_name: 'Canary Wharf Contractors (Crossrail) Ltd',
            //       sub_building_number: '',
            //       building_number: '1',
            //       line_1: 'Canary Wharf Contractors (Crossrail) Ltd',
            //       line_2: '1 Canada Square',
            //       line_3: '',
            //       line_4: '',
            //       locality: '',
            //       town_or_city: 'London',
            //       county: '',
            //       district: 'Tower Hamlets',
            //       country: 'England'
            //     },
            //     {
            //       formatted_address: [
            //         'Canary Wharf Contractors (Ds1) Ltd',
            //         '1 Canada Square',
            //         '',
            //         'London',
            //         ''
            //       ],
            //       thoroughfare: 'Canada Square',
            //       isSelected: false,
            //
            //       building_name: '',
            //       sub_building_name: 'Canary Wharf Contractors (Ds1) Ltd',
            //       sub_building_number: '',
            //       building_number: '1',
            //       line_1: 'Canary Wharf Contractors (Ds1) Ltd',
            //       line_2: '1 Canada Square',
            //       line_3: '',
            //       line_4: '',
            //       locality: '',
            //       town_or_city: 'London',
            //       county: '',
            //       district: 'Tower Hamlets',
            //       country: 'England'
            //     },
            //     {
            //       formatted_address: [
            //         'Canary Wharf Contractors (Ds6) Ltd',
            //         '1 Canada Square',
            //         '',
            //         'London',
            //         ''
            //       ],
            //       thoroughfare: 'Canada Square',
            //       isSelected: false,
            //
            //       building_name: '',
            //       sub_building_name: 'Canary Wharf Contractors (Ds6) Ltd',
            //       sub_building_number: '',
            //       building_number: '1',
            //       line_1: 'Canary Wharf Contractors (Ds6) Ltd',
            //       line_2: '1 Canada Square',
            //       line_3: '',
            //       line_4: '',
            //       locality: '',
            //       town_or_city: 'London',
            //       county: '',
            //       district: 'Tower Hamlets',
            //       country: 'England'
            //     },
            //     {
            //       formatted_address: [
            //         'Canary Wharf Contractors (Ds8) Ltd',
            //         '1 Canada Square',
            //         '',
            //         'London',
            //         ''
            //       ],
            //       thoroughfare: 'Canada Square',
            //       isSelected: false,
            //
            //       building_name: '',
            //       sub_building_name: 'Canary Wharf Contractors (Ds8) Ltd',
            //       sub_building_number: '',
            //       building_number: '1',
            //       line_1: 'Canary Wharf Contractors (Ds8) Ltd',
            //       line_2: '1 Canada Square',
            //       line_3: '',
            //       line_4: '',
            //       locality: '',
            //       town_or_city: 'London',
            //       county: '',
            //       district: 'Tower Hamlets',
            //       country: 'England'
            //     },
            //     {
            //       formatted_address: [
            //         'Canary Wharf Finance Ii Plc',
            //         '1 Canada Square',
            //         '',
            //         'London',
            //         ''
            //       ],
            //       thoroughfare: 'Canada Square',
            //       isSelected: false,
            //
            //       building_name: '',
            //       sub_building_name: 'Canary Wharf Finance Ii Plc',
            //       sub_building_number: '',
            //       building_number: '1',
            //       line_1: 'Canary Wharf Finance Ii Plc',
            //       line_2: '1 Canada Square',
            //       line_3: '',
            //       line_4: '',
            //       locality: '',
            //       town_or_city: 'London',
            //       county: '',
            //       district: 'Tower Hamlets',
            //       country: 'England'
            //     },
            //     {
            //       formatted_address: [
            //         'Canary Wharf Investments (Rsnq) Ltd',
            //         '1 Canada Square',
            //         '',
            //         'London',
            //         ''
            //       ],
            //       thoroughfare: 'Canada Square',
            //       isSelected: false,
            //
            //       building_name: '',
            //       sub_building_name: 'Canary Wharf Investments (Rsnq) Ltd',
            //       sub_building_number: '',
            //       building_number: '1',
            //       line_1: 'Canary Wharf Investments (Rsnq) Ltd',
            //       line_2: '1 Canada Square',
            //       line_3: '',
            //       line_4: '',
            //       locality: '',
            //       town_or_city: 'London',
            //       county: '',
            //       district: 'Tower Hamlets',
            //       country: 'England'
            //     },
            //     {
            //       formatted_address: [
            //         'Cw Lending Ii Ltd',
            //         '1 Canada Square',
            //         '',
            //         'London',
            //         ''
            //       ],
            //       thoroughfare: 'Canada Square',
            //       isSelected: false,
            //
            //       building_name: '',
            //       sub_building_name: 'Cw Lending Ii Ltd',
            //       sub_building_number: '',
            //       building_number: '1',
            //       line_1: 'Cw Lending Ii Ltd',
            //       line_2: '1 Canada Square',
            //       line_3: '',
            //       line_4: '',
            //       locality: '',
            //       town_or_city: 'London',
            //       county: '',
            //       district: 'Tower Hamlets',
            //       country: 'England'
            //     },
            //     {
            //       formatted_address: [
            //         'Darius Alus & Vodka Ltd',
            //         '1 Canada Square',
            //         '',
            //         'London',
            //         ''
            //       ],
            //       thoroughfare: 'Canada Square',
            //       isSelected: false,
            //
            //       building_name: '',
            //       sub_building_name: 'Darius Alus & Vodka Ltd',
            //       sub_building_number: '',
            //       building_number: '1',
            //       line_1: 'Darius Alus & Vodka Ltd',
            //       line_2: '1 Canada Square',
            //       line_3: '',
            //       line_4: '',
            //       locality: '',
            //       town_or_city: 'London',
            //       county: '',
            //       district: 'Tower Hamlets',
            //       country: 'England'
            //     },
            //     {
            //       formatted_address: [
            //         'Derivitec Ltd',
            //         '1 Canada Square',
            //         '',
            //         'London',
            //         ''
            //       ],
            //       thoroughfare: 'Canada Square',
            //       isSelected: false,
            //
            //       building_name: '',
            //       sub_building_name: 'Derivitec Ltd',
            //       sub_building_number: '',
            //       building_number: '1',
            //       line_1: 'Derivitec Ltd',
            //       line_2: '1 Canada Square',
            //       line_3: '',
            //       line_4: '',
            //       locality: '',
            //       town_or_city: 'London',
            //       county: '',
            //       district: 'Tower Hamlets',
            //       country: 'England'
            //     }
            //   ]
            // };
            // return of(data);
            return this.get('find/' + postCode + this.requestFormat);
          }
        }, {
          key: "findByPostCodeAndHouseAdddress",
          value: function findByPostCodeAndHouseAdddress(postCode, houseCode) {
            return this.get('find/' + postCode + '/' + houseCode + this.requestFormat);
          }
        }, {
          key: "get",
          value: function get(path) {
            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpParams"]();
            return this.httpClient.get("".concat(this.apiBaseUrl).concat(path), {
              params: params
            }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["catchError"])(this.handleError));
          }
        }, {
          key: "handleError",
          value: function handleError(error) {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["throwError"])(error);
          }
        }]);

        return GetAddressService;
      }();

      GetAddressService.ɵfac = function GetAddressService_Factory(t) {
        return new (t || GetAddressService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpBackend"]));
      };

      GetAddressService.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: GetAddressService,
        factory: GetAddressService.ɵfac,
        providedIn: 'root'
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](GetAddressService, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpBackend"]
          }];
        }, null);
      })();
      /***/

    },

    /***/
    "Kjpl":
    /*!*********************************************************************!*\
      !*** ./src/app/shared/services/base-services/api-client.service.ts ***!
      \*********************************************************************/

    /*! exports provided: ApiService */

    /***/
    function Kjpl(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ApiService", function () {
        return ApiService;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common/http */
      "tk/3");
      /* harmony import */


      var src_environments_environment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! src/environments/environment */
      "AytR");

      var ApiService = /*#__PURE__*/function () {
        function ApiService(http) {
          _classCallCheck(this, ApiService);

          this.http = http;
          this.apiBaseUrl = src_environments_environment__WEBPACK_IMPORTED_MODULE_2__["environment"].API_BASE_URL;
        }
        /**
         * Use to hit GET http request with Api path and header request
         * @param path
         */


        _createClass(ApiService, [{
          key: "get",
          value: function get(path) {
            return this.http.get(this.apiBaseUrl + path, {
              headers: this.setHeaders()
            });
          }
          /**
           * Use to hit POST http request with Api path and header request
           * @param path
           */

        }, {
          key: "post",
          value: function post(path, body) {
            if (path.indexOf('login') > 0 || path.indexOf('forgotPassword') > 0) {
              return this.http.post(this.apiBaseUrl + path, body);
            }

            return this.http.post(this.apiBaseUrl + path, body, {
              headers: this.setHeaders()
            });
          }
          /**
           * Use to hit PUT http request with Api path and header request
           * @param path
           */

        }, {
          key: "put",
          value: function put(path, body) {
            return this.http.put(this.apiBaseUrl + path, body, {
              headers: this.setHeaders()
            });
          }
          /**
           * Used to setHeader in Request
           */

        }, {
          key: "setHeaders",
          value: function setHeaders() {
            var headersConfig = {};
            return new _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpHeaders"](headersConfig);
          }
        }]);

        return ApiService;
      }();

      ApiService.ɵfac = function ApiService_Factory(t) {
        return new (t || ApiService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"]));
      };

      ApiService.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: ApiService,
        factory: ApiService.ɵfac
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ApiService, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
        }], function () {
          return [{
            type: _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"]
          }];
        }, null);
      })();
      /***/

    },

    /***/
    "NPsI":
    /*!*****************************************************!*\
      !*** ./src/app/shared/privacy/privacy.component.ts ***!
      \*****************************************************/

    /*! exports provided: PrivacyComponent */

    /***/
    function NPsI(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PrivacyComponent", function () {
        return PrivacyComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @ng-bootstrap/ng-bootstrap */
      "1kSV");

      var PrivacyComponent = /*#__PURE__*/function () {
        function PrivacyComponent(activeModal) {
          _classCallCheck(this, PrivacyComponent);

          this.activeModal = activeModal;
        }

        _createClass(PrivacyComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {}
          /**
            * Method used to close the modal
            */

        }, {
          key: "noPressed",
          value: function noPressed() {
            this.activeModal.close({
              isYesPressed: false
            });
          }
        }, {
          key: "yesPressed",
          value: function yesPressed() {
            this.activeModal.close({
              isYesPressed: true
            });
          }
        }]);

        return PrivacyComponent;
      }();

      PrivacyComponent.ɵfac = function PrivacyComponent_Factory(t) {
        return new (t || PrivacyComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_1__["NgbActiveModal"]));
      };

      PrivacyComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: PrivacyComponent,
        selectors: [["app-privacy"]],
        decls: 297,
        vars: 0,
        consts: [[1, "modal-dialog"], [1, "modal-header"], [1, "col-md-12"], [1, "logo-img"], ["alt", "logo-img", "src", "assets/images/logo.png"], [1, "modal-content"], [1, "modal-body", "popups"], ["tabindex", "0", 1, "content-data"], [1, "row"], [1, "modal-footer"], ["type", "button", 1, "btn", "btn-secondary", 3, "click"]],
        template: function PrivacyComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](4, "img", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "div", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "div", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "div", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](8, "div", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "h3");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](11, "General Provisions");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](12, "ol");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](13, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](14, "b");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](15, "Our agreement");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](16, "ol");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](17, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](18, "These Terms of Use (together with our \u226AData & Privacy Notice\u226B) set out the terms on which you may make use of the payment features of the Marketplace and sets out in detail your rights and responsibilities to us and our rights and responsibilities to you during your use of the Service. These Terms of Use (as amended from time to time) will apply to Service until such time as either you or we terminate this agreement.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](19, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](20, "Please read these Terms of Use carefully before you start to use the Service. You may request a copy of these Terms of Use at any time by emailing customerservices@mmob.com.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](21, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](22, "b");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](23, "About MMOB");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](24, "ol");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](25, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](26, "MMOB Ltd (\u201CMMOB\u201D, \u201Cwe\u201D or \u201Cus\u201D) is a company registered in England and Wales with company number 12570147 whose registered office is at 82 High Street, Golborne, Warrington WA3 3DA.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](27, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](28, "MMOB Ltd (FRN: 930282) is authorised and regulated by the Financial Conduct Authority for the provision of payment services under the Payment Services Regulations 2017.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](29, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](30, "The FCA\u2019s address is 12 Endeavour Square, London E20 1JN and they can be contacted on 0800 111 6768 (freephone) or 0300 500 8082 from the UK.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](31, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](32, "If you wish to contact us for any reason, you can email us at customerservices@mmob.com or write to us at Level 39, 1 Canada Square, London E15 5AB.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](33, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](34, "If we need to contact you, we will email you. All information or notifications that we provide to you will be in English.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](35, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](36, "b");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](37, "What we do");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](38, "ol");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](39, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](40, "You are seeing these terms because we, or your Gateway Provider acting on our behalf as our agent, have agreed to provide you with one or both of the following services in connection with the Marketplace.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](41, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](42, "Payment Initiation Services: We provide regulated payment initiation services (\u201CPIS\u201D). With your consent, and at your instruction, we instruct your payment account provider (e.g. your bank or credit card issuer) (\u201CPayment Account Provider\u201D) to make a payment or payments from your selected payment account (your \u201CPayment Account\u201D) to your chosen recipient. When you want to make a payment using PIS, we will redirect you to your Payment Account Provider so you can provide them with your login and security credentials (\u201CCredentials\u201D) and undergo authentication with them. We will never ask you to share your Credentials with us. The Payment Account Provider will only act on the instruction to make the payment after you give them your Credentials and successfully authenticate with them.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](43, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](44, "When you choose to initiate a payment using our PIS you will be directed to a page to select your Payment Account Provider and the Payment Account from which you wish to make payment. By selecting your Payment Account Provider and Payment Account, you consent to use our PIS and instruct MMOB to initiate a payment of your chosen amount to your chosen recipient, details of which will be clearly displayed on the account selection page. After you select your Payment Account Provider and Payment Account, we will redirect you to your Payment Account Provider (either on a web browser, or your mobile banking application) who will ask you for your Credentials, which may include additional procedures (e.g. a password or biometric identifier such as a fingerprint) to securely authenticate yourself. Neither MMOB nor your Gateway Provider will be able to see or access your Credentials at any time.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](45, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](46, "Once your Payment Account Provider has confirmed authentication, we will instruct your Payment Account Provider to make a payment in accordance with your instructions (a \u201CPayment Order\u201D). Once you have authorised the payment with your Payment Account Provider, funds will usually leave your Payment Account immediately and, at the latest, within two hours. We or the Gateway Partner will confirm the successful initiation of a Payment Order, but your Payment Account Provider (and not MMOB) is responsible for executing it.Information that you are entitled to receive in relation to our PIS will be provided to you through your Marketplace account or, where we think it necessary, by email.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](47, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](48, "Account Information Services: We provide regulated account information services (\u201CAIS\u201D), including through our agents. We enable you to: ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](49, "ol");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](50, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](51, "access and view information relating to your Payment Accounts (\u201CAccount Information\u201D), including through Marketplace, in a consolidated form; and");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](52, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](53, "where relevant, to share that Account Information with third parties who will use your Account Information to provide a service that you have agreed to use (such as a credit reference service, or an affordability check). In these circumstances, we are responsible for the provision of AIS.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](54, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](55, "To use our AIS, you will be directed to a page where you will be able to select the Payment Account Provider and Payment Account you want to connect to, and the Account Information you want to access and, if relevant, share with Marketplace Participants or other third parties. When you confirm your consent, you instruct and give your consent to MMOB to: ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](56, "ol");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](57, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](58, "access the Payment Account(s) and Account Information that you have selected, including, where relevant, when you do not actively request such Account Information (i.e. when you are not actively viewing the data or requesting a refresh of the data) and storing the Account Information temporarily before sharing it with any third parties you have selected; and/or");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](59, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](60, "provide that Account Information to you and share it with any third parties you have selected and instructed us to share data with.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](61, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](62, "After you select your Payment Account Provider and Payment Account, we will redirect you to your Payment Account Provider (either on a web browser, or your banking mobile application) who will ask you for your Credentials, which may include additional procedures (e.g. a password and biometric identifier such as a fingerprint) to securely authenticate yourself. Neither MMOB nor your Gateway Provider will be able to see or access your Credentials at any time. Once your Payment Account Provider has confirmed authentication, we will access your Account Information, provide it to you, and share it in accordance with your instructions to us.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](63, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](64, "The Account Information retrieved and shared may include your personal account details (such as name, address, email, phone number), transaction history, transaction amounts and descriptions, account name and number, currency, account balance, any overdraft balance, payment due dates and other information about your transactions. This will depend on the services being provided by the partner through which you access our AIS service. We will provide you with the Account Information through the Marketplace ourselves (where we provide AIS directly) or through our agents\u2019 apps or websites (where we provide AIS through a third party that acts as our agent).");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](65, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](66, "At your instruction, and with your explicit consent, we will also provide that Account Information to Marketplace Participants or other third parties in accordance with the provisions above.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](67, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](68, "b");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](69, "Giving and withdrawing consent");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](70, "ol");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](71, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](72, "Our PIS and our AIS are provided to you on the basis of your explicit consent given to us as part of the process set out in paragraphs 3.2 or 3.6 respectively.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](73, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](74, "Once you have authorised a Payment Order, you may not revoke your consent.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](75, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](76, "You may withdraw your consent for the access to any of your Account Information at any time. You can do this (a) by telling us; (b) by telling our agent who is providing our services to you; or (c) by telling your Account Provider. You will need to renew MMOB's access to your Payment Account(s) by authenticating with the relevant Payment Account Provider at least every 90 days, and every time you wish to access and/or share Account Information other than your account balance or transaction data relating to transactions occurring in the last 90 days.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](77, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](78, "You may withdraw your consent for us to share Account Information with your chosen third parties at any time. You can do this (a) by telling us; (b) by telling out agent who is providing our services to you; or (c) telling the Partner or third party. If you withdraw consent for us to share data with a third party, that third party may no longer be able to provide its services to you.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](79, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](80, "b");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](81, "Incorrect or Unauthorised Payments");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](82, "ol");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](83, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](84, "If you suspect that an unauthorised or incorrect Initiated Payment has been made using our PIS, you must notify us of this as soon as possible by emailing customerservices@mmob.com.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](85, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](86, "You may be entitled to a refund of the unauthorised or incorrect Initiated Payment from your Account Provider but you must notify them of the unauthorised or incorrect payment as soon as possible and no later than 13 months after the date of the relevant Initiated Payment.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](87, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](88, "You should be aware that Payment Account Provider may contact you directly (and not through the Marketplace or the Gateway Partner's application) if there is an issue with the Initiated Payment submitted through the PIS (for example, there are insufficient funds or an issue with your authorisation). You will need to resolve any such issues directly with your Payment Account Provider.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](89, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](90, "b");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](91, "Security of Payment Details");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](92, "ol");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](93, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](94, "You must take all reasonable steps to keep your Credentials safe and you must not disclose them or allow them to be used by anyone else. You must not leave the device you are using unattended while you are using the Service Provider's application or service and you must make sure that any security credentials stored or displayed on your device are kept secure.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](95, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](96, "If your device is lost or stolen, or you suspect that another person knows your security credentials, you must notify us immediately at customerservices@mmob.com.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](97, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](98, "If we need to contact you in respect of suspected fraud or any other security threat, we will use the method which seems most secure.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](99, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](100, "b");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](101, "Our services, the Marketplace and other parties");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](102, "ol");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](103, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](104, "Your Gateway Partner is responsible for the Marketplace. Our Services are integrated within the Marketplace, but we are not responsible for any problems that you may have with the functionality or suitability of the Marketplace other than in relation to our Services.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](105, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](106, "We are not responsible for third party content on the Marketplace. In particular you should be aware that: ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](107, "ol");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](108, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](109, "Marketplace Participants are independent from us and are responsible for their own products and services and for complying with the laws governing the sale or supply of their products and services;");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](110, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](111, "purchasing or subscribing for products and services through the Marketplace is done at your own risk and these Terms of Use limit our liability for any losses you suffer in relation to those products or Services;");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](112, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](113, "the presence of a Marketplace Participant does not mean that we endorse or recommend them and we cannot guarantee that the products or services that they offer are suitable for you or that they will be delivered to you as promised by the Marketplace Participant;");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](114, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](115, "we are not providing advice in relation to any of the services that our Marketplace Participants may make available through the Marketplace.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](116, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](117, "Restrictions on the use of the Marketplace. You agree not to use the Marketplace for business or commercial purposes. You also agree not to do anything that affects the integrity or security of the Marketplace or causes (or may cause) harm, damage or unreasonable inconvenience to other users of the Marketplace or us.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](118, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](119, "Your Payment Account Provider is responsible for your Payment Account. We are not responsible for any problems that you might have with the functionality or suitability of your Payment Account Provider (e.g. your bank or credit card issuer). We are responsible for retrieving and transmitting your Account Information safely and securely but not for the content of your Account Information itself, which is the responsibility of your Payment Account Provider. If you have any questions in relation to these, you should speak to the relevant partner that provides the app or website that you are using, or to your Payment Account Provider.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](120, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](121, "Other terms and conditions may apply. Your use of the Marketplace, a Marketplace Participant\u2019s services and your Payment Account will also be subject to other terms and conditions - these Terms of Use will not affect any of those terms. In particular, the Gateway Partner, Marketplace Participants and your Payment Account Providers will have separate rules on data protection that will apply to your use of their services.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](122, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](123, "Use by third parties of Account Information. Once your Account Information is transmitted via our software to a third party such as the Gateway Provider or (with your consent) any Marketplace Participant, that third party becomes responsible for it.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](124, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](125, "b");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](126, "Fees");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](127, "ol");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](128, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](129, "We do not charge you to use our Services. However, the Gateway Partner may charge you for use of their app or services. In turn, the Gateway Partner may pay us fees for the services we provide to them.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](130, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](131, "b");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](132, "How to complain if things go wrong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](133, "ol");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](134, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](135, "We endeavour to provide a first-class service to our users but if we fail to meet your expectations you should contact us. We aim to initially respond to any complaints with 15 business days of receipt and provide you with a final response within 35 business days. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](136, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](137, "If you are not happy with the outcome of your complaint you may refer it to the UK Financial Ombudsman Service, whose details are available at www.financial-ombudsman.org.uk or by telephoning 0800 023 4567. You may request a copy of our complaints-handling procedure at any time. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](138, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](139, "In addition, please note that disputes may be submitted for online resolution to the European Commission Online Dispute Resolution platform.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](140, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](141, "b");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](142, "Availability");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](143, "ol");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](144, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](145, "We do not guarantee the availability of the Services and we reserve the right to perform maintenance, upgrades or emergency repairs, which may affect the availability of the Services.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](146, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](147, "b");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](148, "Our liability");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](149, "ol");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](150, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](151, "We are responsible to you for foreseeable loss and damage caused by us. If we fail to comply with these Terms of Use, we are responsible for the loss or damage you suffer if it is a foreseeable result of our breach or a failure to use reasonable care and skill. Loss or damage is foreseeable if either it is obvious that it will happen or if, at the time you accepted these terms, both we and you knew it might happen. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](152, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](153, "We do not accept responsibility for consequential losses. If we are responsible for a delay or failure of any Payment Order, we will not be liable for loss of opportunity, loss of investment or loss of profit relating to any transaction with a Marketplace Participant that you made or tried to make. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](154, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](155, "When we are liable for our agents\u2019 actions. We are responsible for foreseeable loss or damage arising from our agents\u2019 performance of payment services, but we do not accept responsibility for any other services that they provide to you. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](156, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](157, "We do not exclude or limit in any way our liability to you where it would be unlawful to do so. This includes liability for death or personal injury caused by our negligence or the negligence of our employees, agents or subcontractors or for fraud or fraudulent misrepresentation.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](158, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](159, "We do not exclude or limit liability for our failure to comply with our regulatory obligations. This includes our obligations under the Payment Services Regulations 2017 and the FCA Rules. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](160, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](161, "We are not liable for losses resulting from events outside of our control. We will not be responsible for any loss you may suffer as a result of abnormal or unforeseeable circumstances beyond our reasonable control and which are unavoidable despite all our reasonable efforts to ensure continuity of service.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](162, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](163, "b");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](164, "Our intellectual property");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](165, "ol");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](166, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](167, "MMOB hereby grants you a non-exclusive, non-transferable, revocable license to use the Marketplace. All other rights in the Marketplace are reserved by MMOB and its licensors.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](168, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](169, "We reserve all rights in the name \u201CMMOB\u201D, and all related domains and sub-domains, our logo and our service marks, brand names, trading names and/or trade marks appearing anywhere on the Service.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](170, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](171, "Other trade marks, products and company or brand names mentioned on the Service may be the trade marks of their respective owners or licensors and all rights in such trade marks are reserved to their respective owners or licensors.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](172, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](173, "Nothing in these Terms of Use should be construed as granting any license or right to use any of the trade marks or domain names referred to in this paragraph.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](174, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](175, "You must not: ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](176, "ol");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](177, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](178, "disassemble or attempt to reverse engineer any software in the Marketplace, except as permitted by law;");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](179, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](180, "copy, distribute or communicate to the public content from the Marketplace or seek to copy, remove or alter any regulatory notices, trade marks, logos or business names from the Marketplace; or");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](181, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](182, " use a program or application to scrape, copy or index the content from the Marketplace;");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](183, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](184, "use or launch automated systems such as bots, spiders or load testers that access or attempt to access the Marketplace or our Services.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](185, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](186, "b");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](187, "Termination and suspension");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](188, "ol");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](189, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](190, "We may provide our Services to you on a one-off basis. If you use our Services on a continuing basis, you can stop using our Services at any time and terminate this agreement. If you close your Marketplace account, our Services will also end. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](191, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](192, "We may suspend the Service or refuse to process any Payment Order at any time: ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](193, "ol");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](194, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](195, "if you have broken these Terms of Use in a serious way; ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](196, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](197, "we reasonably suspect your use of the Services is, or would be, unlawful, unauthorised, fraudulent or abusive. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](198, " If what you have done can be put right, we will give you a reasonable opportunity to do so. We will give you at least two months\u2019 notice if we intend to end your rights to use the Service. We do not need to contact you if it would be unlawful to do so or would compromise our reasonable security measures. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](199, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](200, "b");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](201, "Changes to these Terms of Use");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](202, "ol");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](203, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](204, "We may need to change these Terms of Use to reflect changes in law, regulation or best practice or to deal with additional features which we introduce. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](205, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](206, "Unless required by law or regulation or to implement non-material corrections (in which case we may make changes immediately), we will give you at least two months\u2019 notice before proposed changes. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](207, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](208, "Your use of the Service after the effective date of new Terms of Use (or engaging in such other conduct as we may reasonably specify) constitutes deemed acceptance to the new Terms of Use. If you do not accept the proposed changes you have the right to close your account at any time without charge. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](209, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](210, "b");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](211, "Third party links and services");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](212, "ol");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](213, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](214, "Your browsing and interaction on any other website or your use of other services, including websites and services which have a link to the Marketplace, is subject to the rules and policies of the relevant website or service. Please read the rules and policies applicable to that website or service before proceeding.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](215, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](216, "The Marketplace, or communications from it or comments within it, may include links to thirdparty websites, applications or features (\u201CThird Party Services\u201D). These links are provided for your information only");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](217, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](218, "MMOB does not control, maintain or endorse Third Party Services and you acknowledge and agree that your use of them is at your own risk. We assume no responsibility for the content or operation of Third Party Services and we will not be liable for any loss or damage that may arise from your use of them (or such content).");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](219, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](220, "b");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](221, "General");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](222, "ol");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](223, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](224, "We may transfer this agreement to someone else. We may transfer our rights and obligations under these terms to another organisation. We will always tell you in writing if this happens and we will ensure that the transfer will not affect your rights under the contract. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](225, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](226, "You need our consent to transfer your rights to someone else. You may only transfer your rights or your obligations under these terms to another person if we agree in writing.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](227, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](228, "No rights for third parties. This agreement does not give rise to any rights under the Contracts (Rights of Third Parties) Act 1999 to enforce any term of this agreement. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](229, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](230, "If a court finds part of this contract illegal, the rest will continue in force. Each of the paragraphs of these terms operates separately. If any court or relevant authority decides that any of them are unlawful, the remaining paragraphs will remain in full force and effect.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](231, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](232, "Even if we delay in enforcing this contract, we can still enforce it later. Even if we delay in enforcing this contract, we can still enforce it later. If we do not insist immediately that you do anything you are required to do under these terms, or if we delay in taking steps against you in respect of your breaking this contract, that will not mean that you do not have to do those things and it will not prevent us taking steps against you at a later date.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](233, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](234, "Which laws apply to this contract and where you may bring legal proceedings. These Terms of Use are governed by English law and you can bring legal proceedings in respect of the Service in the English courts. If you live in Scotland, you can bring legal proceedings in respect of the Service in either the Scottish or the English courts. If you live in Northern Ireland, you can bring legal proceedings in respect of the Service in either the Northern Irish or the English courts. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](235, "h3");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](236, "Glossary");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](237, "table");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](238, "tbody");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](239, "tr");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](240, "th");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](241, "[Gateway Partner]");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](242, "td");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](243, "the third party operating the Marketplace (who may also be one of your Payment Account Providers) ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](244, "tr");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](245, "th");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](246, "AIS");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](247, "td");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](248, "account information services, which is what we do when we securely access and consolidate the information from your bank account(s)");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](249, "tr");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](250, "th");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](251, "App");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](252, "td");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](253, "any MMOB application including our mobile application");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](254, "tr");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](255, "th");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](256, "Credentials ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](257, "td");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](258, "your login and security credentials");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](259, "tr");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](260, "th");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](261, "Marketplace");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](262, "td");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](263, "the website and/or mobile application which is provided to you by the [Gateway Partner] through which you can (i) access our Services and (ii) discover and use products and services from Marketplace Participants listed on the marketplace platform ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](264, "tr");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](265, "th");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](266, "Marketplace Participant");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](267, "td");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](268, "a third party operating the Marketplace or any of the participants in the Marketplace ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](269, "tr");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](270, "th");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](271, "Payment Account");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](272, "td");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](273, "your account with your Payment Account Provider");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](274, "tr");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](275, "th");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](276, "Payment Account Provider");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](277, "td");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](278, "usually your bank but maybe a credit card provider or an emoney firm");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](279, "tr");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](280, "th");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](281, "Payment Order");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](282, "td");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](283, "The details you give to your Payment Account Provider to make a payment ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](284, "tr");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](285, "th");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](286, "PIS");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](287, "td");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](288, "payment initiation services, which is when we ask your Payment Account Provider to make a payment");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](289, "tr");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](290, "th");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](291, "Services");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](292, "td");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](293, "our PIS and AIS, or whichever one is relevant to you");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](294, "div", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](295, "button", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function PrivacyComponent_Template_button_click_295_listener() {
              return ctx.yesPressed();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](296, "OK");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }
        },
        styles: [".logo-img[_ngcontent-%COMP%] {\r\n    width: 200px;\r\n    text-align: center;\r\n    margin: 0 auto;\r\n}\r\n.modal-body[_ngcontent-%COMP%] {\r\n    position: relative;\r\n    flex: 1 1 auto;\r\n    padding: 15px 0px;\r\n}\r\n.modal-body[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%] {\r\n    font-size: 18px;\r\n    margin-top: 20px;\r\n    font-weight: 600;\r\n    margin-bottom: 5px;\r\n}\r\n.modal-body[_ngcontent-%COMP%]   h6[_ngcontent-%COMP%] {\r\n    font-size: 16px;\r\n    font-weight: 600;\r\n    margin: 10px 10px 10px 0px;\r\n}\r\n.modal-dialog[_ngcontent-%COMP%] {\r\n    margin: 0px auto;\r\n}\r\n.modal-body.popups[_ngcontent-%COMP%]{\r\n    height: 450px;\r\n}\r\n.content-data[_ngcontent-%COMP%] {\r\n    padding: 10px 20px;\r\n    text-align: justify;\r\n}\r\n.modal-content[_ngcontent-%COMP%] {\r\n    border: 0px;\r\n}\r\nh3[_ngcontent-%COMP%] {\r\n    font-size: 20px;\r\n    margin-bottom: 10px;\r\n    font-weight: 800;\r\n}\r\nbutton.btn.btn-secondary[_ngcontent-%COMP%] {\r\n    background: black;\r\n    margin: 0 auto;\r\n    padding: 7px 36px;\r\n    color: #fff;\r\n}\r\nli[_ngcontent-%COMP%] {\r\n    list-style: circle;\r\n}\r\nul[_ngcontent-%COMP%] {\r\n    padding-left: 15px;\r\n}\r\nol[_ngcontent-%COMP%] { counter-reset: item }\r\nli[_ngcontent-%COMP%]{ display: block;margin-top: 8px; }\r\nli[_ngcontent-%COMP%]:before { \r\n\tcontent: counters(item, \".\") \" \"; \r\n\tcounter-increment: item;\r\n    font-weight: 700;\r\n}\r\ntable[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\r\n    width: 60%;\r\n}\r\ntable[_ngcontent-%COMP%] {\r\n    font-size: 15px;\r\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hhcmVkL3ByaXZhY3kvcHJpdmFjeS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixjQUFjO0FBQ2xCO0FBQ0E7SUFDSSxrQkFBa0I7SUFDbEIsY0FBYztJQUNkLGlCQUFpQjtBQUNyQjtBQUNBO0lBQ0ksZUFBZTtJQUNmLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsa0JBQWtCO0FBQ3RCO0FBQ0E7SUFDSSxlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLDBCQUEwQjtBQUM5QjtBQUNBO0lBQ0ksZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxhQUFhO0FBQ2pCO0FBQ0E7SUFDSSxrQkFBa0I7SUFDbEIsbUJBQW1CO0FBQ3ZCO0FBQ0E7SUFDSSxXQUFXO0FBQ2Y7QUFDQTtJQUNJLGVBQWU7SUFDZixtQkFBbUI7SUFDbkIsZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxpQkFBaUI7SUFDakIsY0FBYztJQUNkLGlCQUFpQjtJQUNqQixXQUFXO0FBQ2Y7QUFDQTtJQUNJLGtCQUFrQjtBQUN0QjtBQUNBO0lBQ0ksa0JBQWtCO0FBQ3RCO0FBQ0EsS0FBSyxvQkFBb0I7QUFDekIsSUFBSSxjQUFjLENBQUMsZUFBZSxFQUFFO0FBQ3BDO0NBQ0MsZ0NBQWdDO0NBQ2hDLHVCQUF1QjtJQUNwQixnQkFBZ0I7QUFDcEI7QUFDQTtJQUNJLFVBQVU7QUFDZDtBQUNBO0lBQ0ksZUFBZTtBQUNuQiIsImZpbGUiOiJzcmMvYXBwL3NoYXJlZC9wcml2YWN5L3ByaXZhY3kuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5sb2dvLWltZyB7XHJcbiAgICB3aWR0aDogMjAwcHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBtYXJnaW46IDAgYXV0bztcclxufVxyXG4ubW9kYWwtYm9keSB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBmbGV4OiAxIDEgYXV0bztcclxuICAgIHBhZGRpbmc6IDE1cHggMHB4O1xyXG59XHJcbi5tb2RhbC1ib2R5IGg1IHtcclxuICAgIGZvbnQtc2l6ZTogMThweDtcclxuICAgIG1hcmdpbi10b3A6IDIwcHg7XHJcbiAgICBmb250LXdlaWdodDogNjAwO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNXB4O1xyXG59XHJcbi5tb2RhbC1ib2R5IGg2IHtcclxuICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgICBtYXJnaW46IDEwcHggMTBweCAxMHB4IDBweDtcclxufVxyXG4ubW9kYWwtZGlhbG9nIHtcclxuICAgIG1hcmdpbjogMHB4IGF1dG87XHJcbn1cclxuLm1vZGFsLWJvZHkucG9wdXBze1xyXG4gICAgaGVpZ2h0OiA0NTBweDtcclxufVxyXG4uY29udGVudC1kYXRhIHtcclxuICAgIHBhZGRpbmc6IDEwcHggMjBweDtcclxuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XHJcbn1cclxuLm1vZGFsLWNvbnRlbnQge1xyXG4gICAgYm9yZGVyOiAwcHg7XHJcbn1cclxuaDMge1xyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxuICAgIGZvbnQtd2VpZ2h0OiA4MDA7XHJcbn1cclxuYnV0dG9uLmJ0bi5idG4tc2Vjb25kYXJ5IHtcclxuICAgIGJhY2tncm91bmQ6IGJsYWNrO1xyXG4gICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICBwYWRkaW5nOiA3cHggMzZweDtcclxuICAgIGNvbG9yOiAjZmZmO1xyXG59XHJcbmxpIHtcclxuICAgIGxpc3Qtc3R5bGU6IGNpcmNsZTtcclxufVxyXG51bCB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDE1cHg7XHJcbn1cclxub2wgeyBjb3VudGVyLXJlc2V0OiBpdGVtIH1cclxubGl7IGRpc3BsYXk6IGJsb2NrO21hcmdpbi10b3A6IDhweDsgfVxyXG5saTpiZWZvcmUgeyBcclxuXHRjb250ZW50OiBjb3VudGVycyhpdGVtLCBcIi5cIikgXCIgXCI7IFxyXG5cdGNvdW50ZXItaW5jcmVtZW50OiBpdGVtO1xyXG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcclxufVxyXG50YWJsZSB0ZCB7XHJcbiAgICB3aWR0aDogNjAlO1xyXG59XHJcbnRhYmxlIHtcclxuICAgIGZvbnQtc2l6ZTogMTVweDtcclxufSJdfQ== */"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](PrivacyComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'app-privacy',
            templateUrl: './privacy.component.html',
            styleUrls: ['./privacy.component.css']
          }]
        }], function () {
          return [{
            type: _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_1__["NgbActiveModal"]
          }];
        }, null);
      })();
      /***/

    },

    /***/
    "Oejd":
    /*!*************************************************************************!*\
      !*** ./src/app/shared/information-popup/information-popup.component.ts ***!
      \*************************************************************************/

    /*! exports provided: InformationPopupComponent */

    /***/
    function Oejd(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "InformationPopupComponent", function () {
        return InformationPopupComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @ng-bootstrap/ng-bootstrap */
      "1kSV");

      var InformationPopupComponent = /*#__PURE__*/function () {
        function InformationPopupComponent(activeModal) {
          _classCallCheck(this, InformationPopupComponent);

          this.activeModal = activeModal;
          this.modalType = 'confirm'; // alert/confirm

          this.confirmText = '';
          this.headerText = '';
          this.firstButtonText = 'NO THANKS';
          this.secondButtonText = 'Ok';
        }

        _createClass(InformationPopupComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {}
          /**
           * Method used to close the modal
           */

        }, {
          key: "noPressed",
          value: function noPressed() {
            this.activeModal.close({
              isYesPressed: false
            });
          }
        }, {
          key: "yesPressed",
          value: function yesPressed() {
            this.activeModal.close({
              isYesPressed: true
            });
          }
        }]);

        return InformationPopupComponent;
      }();

      InformationPopupComponent.POP_UP_DEFAULT_PROPS = {
        backdrop: 'static',
        keyboard: false,
        centered: true
      };

      InformationPopupComponent.ɵfac = function InformationPopupComponent_Factory(t) {
        return new (t || InformationPopupComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_1__["NgbActiveModal"]));
      };

      InformationPopupComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: InformationPopupComponent,
        selectors: [["app-information-popup"]],
        inputs: {
          action: "action",
          modalType: "modalType",
          confirmText: "confirmText",
          headerText: "headerText",
          firstButtonText: "firstButtonText",
          secondButtonText: "secondButtonText"
        },
        decls: 15,
        vars: 3,
        consts: [[1, "modal-dialog", "modal-dialog-centered"], [1, "modal-content"], [1, "modal-body"], [1, "row"], [1, "col-md-12"], [1, "logo-img"], ["alt", "logo-img", "src", "assets/images/logo.png"], [1, "modal-footer"], ["data-dismiss", "modal", "type", "button", 1, "btn", "btn-primary", 3, "click"]],
        template: function InformationPopupComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "div", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](6, "img", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](8, "h6");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](9);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](11);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](12, "div", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](13, "button", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function InformationPopupComponent_Template_button_click_13_listener() {
              return ctx.yesPressed();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](14);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](9);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx.headerText);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", ctx.confirmText, "");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx.secondButtonText);
          }
        },
        styles: [".modal-dialog-centered[_ngcontent-%COMP%] {\r\n    display: flex;\r\n    align-items: center;\r\n    min-height: calc(100% - 1rem);\r\n    margin: 0 auto;\r\n}\r\n.modal-content[_ngcontent-%COMP%] {\r\n    width: 100%;\r\n}\r\n.modal-body[_ngcontent-%COMP%]   h6[_ngcontent-%COMP%] {\r\n    margin: 0 0 14px;\r\n    color: #000;\r\n    font-weight: 500;\r\n}\r\n.modal-body[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\r\n    text-align: center;\r\n    font-size: 16px;\r\n    font-weight: normal;\r\n}\r\n.modal-footer[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\r\n    cursor: pointer;\r\n}\r\nbutton.btn.btn-primary[_ngcontent-%COMP%] {\r\n    padding: 10px 30px;\r\n    text-transform: uppercase;\r\n    font-weight: 500;\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n}\r\nbutton.btn.btn-secondary[_ngcontent-%COMP%] {\r\n    color: #fff;\r\n    text-transform: uppercase;\r\n    border: 0px;\r\n    padding: 10px 30px;\r\n    font-weight: 500;\r\n    background: #fe5863 !important;\r\n}\r\nbutton.btn.btn-secondary[_ngcontent-%COMP%]:hover {\r\n    background: #ed6b70 !important;\r\n}\r\nbutton.btn.btn-primary[_ngcontent-%COMP%]:hover, button.btn.btn-secondary[_ngcontent-%COMP%]:hover, button.btn.btn-secondary[_ngcontent-%COMP%]:focus {\r\n    background: #00008b;\r\n    color: #fff;\r\n}\r\n.btn-secondary[_ngcontent-%COMP%]:not(:disabled):not(.disabled).active:focus, .btn-secondary[_ngcontent-%COMP%]:not(:disabled):not(.disabled):active:focus, .show[_ngcontent-%COMP%] > .btn-secondary.dropdown-toggle[_ngcontent-%COMP%]:focus {\r\n    box-shadow: none !Important;\r\n}\r\n.btn-secondary.focus[_ngcontent-%COMP%], .btn-secondary[_ngcontent-%COMP%]:focus {\r\n    box-shadow: none;\r\n}\r\n.modal-footer[_ngcontent-%COMP%] {\r\n    border: 0;\r\n}\r\n.logo-img[_ngcontent-%COMP%] {\r\n    text-align: center;\r\n    width: 200px;\r\n    margin: 0 auto;\r\n    padding-bottom: 24px;\r\n}\r\n.modal-footer[_ngcontent-%COMP%] {\r\n    justify-content: center;\r\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hhcmVkL2luZm9ybWF0aW9uLXBvcHVwL2luZm9ybWF0aW9uLXBvcHVwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFFSSxhQUFhO0lBRWIsbUJBQW1CO0lBQ25CLDZCQUE2QjtJQUM3QixjQUFjO0FBQ2xCO0FBQ0E7SUFDSSxXQUFXO0FBQ2Y7QUFDQTtJQUNJLGdCQUFnQjtJQUNoQixXQUFXO0lBQ1gsZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLG1CQUFtQjtBQUN2QjtBQUNBO0lBQ0ksZUFBZTtBQUNuQjtBQUNBO0lBQ0ksa0JBQWtCO0lBQ2xCLHlCQUF5QjtJQUN6QixnQkFBZ0I7SUFDaEIsZUFBZTtJQUNmLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksV0FBVztJQUNYLHlCQUF5QjtJQUN6QixXQUFXO0lBQ1gsa0JBQWtCO0lBQ2xCLGdCQUFnQjtJQUNoQiw4QkFBOEI7QUFDbEM7QUFDQTtJQUNJLDhCQUE4QjtBQUNsQztBQUNBO0lBQ0ksbUJBQW1CO0lBQ25CLFdBQVc7QUFDZjtBQUNBO0lBQ0ksMkJBQTJCO0FBQy9CO0FBQ0E7SUFDSSxnQkFBZ0I7QUFDcEI7QUFDQTtJQUNJLFNBQVM7QUFDYjtBQUNBO0lBQ0ksa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixjQUFjO0lBQ2Qsb0JBQW9CO0FBQ3hCO0FBQ0E7SUFDSSx1QkFBdUI7QUFDM0IiLCJmaWxlIjoic3JjL2FwcC9zaGFyZWQvaW5mb3JtYXRpb24tcG9wdXAvaW5mb3JtYXRpb24tcG9wdXAuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5tb2RhbC1kaWFsb2ctY2VudGVyZWQge1xyXG4gICAgZGlzcGxheTogLW1zLWZsZXhib3g7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBtaW4taGVpZ2h0OiBjYWxjKDEwMCUgLSAxcmVtKTtcclxuICAgIG1hcmdpbjogMCBhdXRvO1xyXG59XHJcbi5tb2RhbC1jb250ZW50IHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59XHJcbi5tb2RhbC1ib2R5IGg2IHtcclxuICAgIG1hcmdpbjogMCAwIDE0cHg7XHJcbiAgICBjb2xvcjogIzAwMDtcclxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbn1cclxuLm1vZGFsLWJvZHkgcCB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICBmb250LXdlaWdodDogbm9ybWFsO1xyXG59XHJcbi5tb2RhbC1mb290ZXIgYnV0dG9uIHtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxufVxyXG5idXR0b24uYnRuLmJ0bi1wcmltYXJ5IHtcclxuICAgIHBhZGRpbmc6IDEwcHggMzBweDtcclxuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICBmb250LXdlaWdodDogNTAwO1xyXG4gICAgZm9udC1zaXplOiAxNHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcclxufVxyXG5idXR0b24uYnRuLmJ0bi1zZWNvbmRhcnkge1xyXG4gICAgY29sb3I6ICNmZmY7XHJcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgYm9yZGVyOiAwcHg7XHJcbiAgICBwYWRkaW5nOiAxMHB4IDMwcHg7XHJcbiAgICBmb250LXdlaWdodDogNTAwO1xyXG4gICAgYmFja2dyb3VuZDogI2ZlNTg2MyAhaW1wb3J0YW50O1xyXG59XHJcbmJ1dHRvbi5idG4uYnRuLXNlY29uZGFyeTpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kOiAjZWQ2YjcwICFpbXBvcnRhbnQ7XHJcbn1cclxuYnV0dG9uLmJ0bi5idG4tcHJpbWFyeTpob3ZlciwgYnV0dG9uLmJ0bi5idG4tc2Vjb25kYXJ5OmhvdmVyLCBidXR0b24uYnRuLmJ0bi1zZWNvbmRhcnk6Zm9jdXMge1xyXG4gICAgYmFja2dyb3VuZDogIzAwMDA4YjtcclxuICAgIGNvbG9yOiAjZmZmO1xyXG59XHJcbi5idG4tc2Vjb25kYXJ5Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZTpmb2N1cywgLmJ0bi1zZWNvbmRhcnk6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLCAuc2hvdz4uYnRuLXNlY29uZGFyeS5kcm9wZG93bi10b2dnbGU6Zm9jdXMge1xyXG4gICAgYm94LXNoYWRvdzogbm9uZSAhSW1wb3J0YW50O1xyXG59XHJcbi5idG4tc2Vjb25kYXJ5LmZvY3VzLCAuYnRuLXNlY29uZGFyeTpmb2N1cyB7XHJcbiAgICBib3gtc2hhZG93OiBub25lO1xyXG59XHJcbi5tb2RhbC1mb290ZXIge1xyXG4gICAgYm9yZGVyOiAwO1xyXG59XHJcbi5sb2dvLWltZyB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICB3aWR0aDogMjAwcHg7XHJcbiAgICBtYXJnaW46IDAgYXV0bztcclxuICAgIHBhZGRpbmctYm90dG9tOiAyNHB4O1xyXG59XHJcbi5tb2RhbC1mb290ZXIge1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbn0iXX0= */"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](InformationPopupComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'app-information-popup',
            templateUrl: './information-popup.component.html',
            styleUrls: ['./information-popup.component.css']
          }]
        }], function () {
          return [{
            type: _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_1__["NgbActiveModal"]
          }];
        }, {
          action: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          modalType: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          confirmText: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          headerText: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          firstButtonText: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          secondButtonText: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /***/

    },

    /***/
    "PCNd":
    /*!*****************************************!*\
      !*** ./src/app/shared/shared.module.ts ***!
      \*****************************************/

    /*! exports provided: SharedModule */

    /***/
    function PCNd(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SharedModule", function () {
        return SharedModule;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /* harmony import */


      var _pipes_assets_path_pipe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./pipes/assets-path.pipe */
      "VrQ/");
      /* harmony import */


      var _show_errors_show_errors_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./show-errors/show-errors.component */
      "yjpJ");
      /* harmony import */


      var _confirmation_popup_confirmation_popup_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./confirmation-popup/confirmation-popup.component */
      "WjRx");
      /* harmony import */


      var _iframe_iframe_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./iframe/iframe.component */
      "ieeg");
      /* harmony import */


      var _terms_conditions_terms_conditions_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ./terms-conditions/terms-conditions.component */
      "fRyE");
      /* harmony import */


      var _privacy_privacy_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ./privacy/privacy.component */
      "NPsI");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/forms */
      "3Pt+");
      /* harmony import */


      var _validations_InputControlMessagesComponent__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! ./validations/InputControlMessagesComponent */
      "+1zU");
      /* harmony import */


      var _angular_common_http__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! @angular/common/http */
      "tk/3");
      /* harmony import */


      var _services_base_services_api_client_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! ./services/base-services/api-client.service */
      "Kjpl");
      /* harmony import */


      var _services_get_address_io_get_address_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! ./services/get-address-io/get-address.service */
      "J622");
      /* harmony import */


      var _services_user_user_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! ./services/user/user.service */
      "biaL");
      /* harmony import */


      var _interceptors_headers_interceptor__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
      /*! ./interceptors/headers.interceptor */
      "7zEN");
      /* harmony import */


      var _services_kyc_verification_service_kyc_verification_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
      /*! ./services/kyc-verification-service/kyc-verification.service */
      "j2+P");
      /* harmony import */


      var _information_popup_information_popup_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
      /*! ./information-popup/information-popup.component */
      "Oejd");

      var SharedModule = function SharedModule() {
        _classCallCheck(this, SharedModule);
      };

      SharedModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: SharedModule
      });
      SharedModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        factory: function SharedModule_Factory(t) {
          return new (t || SharedModule)();
        },
        providers: [{
          provide: _angular_common_http__WEBPACK_IMPORTED_MODULE_10__["HTTP_INTERCEPTORS"],
          useClass: _interceptors_headers_interceptor__WEBPACK_IMPORTED_MODULE_14__["HeadersInterceptor"],
          multi: true
        }, _pipes_assets_path_pipe__WEBPACK_IMPORTED_MODULE_2__["AssetsPathPipe"], _confirmation_popup_confirmation_popup_component__WEBPACK_IMPORTED_MODULE_4__["ConfirmationPopupComponent"], _information_popup_information_popup_component__WEBPACK_IMPORTED_MODULE_16__["InformationPopupComponent"], _iframe_iframe_component__WEBPACK_IMPORTED_MODULE_5__["IframeComponent"], _terms_conditions_terms_conditions_component__WEBPACK_IMPORTED_MODULE_6__["TermsConditionsComponent"], _privacy_privacy_component__WEBPACK_IMPORTED_MODULE_7__["PrivacyComponent"], _services_base_services_api_client_service__WEBPACK_IMPORTED_MODULE_11__["ApiService"], _services_get_address_io_get_address_service__WEBPACK_IMPORTED_MODULE_12__["GetAddressService"], _services_kyc_verification_service_kyc_verification_service__WEBPACK_IMPORTED_MODULE_15__["KycVerificationService"], _services_user_user_service__WEBPACK_IMPORTED_MODULE_13__["UserService"]],
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_8__["ReactiveFormsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_8__["FormsModule"], _angular_common_http__WEBPACK_IMPORTED_MODULE_10__["HttpClientModule"]], _angular_forms__WEBPACK_IMPORTED_MODULE_8__["ReactiveFormsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_8__["FormsModule"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](SharedModule, {
          declarations: [_pipes_assets_path_pipe__WEBPACK_IMPORTED_MODULE_2__["AssetsPathPipe"], _confirmation_popup_confirmation_popup_component__WEBPACK_IMPORTED_MODULE_4__["ConfirmationPopupComponent"], _information_popup_information_popup_component__WEBPACK_IMPORTED_MODULE_16__["InformationPopupComponent"], _show_errors_show_errors_component__WEBPACK_IMPORTED_MODULE_3__["ShowErrorsComponent"], _iframe_iframe_component__WEBPACK_IMPORTED_MODULE_5__["IframeComponent"], _terms_conditions_terms_conditions_component__WEBPACK_IMPORTED_MODULE_6__["TermsConditionsComponent"], _privacy_privacy_component__WEBPACK_IMPORTED_MODULE_7__["PrivacyComponent"], _validations_InputControlMessagesComponent__WEBPACK_IMPORTED_MODULE_9__["InputControlMessagesComponent"]],
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_8__["ReactiveFormsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_8__["FormsModule"], _angular_common_http__WEBPACK_IMPORTED_MODULE_10__["HttpClientModule"]],
          exports: [_pipes_assets_path_pipe__WEBPACK_IMPORTED_MODULE_2__["AssetsPathPipe"], _show_errors_show_errors_component__WEBPACK_IMPORTED_MODULE_3__["ShowErrorsComponent"], _confirmation_popup_confirmation_popup_component__WEBPACK_IMPORTED_MODULE_4__["ConfirmationPopupComponent"], _iframe_iframe_component__WEBPACK_IMPORTED_MODULE_5__["IframeComponent"], _terms_conditions_terms_conditions_component__WEBPACK_IMPORTED_MODULE_6__["TermsConditionsComponent"], _privacy_privacy_component__WEBPACK_IMPORTED_MODULE_7__["PrivacyComponent"], _angular_forms__WEBPACK_IMPORTED_MODULE_8__["ReactiveFormsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_8__["FormsModule"], _validations_InputControlMessagesComponent__WEBPACK_IMPORTED_MODULE_9__["InputControlMessagesComponent"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"]]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SharedModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            declarations: [_pipes_assets_path_pipe__WEBPACK_IMPORTED_MODULE_2__["AssetsPathPipe"], _confirmation_popup_confirmation_popup_component__WEBPACK_IMPORTED_MODULE_4__["ConfirmationPopupComponent"], _information_popup_information_popup_component__WEBPACK_IMPORTED_MODULE_16__["InformationPopupComponent"], _show_errors_show_errors_component__WEBPACK_IMPORTED_MODULE_3__["ShowErrorsComponent"], _iframe_iframe_component__WEBPACK_IMPORTED_MODULE_5__["IframeComponent"], _terms_conditions_terms_conditions_component__WEBPACK_IMPORTED_MODULE_6__["TermsConditionsComponent"], _privacy_privacy_component__WEBPACK_IMPORTED_MODULE_7__["PrivacyComponent"], _validations_InputControlMessagesComponent__WEBPACK_IMPORTED_MODULE_9__["InputControlMessagesComponent"]],
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_8__["ReactiveFormsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_8__["FormsModule"], _angular_common_http__WEBPACK_IMPORTED_MODULE_10__["HttpClientModule"]],
            exports: [_pipes_assets_path_pipe__WEBPACK_IMPORTED_MODULE_2__["AssetsPathPipe"], _show_errors_show_errors_component__WEBPACK_IMPORTED_MODULE_3__["ShowErrorsComponent"], _confirmation_popup_confirmation_popup_component__WEBPACK_IMPORTED_MODULE_4__["ConfirmationPopupComponent"], _iframe_iframe_component__WEBPACK_IMPORTED_MODULE_5__["IframeComponent"], _terms_conditions_terms_conditions_component__WEBPACK_IMPORTED_MODULE_6__["TermsConditionsComponent"], _privacy_privacy_component__WEBPACK_IMPORTED_MODULE_7__["PrivacyComponent"], _angular_forms__WEBPACK_IMPORTED_MODULE_8__["ReactiveFormsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_8__["FormsModule"], _validations_InputControlMessagesComponent__WEBPACK_IMPORTED_MODULE_9__["InputControlMessagesComponent"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"]],
            providers: [{
              provide: _angular_common_http__WEBPACK_IMPORTED_MODULE_10__["HTTP_INTERCEPTORS"],
              useClass: _interceptors_headers_interceptor__WEBPACK_IMPORTED_MODULE_14__["HeadersInterceptor"],
              multi: true
            }, _pipes_assets_path_pipe__WEBPACK_IMPORTED_MODULE_2__["AssetsPathPipe"], _confirmation_popup_confirmation_popup_component__WEBPACK_IMPORTED_MODULE_4__["ConfirmationPopupComponent"], _information_popup_information_popup_component__WEBPACK_IMPORTED_MODULE_16__["InformationPopupComponent"], _iframe_iframe_component__WEBPACK_IMPORTED_MODULE_5__["IframeComponent"], _terms_conditions_terms_conditions_component__WEBPACK_IMPORTED_MODULE_6__["TermsConditionsComponent"], _privacy_privacy_component__WEBPACK_IMPORTED_MODULE_7__["PrivacyComponent"], _services_base_services_api_client_service__WEBPACK_IMPORTED_MODULE_11__["ApiService"], _services_get_address_io_get_address_service__WEBPACK_IMPORTED_MODULE_12__["GetAddressService"], _services_kyc_verification_service_kyc_verification_service__WEBPACK_IMPORTED_MODULE_15__["KycVerificationService"], _services_user_user_service__WEBPACK_IMPORTED_MODULE_13__["UserService"]]
          }]
        }], null, null);
      })();
      /***/

    },

    /***/
    "VrQ/":
    /*!**************************************************!*\
      !*** ./src/app/shared/pipes/assets-path.pipe.ts ***!
      \**************************************************/

    /*! exports provided: AssetsPathPipe */

    /***/
    function VrQ(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AssetsPathPipe", function () {
        return AssetsPathPipe;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");

      var AssetsPathPipe = /*#__PURE__*/function () {
        function AssetsPathPipe() {
          _classCallCheck(this, AssetsPathPipe);

          this.assetPath = 'assets';
          this.DS = '/';
          this.imagePath = 'images';
          this.svgPath = 'icons';
          this.baseUrl = '';
        }

        _createClass(AssetsPathPipe, [{
          key: "transform",
          value: function transform(value, args) {
            var assetsPath = this.baseUrl + this.assetPath + this.DS;

            if (args) {
              switch (args) {
                case 'img':
                  assetsPath += this.imagePath;
                  assetsPath += this.DS;
                  break;
              }
            }

            assetsPath += value;
            return assetsPath;
          }
        }]);

        return AssetsPathPipe;
      }();

      AssetsPathPipe.ɵfac = function AssetsPathPipe_Factory(t) {
        return new (t || AssetsPathPipe)();
      };

      AssetsPathPipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "assetsPath",
        type: AssetsPathPipe,
        pure: true
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](AssetsPathPipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
          args: [{
            name: 'assetsPath'
          }]
        }], function () {
          return [];
        }, null);
      })();
      /***/

    },

    /***/
    "WjRx":
    /*!***************************************************************************!*\
      !*** ./src/app/shared/confirmation-popup/confirmation-popup.component.ts ***!
      \***************************************************************************/

    /*! exports provided: ConfirmationPopupComponent */

    /***/
    function WjRx(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ConfirmationPopupComponent", function () {
        return ConfirmationPopupComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @ng-bootstrap/ng-bootstrap */
      "1kSV");

      var ConfirmationPopupComponent = /*#__PURE__*/function () {
        function ConfirmationPopupComponent(activeModal) {
          _classCallCheck(this, ConfirmationPopupComponent);

          this.activeModal = activeModal;
          this.modalType = 'confirm'; // alert/confirm

          this.confirmText = '';
          this.headerText = '';
          this.firstButtonText = 'NO THANKS';
          this.secondButtonText = 'ALLOW';
        }

        _createClass(ConfirmationPopupComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {}
          /**
           * Method used to close the modal
           */

        }, {
          key: "noPressed",
          value: function noPressed() {
            this.activeModal.close({
              isYesPressed: false
            });
          }
        }, {
          key: "yesPressed",
          value: function yesPressed() {
            this.activeModal.close({
              isYesPressed: true
            });
          }
        }]);

        return ConfirmationPopupComponent;
      }();

      ConfirmationPopupComponent.POP_UP_DEFAULT_PROPS = {
        backdrop: 'static',
        keyboard: false,
        centered: true
      };

      ConfirmationPopupComponent.ɵfac = function ConfirmationPopupComponent_Factory(t) {
        return new (t || ConfirmationPopupComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_1__["NgbActiveModal"]));
      };

      ConfirmationPopupComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: ConfirmationPopupComponent,
        selectors: [["app-confirmation-popup"]],
        inputs: {
          action: "action",
          modalType: "modalType",
          confirmText: "confirmText",
          headerText: "headerText",
          firstButtonText: "firstButtonText",
          secondButtonText: "secondButtonText"
        },
        decls: 17,
        vars: 4,
        consts: [[1, "modal-dialog", "modal-dialog-centered"], [1, "modal-content"], [1, "modal-body"], [1, "row"], [1, "col-md-12"], [1, "logo-img"], ["alt", "logo-img", "src", "assets/images/logo.png"], [1, "modal-footer"], ["type", "button", 1, "btn", "btn-secondary", 3, "click"], ["data-dismiss", "modal", "type", "button", 1, "btn", "btn-primary", 3, "click"]],
        template: function ConfirmationPopupComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "div", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](6, "img", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](8, "h6");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](9);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](11);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](12, "div", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](13, "button", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function ConfirmationPopupComponent_Template_button_click_13_listener() {
              return ctx.noPressed();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](14);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](15, "button", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function ConfirmationPopupComponent_Template_button_click_15_listener() {
              return ctx.yesPressed();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](16);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](9);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx.headerText);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", ctx.confirmText, "");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx.firstButtonText);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx.secondButtonText);
          }
        },
        styles: [".modal-dialog-centered[_ngcontent-%COMP%] {\r\n    display: flex;\r\n    align-items: center;\r\n    min-height: calc(100% - 1rem);\r\n    margin: 0 auto;\r\n}\r\n.modal-content[_ngcontent-%COMP%] {\r\n    width: 100%;\r\n}\r\n.modal-body[_ngcontent-%COMP%]   h6[_ngcontent-%COMP%] {\r\n    margin: 0 0 14px;\r\n    color: #000;\r\n    font-weight: 500;\r\n}\r\n.modal-body[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\r\n    text-align: center;\r\n    font-size: 16px;\r\n    font-weight: normal;\r\n}\r\n.modal-footer[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\r\n    cursor: pointer;\r\n}\r\nbutton.btn.btn-primary[_ngcontent-%COMP%] {\r\n    padding: 10px 30px;\r\n    text-transform: uppercase;\r\n    font-weight: 500;\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n}\r\nbutton.btn.btn-secondary[_ngcontent-%COMP%] {\r\n    color: #fff;\r\n    text-transform: uppercase;\r\n    border: 0px;\r\n    padding: 10px 30px;\r\n    font-weight: 500;\r\n    background: #fe5863 !important;\r\n}\r\nbutton.btn.btn-secondary[_ngcontent-%COMP%]:hover {\r\n    background: #ed6b70 !important;\r\n}\r\nbutton.btn.btn-primary[_ngcontent-%COMP%]:hover, button.btn.btn-secondary[_ngcontent-%COMP%]:hover, button.btn.btn-secondary[_ngcontent-%COMP%]:focus {\r\n    background: #00008b;\r\n    color: #fff;\r\n}\r\n.btn-secondary[_ngcontent-%COMP%]:not(:disabled):not(.disabled).active:focus, .btn-secondary[_ngcontent-%COMP%]:not(:disabled):not(.disabled):active:focus, .show[_ngcontent-%COMP%] > .btn-secondary.dropdown-toggle[_ngcontent-%COMP%]:focus {\r\n    box-shadow: none !Important;\r\n}\r\n.btn-secondary.focus[_ngcontent-%COMP%], .btn-secondary[_ngcontent-%COMP%]:focus {\r\n    box-shadow: none;\r\n}\r\n.modal-footer[_ngcontent-%COMP%] {\r\n    border: 0;\r\n}\r\n.logo-img[_ngcontent-%COMP%] {\r\n    text-align: center;\r\n    width: 200px;\r\n    margin: 0 auto;\r\n    padding-bottom: 24px;\r\n}\r\n.modal-footer[_ngcontent-%COMP%] {\r\n    justify-content: center;\r\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hhcmVkL2NvbmZpcm1hdGlvbi1wb3B1cC9jb25maXJtYXRpb24tcG9wdXAuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUVJLGFBQWE7SUFFYixtQkFBbUI7SUFDbkIsNkJBQTZCO0lBQzdCLGNBQWM7QUFDbEI7QUFDQTtJQUNJLFdBQVc7QUFDZjtBQUNBO0lBQ0ksZ0JBQWdCO0lBQ2hCLFdBQVc7SUFDWCxnQkFBZ0I7QUFDcEI7QUFDQTtJQUNJLGtCQUFrQjtJQUNsQixlQUFlO0lBQ2YsbUJBQW1CO0FBQ3ZCO0FBQ0E7SUFDSSxlQUFlO0FBQ25CO0FBQ0E7SUFDSSxrQkFBa0I7SUFDbEIseUJBQXlCO0lBQ3pCLGdCQUFnQjtJQUNoQixlQUFlO0lBQ2YsZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxXQUFXO0lBQ1gseUJBQXlCO0lBQ3pCLFdBQVc7SUFDWCxrQkFBa0I7SUFDbEIsZ0JBQWdCO0lBQ2hCLDhCQUE4QjtBQUNsQztBQUNBO0lBQ0ksOEJBQThCO0FBQ2xDO0FBQ0E7SUFDSSxtQkFBbUI7SUFDbkIsV0FBVztBQUNmO0FBQ0E7SUFDSSwyQkFBMkI7QUFDL0I7QUFDQTtJQUNJLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksU0FBUztBQUNiO0FBQ0E7SUFDSSxrQkFBa0I7SUFDbEIsWUFBWTtJQUNaLGNBQWM7SUFDZCxvQkFBb0I7QUFDeEI7QUFDQTtJQUNJLHVCQUF1QjtBQUMzQiIsImZpbGUiOiJzcmMvYXBwL3NoYXJlZC9jb25maXJtYXRpb24tcG9wdXAvY29uZmlybWF0aW9uLXBvcHVwLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubW9kYWwtZGlhbG9nLWNlbnRlcmVkIHtcclxuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgbWluLWhlaWdodDogY2FsYygxMDAlIC0gMXJlbSk7XHJcbiAgICBtYXJnaW46IDAgYXV0bztcclxufVxyXG4ubW9kYWwtY29udGVudCB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxufVxyXG4ubW9kYWwtYm9keSBoNiB7XHJcbiAgICBtYXJnaW46IDAgMCAxNHB4O1xyXG4gICAgY29sb3I6ICMwMDA7XHJcbiAgICBmb250LXdlaWdodDogNTAwO1xyXG59XHJcbi5tb2RhbC1ib2R5IHAge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcclxufVxyXG4ubW9kYWwtZm9vdGVyIGJ1dHRvbiB7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbn1cclxuYnV0dG9uLmJ0bi5idG4tcHJpbWFyeSB7XHJcbiAgICBwYWRkaW5nOiAxMHB4IDMwcHg7XHJcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICAgIGZvbnQtc2l6ZTogMTRweDtcclxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbn1cclxuYnV0dG9uLmJ0bi5idG4tc2Vjb25kYXJ5IHtcclxuICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgIGJvcmRlcjogMHB4O1xyXG4gICAgcGFkZGluZzogMTBweCAzMHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICAgIGJhY2tncm91bmQ6ICNmZTU4NjMgIWltcG9ydGFudDtcclxufVxyXG5idXR0b24uYnRuLmJ0bi1zZWNvbmRhcnk6aG92ZXIge1xyXG4gICAgYmFja2dyb3VuZDogI2VkNmI3MCAhaW1wb3J0YW50O1xyXG59XHJcbmJ1dHRvbi5idG4uYnRuLXByaW1hcnk6aG92ZXIsIGJ1dHRvbi5idG4uYnRuLXNlY29uZGFyeTpob3ZlciwgYnV0dG9uLmJ0bi5idG4tc2Vjb25kYXJ5OmZvY3VzIHtcclxuICAgIGJhY2tncm91bmQ6ICMwMDAwOGI7XHJcbiAgICBjb2xvcjogI2ZmZjtcclxufVxyXG4uYnRuLXNlY29uZGFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsIC5idG4tc2Vjb25kYXJ5Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZTpmb2N1cywgLnNob3c+LmJ0bi1zZWNvbmRhcnkuZHJvcGRvd24tdG9nZ2xlOmZvY3VzIHtcclxuICAgIGJveC1zaGFkb3c6IG5vbmUgIUltcG9ydGFudDtcclxufVxyXG4uYnRuLXNlY29uZGFyeS5mb2N1cywgLmJ0bi1zZWNvbmRhcnk6Zm9jdXMge1xyXG4gICAgYm94LXNoYWRvdzogbm9uZTtcclxufVxyXG4ubW9kYWwtZm9vdGVyIHtcclxuICAgIGJvcmRlcjogMDtcclxufVxyXG4ubG9nby1pbWcge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgd2lkdGg6IDIwMHB4O1xyXG4gICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogMjRweDtcclxufVxyXG4ubW9kYWwtZm9vdGVyIHtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG59Il19 */"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ConfirmationPopupComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'app-confirmation-popup',
            templateUrl: './confirmation-popup.component.html',
            styleUrls: ['./confirmation-popup.component.css']
          }]
        }], function () {
          return [{
            type: _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_1__["NgbActiveModal"]
          }];
        }, {
          action: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          modalType: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          confirmText: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          headerText: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          firstButtonText: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          secondButtonText: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /***/

    },

    /***/
    "Y4NX":
    /*!*********************************************************!*\
      !*** ./src/app/shared/validations/ValidationService.ts ***!
      \*********************************************************/

    /*! exports provided: ValidationService */

    /***/
    function Y4NX(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ValidationService", function () {
        return ValidationService;
      });
      /* harmony import */


      var _ErrorMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./ErrorMessage */
      "aNAd");
      /* harmony import */


      var _CustomRegex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./CustomRegex */
      "iJAh");
      /* harmony import */


      var _constant_constant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../constant/constant */
      "8pUG");

      var ValidationService = /*#__PURE__*/function () {
        function ValidationService() {
          _classCallCheck(this, ValidationService);
        }

        _createClass(ValidationService, null, [{
          key: "getValidatorErrorMessage",

          /**
           * This function returns dynamic messages according input fields.
           * @param {string} validatorName
           * @param validatorValue
           * @param controlError
           * @param inputElmControl
           * @returns {any}
           */
          value: function getValidatorErrorMessage(validatorName, validatorValue, controlError, inputElmControl) {
            var message = controlError.message;
            var value = controlError.value;
            var config = {
              required: inputElmControl.value + ' is ' + _ErrorMessage__WEBPACK_IMPORTED_MODULE_0__["ErrorMessage"].required,
              invalidEmailAddress: _ErrorMessage__WEBPACK_IMPORTED_MODULE_0__["ErrorMessage"].invalidEmail,
              invalidPhoneNumber: _ErrorMessage__WEBPACK_IMPORTED_MODULE_0__["ErrorMessage"].invalidPhoneNumber
            };
            return config[validatorName];
          }
          /**
           * This function is uses for validate blank or empty input value.
           * @param control
           * @returns {any}
           */

        }, {
          key: "required",
          value: function required(control) {
            // RFC 2822 compliant regex
            if (!control || !control.value || !control.value || control.value.toString().trim() === '') {
              return {
                required: true,
                message: _ErrorMessage__WEBPACK_IMPORTED_MODULE_0__["ErrorMessage"].required,
                value: control.value
              };
            } else {
              return null;
            }
          }
          /**
           * email validation
           * @param control
           * @returns {any}
           */

        }, {
          key: "emailValidator",
          value: function emailValidator(control) {
            var isEmailRecipient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            // RFC 2822 compliant regex
            var emailValue;

            if (isEmailRecipient) {
              emailValue = control;
            } else {
              emailValue = control.value;
            }

            if (emailValue != null && emailValue !== undefined && emailValue.match(_CustomRegex__WEBPACK_IMPORTED_MODULE_1__["CustomRegex"].email)) {
              return null;
            } else {
              return {
                invalidEmailAddress: true
              };
            }
          }
          /**
            * This function is useed to check number values in input field.
            * @param control
            */

        }, {
          key: "allowNumberOnly",
          value: function allowNumberOnly(control) {
            var mobileNumber;
            mobileNumber = control.value;

            if (mobileNumber === undefined || mobileNumber === '' || mobileNumber && mobileNumber.match(_CustomRegex__WEBPACK_IMPORTED_MODULE_1__["CustomRegex"].allowNumberOnly)) {
              return null;
            } else {
              var controlName = ValidationService.getControlName(control);
              var errorString = null;

              if (controlName === _constant_constant__WEBPACK_IMPORTED_MODULE_2__["Constant"].CONTACT_NUMBER) {
                errorString = 'invalidPhoneNumber';
              } else {
                errorString = 'invalidNumber';
              }

              return _defineProperty({}, errorString, true);
            }
          }
          /**
            * get control name
            * @param control: AbstractControl
            */

        }, {
          key: "getControlName",
          value: function getControlName(control) {
            if (control) {
              var formGroup = control.parent.controls;
              return Object.keys(formGroup).find(function (name) {
                return control === formGroup[name];
              }) || null;
            }
          }
        }]);

        return ValidationService;
      }();
      /***/

    },

    /***/
    "aNAd":
    /*!****************************************************!*\
      !*** ./src/app/shared/validations/ErrorMessage.ts ***!
      \****************************************************/

    /*! exports provided: ErrorMessage */

    /***/
    function aNAd(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ErrorMessage", function () {
        return ErrorMessage;
      });

      var ErrorMessage = {
        required: 'required.',
        invalidEmail: 'Please enter valid email.',
        invalidPhoneNumber: 'Invalid mobile number'
      };
      /***/
    },

    /***/
    "biaL":
    /*!******************************************************!*\
      !*** ./src/app/shared/services/user/user.service.ts ***!
      \******************************************************/

    /*! exports provided: UserService */

    /***/
    function biaL(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "UserService", function () {
        return UserService;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _base_services_api_client_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../base-services/api-client.service */
      "Kjpl");

      var UserService = /*#__PURE__*/function () {
        function UserService(apiService) {
          _classCallCheck(this, UserService);

          this.apiService = apiService;
        }

        _createClass(UserService, [{
          key: "getUserByEmail",
          value: function getUserByEmail(emailObject) {
            return this.apiService.post('me', emailObject);
          }
        }, {
          key: "updateUser",
          value: function updateUser(user) {
            return this.apiService.post('user', user);
          }
        }]);

        return UserService;
      }();

      UserService.ɵfac = function UserService_Factory(t) {
        return new (t || UserService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_base_services_api_client_service__WEBPACK_IMPORTED_MODULE_1__["ApiService"]));
      };

      UserService.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: UserService,
        factory: UserService.ɵfac,
        providedIn: 'root'
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](UserService, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _base_services_api_client_service__WEBPACK_IMPORTED_MODULE_1__["ApiService"]
          }];
        }, null);
      })();
      /***/

    },

    /***/
    "fRyE":
    /*!***********************************************************************!*\
      !*** ./src/app/shared/terms-conditions/terms-conditions.component.ts ***!
      \***********************************************************************/

    /*! exports provided: TermsConditionsComponent */

    /***/
    function fRyE(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TermsConditionsComponent", function () {
        return TermsConditionsComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @ng-bootstrap/ng-bootstrap */
      "1kSV");

      var TermsConditionsComponent = /*#__PURE__*/function () {
        function TermsConditionsComponent(activeModal) {
          _classCallCheck(this, TermsConditionsComponent);

          this.activeModal = activeModal;
        }

        _createClass(TermsConditionsComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {}
          /**
           * Method used to close the modal
           */

        }, {
          key: "noPressed",
          value: function noPressed() {
            this.activeModal.close({
              isYesPressed: false
            });
          }
        }, {
          key: "yesPressed",
          value: function yesPressed() {
            this.activeModal.close({
              isYesPressed: true
            });
          }
        }]);

        return TermsConditionsComponent;
      }();

      TermsConditionsComponent.POP_UP_DEFAULT_PROPS = {
        backdrop: 'static',
        keyboard: false,
        centered: true
      };

      TermsConditionsComponent.ɵfac = function TermsConditionsComponent_Factory(t) {
        return new (t || TermsConditionsComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_1__["NgbActiveModal"]));
      };

      TermsConditionsComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: TermsConditionsComponent,
        selectors: [["app-terms-conditions"]],
        decls: 231,
        vars: 0,
        consts: [[1, "modal-dialog"], [1, "modal-header"], [1, "col-md-12"], [1, "logo-img"], ["alt", "logo-img", "src", "assets/images/logo.png"], [1, "modal-content"], [1, "modal-body", "popups"], ["tabindex", "0", 1, "content-data"], [1, "row"], [1, "modal-footer"], ["type", "button", 1, "btn", "btn-secondary", 3, "click"]],
        template: function TermsConditionsComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](4, "img", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "div", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "div", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "div", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](8, "div", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "h3");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](11, "OUR DATA & PRIVACY NOTICE");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](12, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](13, "MMOB Limited (\u201CMMOB,\u201D \u201Cwe,\u201D \u201Cus\u201D or \u201Cour\u201D) are committed to protecting and respecting your privacy and understand how important that is for you. We collect, use and share information about you in accordance with this Notice. This Notice is important, and you should read it carefully in conjunction with our Terms of Service. Your continued use of our services, whether through our website, our app or otherwise, indicates that you acknowledge the use of your personal data by us and other parties as set out below. We may make changes to this Notice from time to time and you should regularly review this page. If you do not agree with this Notice, then you should stop using the website and contact us to delete your account. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](14, "h6");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](15, "Data Controller");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](16, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](17, "The data controller is MMOB Ltd. We are a company a company registered in England and Wales with company number 12570147 whose registered office is at 82 High Street, Goldborne, Warrington WA3 3DA. You can email us at contact@mmob.com or write to us at Level 39, 1 Canada Square, London E15 5AB.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](18, "h6");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](19, "What data do we expect to hold about you?");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](20, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](21, "In the normal course of our relationship we expect to collect the following information about you:");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](22, "ul");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](23, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](24, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](25, "Details about you:");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](26, " your name, address, your date of birth and contact details. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](27, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](28, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](29, "Details about your payments and (where we provide account information services) your finances:");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](30, " the institutions you bank with, account details, financial transaction data, how you categorise your transactions, direct debits and standing orders, payees and payment beneficiaries. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](31, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](32, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](33, "Details from the services we provide to you:");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](34, " the profile we create about you, the payment transactions that you undertake, and the products or services that you interact with through the Marketplace.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](35, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](36, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](37, "Details of the consent you provide: ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](38, "the date and time at which you provide us with your consent in relation to the services we provide and what that consent relates to. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](39, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](40, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](41, "Details about your device(s): ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](42, "the type of device you are using, its operating system, your browser and browser settings, IP address, language settings, usage statistics and other technical information such as event logs.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](43, "h5");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](44, "Where do we get the data we hold about you?");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](45, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](46, "From information you give to us");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](47, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](48, "We receive and collect data from you when you fill in forms on the website or through our mobile site, such as when you register for an account or if you contact us through phone, email or otherwise. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](49, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](50, "From information we collect about you");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](51, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](52, "When you visit our website we automatically collect information about your computer, your IP address, geographical location, information about your visit and how you use our site. For more information on this you should read more about the use of cookies below.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](53, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](54, "From information third parties give to us");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](55, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](56, "We may get information about you from our partners and affiliate services or through other third parties such as advertising networks, search engine providers, analytics providers, and social networking sites.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](57, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](58, "If you have accessed MMOB through another service, that service may provide us with personal information to allow us to integrate our offering and your user journey.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](59, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](60, "We supplement that data that you may give to use from commercially available databases. These sources of information may relate to you individually (for example a search for anti-money laundering purposes). ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](61, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](62, "Financial transaction data");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](63, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](64, "You may explicitly choose to securely share financial transaction data with us, in which case we will obtain this from your bank or account provider. You can withdraw your consent at any time but, if you do, we will not be able to provide our account information services to you.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](65, "h5");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](66, "How do we use your personal data in providing our services?");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](67, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](68, "The grounds on which we process your data are:");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](69, "ul");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](70, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](71, "To allow us to perform the contract we have with you: to provide you with the services you request from us, customised to your preferences and enable you to purchase products and services from third parties.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](72, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](73, "To comply with our legal obligations: we are required to keep proper records about our payment services; we have duties to prevent financial crime, including money laundering and fraud.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](74, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](75, "Your explicit consent: where you agree to use our payment initiation service or our account information services. You can withdraw consent at any time. We use your financial transaction data to pre-populate profile information, to calculate and categorise your income and expenditure, and to assess your financial needs and requirements.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](76, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](77, "To pursue our legitimate interests: to identify you and administer your account(s) and for our internal purposes, examples of which are set out below.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](78, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](79, "Information about the services you use");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](80, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](81, "We will use some of your personal data to track the services you use through our website, to validate the data provided to us by our partners, and for auditing commission that may become due to us on any product or service you purchase.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](82, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](83, "Service emails");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](84, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](85, "After registering with us, we will send you emails to confirm details of important actions you make through our site and when there are changes to our Terms of Use, or our policies, or if we need to discuss your account. You cannot opt out of receiving these emails, but we will stop if you close your account.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](86, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](87, "Marketing");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](88, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](89, "We will use your information to keep you informed (subject to your expressed preferences) by [post,] [telephone,] [SMS,] email or other electronic means such as via social and digital media about current and new products, services, offers and promotions which may be of interest to you. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](90, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](91, "We may utilise a third-party software and storage solution to analyse the personal data that you have provided to us in order to ensure that the marketing that you receive is as relevant and beneficial to you as possible. We retain full ownership of your personal data and ensure that it is secure at all times.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](92, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](93, "If you are not happy for your personal data to be used in this way, you can manage your preferences through your account or unsubscribe at any time to remove your details from our contact list. If you have further queries with regards to your personal data, please feel free to contact us at contact@mmob.com or write to us at Level 39, 1 Canada Square, London E15 5AB.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](94, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](95, "Market and statistical analysis");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](96, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](97, "We use your personal data to carry out market research, statistical analysis and behavioural analysis, on a personalised or aggregated basis. This research and analysis may assist us in improving our website and the services offered to you or other individuals in the future. We may produce insights from aggregated information which does not identify you and in no longer classed as personal data which may have value to third parties. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](98, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](99, "Improvements to profiling");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](100, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](101, "We use automated tagging of transactions. We do not consider that our use of profiling gives rise to a legal or significant effect. To improve our profiling and the quality of the advice that we give to our customers, we may use deidentified financial data or profiles to train our algorithms.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](102, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](103, "Third party processing");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](104, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](105, "We use third parties to process personal information on our behalf. Where third parties process your personal information, we will ensure that they have the necessary high standards of protection in place to ensure you data is secure and used only in accordance with this Notice. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](106, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](107, "Prevention of fraud and financial crime");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](108, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](109, "We may carry out analysis and research using your personal data to prevent or detect fraud or other financial crime.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](110, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](111, "Business continuity");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](112, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](113, "In the event of an interruption or cessation of our business, we need to ensure that we can implement our business continuity procedures (for example, we may need to rebuild our IT systems), or wind down planning to protect your interests. This may involve the processing of your personal data, including a transfer to an alternative service provider.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](114, "h5");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](115, "How do our partners use your personal data?");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](116, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](117, "We work with some carefully selected partners who use your personal data to enable us to deliver our services to you, and to meet their own legal and regulatory requirements. In particular, we would draw your attention to the following: ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](118, "ul");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](119, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](120, "You may access MMOB through a third-party site, marketplace or application, such as your bank, into which our service is integrated or supplied through. To improve your use and enjoyment of those other services, we may share some of your data with that third-party.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](121, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](122, "TrueLayer Limited is a technical service provider that helps you to connect your bank, initiate payments and share financial transaction data with MMOB in a safe and secure manner.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](123, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](124, "We may undertake \u201Csoft\u201D checks with a credit reference agency as a means of validating certain personal information about you.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](125, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](126, "We may be asked to provide personal data to the Financial Conduct Authority or the Financial Ombudsman Service as part of our regulatory obligations.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](127, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](128, "If you purchase products or services through the marketplace we may supply the product or service provider with your name, address, and contact details as well as other information to help them provide you with the product or services you request.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](129, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](130, "Our professional advisers, such as our lawyers and auditors, may need access to personal data but they will always be subject to professional and/or contractual obligations of confidentiality.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](131, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](132, "Our partners may use the personal data you provide for purposes such as fraud prevention or for internal analysis (such as monitoring customer demographics, market trends or pricing analysis). In certain circumstances we are obliged to report information to law enforcement agencies. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](133, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](134, "We are not responsible for the privacy policies or practices of our partners (or other websites you may click though to from our website). You should ensure you read and are fully aware of the terms and conditions and the privacy policies of third-party websites.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](135, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](136, "We may also transfer your personal data to generic service providers who control or process personal data on our behalf to enable the efficient technical and logistical provision of our services. These service providers supply us with cloud data storage, data security services, customer relationship management software, and support ticketing services. We may substitute a technical or logistical service provider from time to time. Such parties are generally not permitted to use your personal data for any other purposes than for what your personal data was collected, and we require them to act consistently with applicable laws and this Notice as well as to use appropriate security measures to protect your personal data");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](137, "h5");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](138, "Do we pass personal data to other third parties?");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](139, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](140, "Except as set out in this Notice, we will not disclose any of your personal data to other parties without your explicit and freely given consent, unless we are legally required to do so by (for example, a court order, for the purposes of prevention of fraud or other crime, or by a competent regulator). ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](141, "h5");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](142, "Transferring your personal data outside of the European Economic Area (\"EEA\")");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](143, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](144, "Where information is transferred outside the European Economic Area (the \u201CEEA\u201D), Switzerland or the United Kingdom and where this is to a stakeholder or vendor in a country that is not subject to an adequacy decision by the EU Commission, data is adequately protected by approved standard contractual clauses or a vendor's Binding Corporate Rules.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](145, "h5");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](146, "Confidentiality");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](147, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](148, "We will treat all your personal data as private and confidential. We comply with and are registered under the data protection laws in the United Kingdom and take all reasonable care to prevent any unauthorised access to your personal data. Other than under the terms of this Notice, we will not disclose any personal data about you. Please be aware however that under certain circumstances we may be subject to a legal obligation to 20-0269 - MMOB DRAFT Privacy Notice v 1.0 (002) disclose personal data about you, or there may be a public duty to disclose that personal data.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](149, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](150, "Should you decide to complain about the service we have provided to you, we may be obliged to forward details about your complaint, including your personal data, to the relevant ombudsman. You can be assured that they are similarly obliged to adhere to data protection legislation and to keep your personal data strictly confidential.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](151, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](152, "If you are not satisfied with our response or believe we are processing your personal data not in accordance with the law, you can complain to the Information Commissioner\u2019s Office (ICO), contact details of which are:");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](153, "ul");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](154, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](155, "Serious breaches should be reported to the ICO using its security breach helpline on 0303 123 1113 (open Monday to Friday, 9am to 5pm). Select option 3 to speak to staff, who will record the breach and give you advice about what to do next.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](156, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](157, "If you would like to report a breach in writing you can send it by post to the office address Information Commissioner\u2019s Office, Wycliffe House, Water Lane, Wilmslow, Cheshire SK9 5AF. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](158, "h5");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](159, "Your rights");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](160, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](161, "Under the terms of the data protection legislation you have a number of rights. You may:");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](162, "ul");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](163, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](164, "ask of a copy of the information, or some of the information, that we hold about you (rights of access and portability);");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](165, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](166, "ask us to correct or remove any information about you that we hold (rights to rectification and erasure);");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](167, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](168, "ask us to stop processing or restrict the processing of information that we hold about you (rights to restrict and object to processing, including profiling). ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](169, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](170, "If you cannot do any of these things this through \u2018My Account\u2019, you may ask us to do so by writing to the Privacy Officer, by email (contact@mmob.com) or to the correspondence address above, and we will do this free of charge. We will respond to your request within 30 days");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](171, "h5");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](172, "Changing your information and deleting your account");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](173, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](174, "If you need to change any of your personal information you should log in to your account to make the necessary changes.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](175, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](176, "If you want to stop MMOB accessing to your financial transaction data, you may revoke consent within \u2018My Account\u2019. You may also revoke authorisation directly with your account provider.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](177, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](178, "If you want to stop using MMOB, please email contact@mmob.com using your registered email address and we will close your account. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](179, "h5");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](180, "How long we keep your data for?");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](181, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](182, "We have procedures in place to ensure that information is not kept for longer than is necessary but in summary:");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](183, "ul");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](184, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](185, " we will retain personal data about you for as long as your account is active;");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](186, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](187, "after termination, we will retain only that information required for so long as it is necessary to comply with our legal or regulatory obligations, to resolve any dispute or to enforce our agreements. If we do need to retain information after termination, we will ensure that your data is archived in a way that access is restricted; and");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](188, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](189, "the maximum time that we envisage retaining any information is five years following termination. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](190, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](191, "Subject to our legal or regulatory obligations, if you ask us to delete any data, it is promptly deleted or otherwise rendered unusable from within our systems and we will no longer have any access to that data. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](192, "h5");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](193, "Use of cookies");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](194, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](195, "A cookie is a small piece of code, sent from a website sends to a user's internet browser, which allows that website to track the user's previous activity when they return to that website. This allows us to provide you with the experience that you expect from us and lets us continually improve our service.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](196, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](197, "You can block cookies by changing the settings on your browser, but if you do you will not be able to access all or parts of our website.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](198, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](199, "The types of cookies we use are:");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](200, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](201, "Strictly necessary cookies");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](202, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](203, "These are cookies that are required for the operation of our website. They include, for example, cookies that enable you to log into secure areas of our website, use a shopping cart or make use of e-billing services");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](204, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](205, "Analytical/performance cookies");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](206, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](207, "They allow us to recognise and count the number of visitors and to see how visitors move around our website when they are using it. This helps us to improve the way our website works, for example, by ensuring that users are finding what they are looking for easily.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](208, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](209, "Functionality cookies");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](210, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](211, "These are used to recognise you when you return to our website. This enables us to personalise our content for you, greet you by name and remember your preferences (for example, your choice of language or region).");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](212, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](213, "Targeting cookies");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](214, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](215, "These cookies record your visit to our website, the pages you have visited and the links you have followed. We will use this information to make our website and the advertising displayed on it more relevant to your interests. We may also share this information with third parties for this purpose.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](216, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](217, "We do not have any control over the use of cookies by third parties, including our partners and affiliates. To manage cookies from third party websites you will need to visit their site to adjust your settings.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](218, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](219, "If you want more information about how cookies operate, or how to manage them, please visit AboutCookies. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](220, "h5");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](221, "Law");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](222, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](223, "This Data & Privacy Notice is subject to the laws of England and Wales and the exclusive jurisdiction of their Courts.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](224, "h5");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](225, "Version");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](226, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](227, "This Data & Privacy Notice was last updated October 2020");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](228, "div", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](229, "button", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function TermsConditionsComponent_Template_button_click_229_listener() {
              return ctx.yesPressed();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](230, "OK");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }
        },
        styles: [".logo-img[_ngcontent-%COMP%] {\r\n    width: 200px;\r\n    text-align: center;\r\n    margin: 0 auto;\r\n}\r\n.modal-body[_ngcontent-%COMP%] {\r\n    position: relative;\r\n    flex: 1 1 auto;\r\n    padding: 15px 0px;\r\n}\r\n.modal-body[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%] {\r\n    font-size: 18px;\r\n    margin-top: 20px;\r\n    font-weight: 600;\r\n    margin-bottom: 5px;\r\n}\r\n.modal-body[_ngcontent-%COMP%]   h6[_ngcontent-%COMP%] {\r\n    font-size: 16px;\r\n    font-weight: 600;\r\n    margin: 10px 10px 10px 0px;\r\n}\r\n.modal-dialog[_ngcontent-%COMP%] {\r\n    margin: 0px auto;\r\n}\r\n.modal-body.popups[_ngcontent-%COMP%] {\r\n    height: 450px;\r\n}\r\n.content-data[_ngcontent-%COMP%] {\r\n    padding: 10px 20px;\r\n    text-align: justify;\r\n}\r\n.modal-content[_ngcontent-%COMP%] {\r\n    border: 0px;\r\n}\r\nh3[_ngcontent-%COMP%] {\r\n    font-size: 20px;\r\n    margin-bottom: 10px;\r\n    font-weight: 800;\r\n}\r\nbutton.btn.btn-secondary[_ngcontent-%COMP%] {\r\n    background: black;\r\n    margin: 0 auto;\r\n    padding: 7px 36px;\r\n    color: #fff;\r\n}\r\nli[_ngcontent-%COMP%] {\r\n    list-style: circle;\r\n}\r\nul[_ngcontent-%COMP%] {\r\n    padding-left: 15px;\r\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hhcmVkL3Rlcm1zLWNvbmRpdGlvbnMvdGVybXMtY29uZGl0aW9ucy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixjQUFjO0FBQ2xCO0FBQ0E7SUFDSSxrQkFBa0I7SUFDbEIsY0FBYztJQUNkLGlCQUFpQjtBQUNyQjtBQUNBO0lBQ0ksZUFBZTtJQUNmLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsa0JBQWtCO0FBQ3RCO0FBQ0E7SUFDSSxlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLDBCQUEwQjtBQUM5QjtBQUNBO0lBQ0ksZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxhQUFhO0FBQ2pCO0FBQ0E7SUFDSSxrQkFBa0I7SUFDbEIsbUJBQW1CO0FBQ3ZCO0FBQ0E7SUFDSSxXQUFXO0FBQ2Y7QUFDQTtJQUNJLGVBQWU7SUFDZixtQkFBbUI7SUFDbkIsZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxpQkFBaUI7SUFDakIsY0FBYztJQUNkLGlCQUFpQjtJQUNqQixXQUFXO0FBQ2Y7QUFDQTtJQUNJLGtCQUFrQjtBQUN0QjtBQUNBO0lBQ0ksa0JBQWtCO0FBQ3RCIiwiZmlsZSI6InNyYy9hcHAvc2hhcmVkL3Rlcm1zLWNvbmRpdGlvbnMvdGVybXMtY29uZGl0aW9ucy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmxvZ28taW1nIHtcclxuICAgIHdpZHRoOiAyMDBweDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIG1hcmdpbjogMCBhdXRvO1xyXG59XHJcbi5tb2RhbC1ib2R5IHtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIGZsZXg6IDEgMSBhdXRvO1xyXG4gICAgcGFkZGluZzogMTVweCAwcHg7XHJcbn1cclxuLm1vZGFsLWJvZHkgaDUge1xyXG4gICAgZm9udC1zaXplOiAxOHB4O1xyXG4gICAgbWFyZ2luLXRvcDogMjBweDtcclxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA1cHg7XHJcbn1cclxuLm1vZGFsLWJvZHkgaDYge1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICAgIG1hcmdpbjogMTBweCAxMHB4IDEwcHggMHB4O1xyXG59XHJcbi5tb2RhbC1kaWFsb2cge1xyXG4gICAgbWFyZ2luOiAwcHggYXV0bztcclxufVxyXG4ubW9kYWwtYm9keS5wb3B1cHMge1xyXG4gICAgaGVpZ2h0OiA0NTBweDtcclxufVxyXG4uY29udGVudC1kYXRhIHtcclxuICAgIHBhZGRpbmc6IDEwcHggMjBweDtcclxuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XHJcbn1cclxuLm1vZGFsLWNvbnRlbnQge1xyXG4gICAgYm9yZGVyOiAwcHg7XHJcbn1cclxuaDMge1xyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxuICAgIGZvbnQtd2VpZ2h0OiA4MDA7XHJcbn1cclxuYnV0dG9uLmJ0bi5idG4tc2Vjb25kYXJ5IHtcclxuICAgIGJhY2tncm91bmQ6IGJsYWNrO1xyXG4gICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICBwYWRkaW5nOiA3cHggMzZweDtcclxuICAgIGNvbG9yOiAjZmZmO1xyXG59XHJcbmxpIHtcclxuICAgIGxpc3Qtc3R5bGU6IGNpcmNsZTtcclxufVxyXG51bCB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDE1cHg7XHJcbn1cclxuIl19 */"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](TermsConditionsComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'app-terms-conditions',
            templateUrl: './terms-conditions.component.html',
            styleUrls: ['./terms-conditions.component.css']
          }]
        }], function () {
          return [{
            type: _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_1__["NgbActiveModal"]
          }];
        }, null);
      })();
      /***/

    },

    /***/
    "iJAh":
    /*!***************************************************!*\
      !*** ./src/app/shared/validations/CustomRegex.ts ***!
      \***************************************************/

    /*! exports provided: CustomRegex */

    /***/
    function iJAh(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CustomRegex", function () {
        return CustomRegex;
      });
      /**
       * All Regex for validation declared here.
       */


      var CustomRegex = {
        email: /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
        allowNumberOnly: /^\+?\d{10,15}$/,
        postcode: /^[A-Za-z0-9- ]{4,10}$/,
        staff: /^([1-9]\d*)$/,
        allowAlphaNumericSpace: /^[A-Za-z- ]+$/,
        space: /^\S*$/,
        positiveNumberUptoTwoDecimal: /^\s*(?=.*[1-9])\d*(?:\.\d{1,2})?\s*$/,
        alphaNumericPassword: /(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{6,100}$/
      };
      /***/
    },

    /***/
    "ieeg":
    /*!***************************************************!*\
      !*** ./src/app/shared/iframe/iframe.component.ts ***!
      \***************************************************/

    /*! exports provided: IframeComponent */

    /***/
    function ieeg(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "IframeComponent", function () {
        return IframeComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/platform-browser */
      "jhN1");

      var IframeComponent = /*#__PURE__*/function () {
        function IframeComponent(sanitizer) {
          _classCallCheck(this, IframeComponent);

          this.sanitizer = sanitizer;
          this.name = 'Set iframe source';
          this.url = "set default url";
        }

        _createClass(IframeComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            this.urlSafe = this.sanitizer.bypassSecurityTrustResourceUrl(this.url);
          }
        }]);

        return IframeComponent;
      }();

      IframeComponent.ɵfac = function IframeComponent_Factory(t) {
        return new (t || IframeComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["DomSanitizer"]));
      };

      IframeComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: IframeComponent,
        selectors: [["app-iframe"]],
        inputs: {
          name: "name",
          url: "url",
          urlSafe: "urlSafe"
        },
        decls: 1,
        vars: 1,
        consts: [[1, "iframe", 3, "src"]],
        template: function IframeComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "iframe", 0);
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("src", ctx.urlSafe, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeResourceUrl"]);
          }
        },
        styles: [".iframe[_ngcontent-%COMP%] {\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    border: 2px;\r\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hhcmVkL2lmcmFtZS9pZnJhbWUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLE1BQU07SUFDTixPQUFPO0lBQ1AsV0FBVztJQUNYLFlBQVk7SUFDWixXQUFXO0FBQ2YiLCJmaWxlIjoic3JjL2FwcC9zaGFyZWQvaWZyYW1lL2lmcmFtZS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmlmcmFtZSB7XHJcbiAgICB0b3A6IDA7XHJcbiAgICBsZWZ0OiAwO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICBib3JkZXI6IDJweDtcclxufVxyXG4iXX0= */"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](IframeComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'app-iframe',
            templateUrl: './iframe.component.html',
            styleUrls: ['./iframe.component.css']
          }]
        }], function () {
          return [{
            type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["DomSanitizer"]
          }];
        }, {
          name: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          url: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          urlSafe: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /***/

    },

    /***/
    "j2+P":
    /*!**************************************************************************************!*\
      !*** ./src/app/shared/services/kyc-verification-service/kyc-verification.service.ts ***!
      \**************************************************************************************/

    /*! exports provided: KycVerificationService */

    /***/
    function j2P(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "KycVerificationService", function () {
        return KycVerificationService;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _base_services_api_client_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../base-services/api-client.service */
      "Kjpl");

      var KycVerificationService = /*#__PURE__*/function () {
        function KycVerificationService(apiService) {
          _classCallCheck(this, KycVerificationService);

          this.apiService = apiService;
        }

        _createClass(KycVerificationService, [{
          key: "verifyIdProof",
          value: function verifyIdProof(verificationData) {
            return this.apiService.post('idProofVerification', verificationData);
          }
        }, {
          key: "verifyAddressProof",
          value: function verifyAddressProof(verificationData) {
            return this.apiService.post('addressProofVerification', verificationData);
          }
        }, {
          key: "checkKycStatus",
          value: function checkKycStatus(data) {
            return this.apiService.post('checkKyc', data);
          }
        }]);

        return KycVerificationService;
      }();

      KycVerificationService.ɵfac = function KycVerificationService_Factory(t) {
        return new (t || KycVerificationService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_base_services_api_client_service__WEBPACK_IMPORTED_MODULE_1__["ApiService"]));
      };

      KycVerificationService.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: KycVerificationService,
        factory: KycVerificationService.ɵfac,
        providedIn: 'root'
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](KycVerificationService, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _base_services_api_client_service__WEBPACK_IMPORTED_MODULE_1__["ApiService"]
          }];
        }, null);
      })();
      /***/

    },

    /***/
    "tk/3":
    /*!********************************************************************!*\
      !*** ./node_modules/@angular/common/__ivy_ngcc__/fesm2015/http.js ***!
      \********************************************************************/

    /*! exports provided: HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, ɵHttpInterceptingHandler, ɵangular_packages_common_http_http_a, ɵangular_packages_common_http_http_b, ɵangular_packages_common_http_http_c, ɵangular_packages_common_http_http_d, ɵangular_packages_common_http_http_e, ɵangular_packages_common_http_http_f, ɵangular_packages_common_http_http_g, ɵangular_packages_common_http_http_h */

    /***/
    function tk3(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HTTP_INTERCEPTORS", function () {
        return HTTP_INTERCEPTORS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HttpBackend", function () {
        return HttpBackend;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HttpClient", function () {
        return HttpClient;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HttpClientJsonpModule", function () {
        return HttpClientJsonpModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HttpClientModule", function () {
        return HttpClientModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HttpClientXsrfModule", function () {
        return HttpClientXsrfModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HttpErrorResponse", function () {
        return HttpErrorResponse;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HttpEventType", function () {
        return HttpEventType;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HttpHandler", function () {
        return HttpHandler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HttpHeaderResponse", function () {
        return HttpHeaderResponse;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HttpHeaders", function () {
        return HttpHeaders;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HttpParams", function () {
        return HttpParams;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HttpRequest", function () {
        return HttpRequest;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HttpResponse", function () {
        return HttpResponse;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HttpResponseBase", function () {
        return HttpResponseBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HttpUrlEncodingCodec", function () {
        return HttpUrlEncodingCodec;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HttpXhrBackend", function () {
        return HttpXhrBackend;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HttpXsrfTokenExtractor", function () {
        return HttpXsrfTokenExtractor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "JsonpClientBackend", function () {
        return JsonpClientBackend;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "JsonpInterceptor", function () {
        return JsonpInterceptor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "XhrFactory", function () {
        return XhrFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵHttpInterceptingHandler", function () {
        return HttpInterceptingHandler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_http_http_a", function () {
        return NoopInterceptor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_http_http_b", function () {
        return JsonpCallbackContext;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_http_http_c", function () {
        return jsonpCallbackContext;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_http_http_d", function () {
        return BrowserXhr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_http_http_e", function () {
        return XSRF_COOKIE_NAME;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_http_http_f", function () {
        return XSRF_HEADER_NAME;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_http_http_g", function () {
        return HttpXsrfCookieExtractor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_http_http_h", function () {
        return HttpXsrfInterceptor;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /**
       * @license Angular v9.0.7
       * (c) 2010-2020 Google LLC. https://angular.io/
       * License: MIT
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: packages/common/http/src/backend.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a
       * `HttpResponse`.
       *
       * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the
       * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the
       * `HttpBackend`.
       *
       * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.
       *
       * \@publicApi
       * @abstract
       */


      var HttpHandler = function HttpHandler() {
        _classCallCheck(this, HttpHandler);
      };

      if (false) {}
      /**
       * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.
       *
       * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.
       *
       * When injected, `HttpBackend` dispatches requests directly to the backend, without going
       * through the interceptor chain.
       *
       * \@publicApi
       * @abstract
       */


      var HttpBackend = function HttpBackend() {
        _classCallCheck(this, HttpBackend);
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/common/http/src/headers.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @record
       */


      function Update() {}

      if (false) {}
      /**
       * Represents the header configuration options for an HTTP request.
       * Instances are immutable. Modifying methods return a cloned
       * instance with the change. The original object is never changed.
       *
       * \@publicApi
       */


      var HttpHeaders = /*#__PURE__*/function () {
        /**
         * Constructs a new HTTP header object with the given values.
         * @param {?=} headers
         */
        function HttpHeaders(headers) {
          var _this84 = this;

          _classCallCheck(this, HttpHeaders);

          /**
           * Internal map of lowercased header names to the normalized
           * form of the name (the form seen first).
           */
          this.normalizedNames = new Map();
          /**
           * Queued updates to be materialized the next initialization.
           */

          this.lazyUpdate = null;

          if (!headers) {
            this.headers = new Map();
          } else if (typeof headers === 'string') {
            this.lazyInit =
            /**
            * @return {?}
            */
            function () {
              _this84.headers = new Map();
              headers.split('\n').forEach(
              /**
              * @param {?} line
              * @return {?}
              */
              function (line) {
                /** @type {?} */
                var index = line.indexOf(':');

                if (index > 0) {
                  /** @type {?} */
                  var name = line.slice(0, index);
                  /** @type {?} */

                  var key = name.toLowerCase();
                  /** @type {?} */

                  var value = line.slice(index + 1).trim();

                  _this84.maybeSetNormalizedName(name, key);

                  if (_this84.headers.has(key)) {
                    /** @type {?} */
                    _this84.headers.get(key).push(value);
                  } else {
                    _this84.headers.set(key, [value]);
                  }
                }
              });
            };
          } else {
            this.lazyInit =
            /**
            * @return {?}
            */
            function () {
              _this84.headers = new Map();
              Object.keys(headers).forEach(
              /**
              * @param {?} name
              * @return {?}
              */
              function (name) {
                /** @type {?} */
                var values = headers[name];
                /** @type {?} */

                var key = name.toLowerCase();

                if (typeof values === 'string') {
                  values = [values];
                }

                if (values.length > 0) {
                  _this84.headers.set(key, values);

                  _this84.maybeSetNormalizedName(name, key);
                }
              });
            };
          }
        }
        /**
         * Checks for existence of a given header.
         *
         * @param {?} name The header name to check for existence.
         *
         * @return {?} True if the header exists, false otherwise.
         */


        _createClass(HttpHeaders, [{
          key: "has",
          value: function has(name) {
            this.init();
            return this.headers.has(name.toLowerCase());
          }
          /**
           * Retrieves the first value of a given header.
           *
           * @param {?} name The header name.
           *
           * @return {?} The value string if the header exists, null otherwise
           */

        }, {
          key: "get",
          value: function get(name) {
            this.init();
            /** @type {?} */

            var values = this.headers.get(name.toLowerCase());
            return values && values.length > 0 ? values[0] : null;
          }
          /**
           * Retrieves the names of the headers.
           *
           * @return {?} A list of header names.
           */

        }, {
          key: "keys",
          value: function keys() {
            this.init();
            return Array.from(this.normalizedNames.values());
          }
          /**
           * Retrieves a list of values for a given header.
           *
           * @param {?} name The header name from which to retrieve values.
           *
           * @return {?} A string of values if the header exists, null otherwise.
           */

        }, {
          key: "getAll",
          value: function getAll(name) {
            this.init();
            return this.headers.get(name.toLowerCase()) || null;
          }
          /**
           * Appends a new value to the existing set of values for a header
           * and returns them in a clone of the original instance.
           *
           * @param {?} name The header name for which to append the values.
           * @param {?} value The value to append.
           *
           * @return {?} A clone of the HTTP headers object with the value appended to the given header.
           */

        }, {
          key: "append",
          value: function append(name, value) {
            return this.clone({
              name: name,
              value: value,
              op: 'a'
            });
          }
          /**
           * Sets or modifies a value for a given header in a clone of the original instance.
           * If the header already exists, its value is replaced with the given value
           * in the returned object.
           *
           * @param {?} name The header name.
           * @param {?} value The value or values to set or overide for the given header.
           *
           * @return {?} A clone of the HTTP headers object with the newly set header value.
           */

        }, {
          key: "set",
          value: function set(name, value) {
            return this.clone({
              name: name,
              value: value,
              op: 's'
            });
          }
          /**
           * Deletes values for a given header in a clone of the original instance.
           *
           * @param {?} name The header name.
           * @param {?=} value The value or values to delete for the given header.
           *
           * @return {?} A clone of the HTTP headers object with the given value deleted.
           */

        }, {
          key: "delete",
          value: function _delete(name, value) {
            return this.clone({
              name: name,
              value: value,
              op: 'd'
            });
          }
          /**
           * @private
           * @param {?} name
           * @param {?} lcName
           * @return {?}
           */

        }, {
          key: "maybeSetNormalizedName",
          value: function maybeSetNormalizedName(name, lcName) {
            if (!this.normalizedNames.has(lcName)) {
              this.normalizedNames.set(lcName, name);
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "init",
          value: function init() {
            var _this85 = this;

            if (!!this.lazyInit) {
              if (this.lazyInit instanceof HttpHeaders) {
                this.copyFrom(this.lazyInit);
              } else {
                this.lazyInit();
              }

              this.lazyInit = null;

              if (!!this.lazyUpdate) {
                this.lazyUpdate.forEach(
                /**
                * @param {?} update
                * @return {?}
                */
                function (update) {
                  return _this85.applyUpdate(update);
                });
                this.lazyUpdate = null;
              }
            }
          }
          /**
           * @private
           * @param {?} other
           * @return {?}
           */

        }, {
          key: "copyFrom",
          value: function copyFrom(other) {
            var _this86 = this;

            other.init();
            Array.from(other.headers.keys()).forEach(
            /**
            * @param {?} key
            * @return {?}
            */
            function (key) {
              _this86.headers.set(key,
              /** @type {?} */
              other.headers.get(key));

              _this86.normalizedNames.set(key,
              /** @type {?} */
              other.normalizedNames.get(key));
            });
          }
          /**
           * @private
           * @param {?} update
           * @return {?}
           */

        }, {
          key: "clone",
          value: function clone(update) {
            /** @type {?} */
            var clone = new HttpHeaders();
            clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;
            clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);
            return clone;
          }
          /**
           * @private
           * @param {?} update
           * @return {?}
           */

        }, {
          key: "applyUpdate",
          value: function applyUpdate(update) {
            /** @type {?} */
            var key = update.name.toLowerCase();

            switch (update.op) {
              case 'a':
              case 's':
                /** @type {?} */
                var value =
                /** @type {?} */
                update.value;

                if (typeof value === 'string') {
                  value = [value];
                }

                if (value.length === 0) {
                  return;
                }

                this.maybeSetNormalizedName(update.name, key);
                /** @type {?} */

                var base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];
                base.push.apply(base, _toConsumableArray(value));
                this.headers.set(key, base);
                break;

              case 'd':
                /** @type {?} */
                var toDelete =
                /** @type {?} */
                update.value;

                if (!toDelete) {
                  this.headers["delete"](key);
                  this.normalizedNames["delete"](key);
                } else {
                  /** @type {?} */
                  var existing = this.headers.get(key);

                  if (!existing) {
                    return;
                  }

                  existing = existing.filter(
                  /**
                  * @param {?} value
                  * @return {?}
                  */
                  function (value) {
                    return toDelete.indexOf(value) === -1;
                  });

                  if (existing.length === 0) {
                    this.headers["delete"](key);
                    this.normalizedNames["delete"](key);
                  } else {
                    this.headers.set(key, existing);
                  }
                }

                break;
            }
          }
          /**
           * \@internal
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "forEach",
          value: function forEach(fn) {
            var _this87 = this;

            this.init();
            Array.from(this.normalizedNames.keys()).forEach(
            /**
            * @param {?} key
            * @return {?}
            */
            function (key) {
              return fn(
              /** @type {?} */
              _this87.normalizedNames.get(key),
              /** @type {?} */
              _this87.headers.get(key));
            });
          }
        }]);

        return HttpHeaders;
      }();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/common/http/src/params.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A codec for encoding and decoding parameters in URLs.
       *
       * Used by `HttpParams`.
       *
       * \@publicApi
       *
       * @record
       */


      function HttpParameterCodec() {}

      if (false) {}
      /**
       * Provides encoding and decoding of URL parameter and query-string values.
       *
       * Serializes and parses URL parameter keys and values to encode and decode them.
       * If you pass URL query parameters without encoding,
       * the query parameters can be misinterpreted at the receiving end.
       *
       *
       * \@publicApi
       */


      var HttpUrlEncodingCodec = /*#__PURE__*/function () {
        function HttpUrlEncodingCodec() {
          _classCallCheck(this, HttpUrlEncodingCodec);
        }

        _createClass(HttpUrlEncodingCodec, [{
          key: "encodeKey",

          /**
           * Encodes a key name for a URL parameter or query-string.
           * @param {?} key The key name.
           * @return {?} The encoded key name.
           */
          value: function encodeKey(key) {
            return standardEncoding(key);
          }
          /**
           * Encodes the value of a URL parameter or query-string.
           * @param {?} value The value.
           * @return {?} The encoded value.
           */

        }, {
          key: "encodeValue",
          value: function encodeValue(value) {
            return standardEncoding(value);
          }
          /**
           * Decodes an encoded URL parameter or query-string key.
           * @param {?} key The encoded key name.
           * @return {?} The decoded key name.
           */

        }, {
          key: "decodeKey",
          value: function decodeKey(key) {
            return decodeURIComponent(key);
          }
          /**
           * Decodes an encoded URL parameter or query-string value.
           * @param {?} value The encoded value.
           * @return {?} The decoded value.
           */

        }, {
          key: "decodeValue",
          value: function decodeValue(value) {
            return decodeURIComponent(value);
          }
        }]);

        return HttpUrlEncodingCodec;
      }();
      /**
       * @param {?} rawParams
       * @param {?} codec
       * @return {?}
       */


      function paramParser(rawParams, codec) {
        /** @type {?} */
        var map = new Map();

        if (rawParams.length > 0) {
          /** @type {?} */
          var params = rawParams.split('&');
          params.forEach(
          /**
          * @param {?} param
          * @return {?}
          */
          function (param) {
            /** @type {?} */
            var eqIdx = param.indexOf('=');

            var _ref17 = eqIdx == -1 ? [codec.decodeKey(param), ''] : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))],
                _ref18 = _slicedToArray(_ref17, 2),
                key = _ref18[0],
                val = _ref18[1];
            /** @type {?} */


            var list = map.get(key) || [];
            list.push(val);
            map.set(key, list);
          });
        }

        return map;
      }
      /**
       * @param {?} v
       * @return {?}
       */


      function standardEncoding(v) {
        return encodeURIComponent(v).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/gi, '$').replace(/%2C/gi, ',').replace(/%3B/gi, ';').replace(/%2B/gi, '+').replace(/%3D/gi, '=').replace(/%3F/gi, '?').replace(/%2F/gi, '/');
      }
      /**
       * @record
       */


      function Update$1() {}

      if (false) {}
      /**
       * Options used to construct an `HttpParams` instance.
       *
       * \@publicApi
       * @record
       */


      function HttpParamsOptions() {}

      if (false) {}
      /**
       * An HTTP request/response body that represents serialized parameters,
       * per the MIME type `application/x-www-form-urlencoded`.
       *
       * This class is immutable; all mutation operations return a new instance.
       *
       * \@publicApi
       */


      var HttpParams = /*#__PURE__*/function () {
        /**
         * @param {?=} options
         */
        function HttpParams() {
          var _this88 = this;

          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] :
          /** @type {?} */
          {};

          _classCallCheck(this, HttpParams);

          this.updates = null;
          this.cloneFrom = null;
          this.encoder = options.encoder || new HttpUrlEncodingCodec();

          if (!!options.fromString) {
            if (!!options.fromObject) {
              throw new Error("Cannot specify both fromString and fromObject.");
            }

            this.map = paramParser(options.fromString, this.encoder);
          } else if (!!options.fromObject) {
            this.map = new Map();
            Object.keys(options.fromObject).forEach(
            /**
            * @param {?} key
            * @return {?}
            */
            function (key) {
              /** @type {?} */
              var value =
              /** @type {?} */
              options.fromObject[key];

              /** @type {?} */
              _this88.map.set(key, Array.isArray(value) ? value : [value]);
            });
          } else {
            this.map = null;
          }
        }
        /**
         * Reports whether the body includes one or more values for a given parameter.
         * @param {?} param The parameter name.
         * @return {?} True if the parameter has one or more values,
         * false if it has no value or is not present.
         */


        _createClass(HttpParams, [{
          key: "has",
          value: function has(param) {
            this.init();
            return (
              /** @type {?} */
              this.map.has(param)
            );
          }
          /**
           * Retrieves the first value for a parameter.
           * @param {?} param The parameter name.
           * @return {?} The first value of the given parameter,
           * or `null` if the parameter is not present.
           */

        }, {
          key: "get",
          value: function get(param) {
            this.init();
            /** @type {?} */

            var res =
            /** @type {?} */
            this.map.get(param);
            return !!res ? res[0] : null;
          }
          /**
           * Retrieves all values for a  parameter.
           * @param {?} param The parameter name.
           * @return {?} All values in a string array,
           * or `null` if the parameter not present.
           */

        }, {
          key: "getAll",
          value: function getAll(param) {
            this.init();
            return (
              /** @type {?} */
              this.map.get(param) || null
            );
          }
          /**
           * Retrieves all the parameters for this body.
           * @return {?} The parameter names in a string array.
           */

        }, {
          key: "keys",
          value: function keys() {
            this.init();
            return Array.from(
            /** @type {?} */
            this.map.keys());
          }
          /**
           * Appends a new value to existing values for a parameter.
           * @param {?} param The parameter name.
           * @param {?} value The new value to add.
           * @return {?} A new body with the appended value.
           */

        }, {
          key: "append",
          value: function append(param, value) {
            return this.clone({
              param: param,
              value: value,
              op: 'a'
            });
          }
          /**
           * Replaces the value for a parameter.
           * @param {?} param The parameter name.
           * @param {?} value The new value.
           * @return {?} A new body with the new value.
           */

        }, {
          key: "set",
          value: function set(param, value) {
            return this.clone({
              param: param,
              value: value,
              op: 's'
            });
          }
          /**
           * Removes a given value or all values from a parameter.
           * @param {?} param The parameter name.
           * @param {?=} value The value to remove, if provided.
           * @return {?} A new body with the given value removed, or with all values
           * removed if no value is specified.
           */

        }, {
          key: "delete",
          value: function _delete(param, value) {
            return this.clone({
              param: param,
              value: value,
              op: 'd'
            });
          }
          /**
           * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are
           * separated by `&`s.
           * @return {?}
           */

        }, {
          key: "toString",
          value: function toString() {
            var _this89 = this;

            this.init();
            return this.keys().map(
            /**
            * @param {?} key
            * @return {?}
            */
            function (key) {
              /** @type {?} */
              var eKey = _this89.encoder.encodeKey(key); // `a: ['1']` produces `'a=1'`
              // `b: []` produces `''`
              // `c: ['1', '2']` produces `'c=1&c=2'`


              return (
                /** @type {?} */

                /** @type {?} */
                _this89.map.get(key).map(
                /**
                * @param {?} value
                * @return {?}
                */
                function (value) {
                  return eKey + '=' + _this89.encoder.encodeValue(value);
                }).join('&')
              );
            }) // filter out empty values because `b: []` produces `''`
            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't
            .filter(
            /**
            * @param {?} param
            * @return {?}
            */
            function (param) {
              return param !== '';
            }).join('&');
          }
          /**
           * @private
           * @param {?} update
           * @return {?}
           */

        }, {
          key: "clone",
          value: function clone(update) {
            /** @type {?} */
            var clone = new HttpParams(
            /** @type {?} */
            {
              encoder: this.encoder
            });
            clone.cloneFrom = this.cloneFrom || this;
            clone.updates = (this.updates || []).concat([update]);
            return clone;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "init",
          value: function init() {
            var _this90 = this;

            if (this.map === null) {
              this.map = new Map();
            }

            if (this.cloneFrom !== null) {
              this.cloneFrom.init();
              this.cloneFrom.keys().forEach(
              /**
              * @param {?} key
              * @return {?}
              */
              function (key) {
                return (
                  /** @type {?} */
                  _this90.map.set(key,
                  /** @type {?} */

                  /** @type {?} */

                  /** @type {?} */
                  _this90.cloneFrom.map.get(key))
                );
              });

              /** @type {?} */
              this.updates.forEach(
              /**
              * @param {?} update
              * @return {?}
              */
              function (update) {
                switch (update.op) {
                  case 'a':
                  case 's':
                    /** @type {?} */
                    var base = (update.op === 'a' ?
                    /** @type {?} */
                    _this90.map.get(update.param) : undefined) || [];
                    base.push(
                    /** @type {?} */
                    update.value);

                    /** @type {?} */
                    _this90.map.set(update.param, base);

                    break;

                  case 'd':
                    if (update.value !== undefined) {
                      /** @type {?} */
                      var _base =
                      /** @type {?} */
                      _this90.map.get(update.param) || [];
                      /** @type {?} */


                      var idx = _base.indexOf(update.value);

                      if (idx !== -1) {
                        _base.splice(idx, 1);
                      }

                      if (_base.length > 0) {
                        /** @type {?} */
                        _this90.map.set(update.param, _base);
                      } else {
                        /** @type {?} */
                        _this90.map["delete"](update.param);
                      }
                    } else {
                      /** @type {?} */
                      _this90.map["delete"](update.param);

                      break;
                    }

                }
              });
              this.cloneFrom = this.updates = null;
            }
          }
        }]);

        return HttpParams;
      }();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/common/http/src/request.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Construction interface for `HttpRequest`s.
       *
       * All values are optional and will override default values if provided.
       * @record
       */


      function HttpRequestInit() {}

      if (false) {}
      /**
       * Determine whether the given HTTP method may include a body.
       * @param {?} method
       * @return {?}
       */


      function mightHaveBody(method) {
        switch (method) {
          case 'DELETE':
          case 'GET':
          case 'HEAD':
          case 'OPTIONS':
          case 'JSONP':
            return false;

          default:
            return true;
        }
      }
      /**
       * Safely assert whether the given value is an ArrayBuffer.
       *
       * In some execution environments ArrayBuffer is not defined.
       * @param {?} value
       * @return {?}
       */


      function isArrayBuffer(value) {
        return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;
      }
      /**
       * Safely assert whether the given value is a Blob.
       *
       * In some execution environments Blob is not defined.
       * @param {?} value
       * @return {?}
       */


      function isBlob(value) {
        return typeof Blob !== 'undefined' && value instanceof Blob;
      }
      /**
       * Safely assert whether the given value is a FormData instance.
       *
       * In some execution environments FormData is not defined.
       * @param {?} value
       * @return {?}
       */


      function isFormData(value) {
        return typeof FormData !== 'undefined' && value instanceof FormData;
      }
      /**
       * An outgoing HTTP request with an optional typed body.
       *
       * `HttpRequest` represents an outgoing request, including URL, method,
       * headers, body, and other request configuration options. Instances should be
       * assumed to be immutable. To modify a `HttpRequest`, the `clone`
       * method should be used.
       *
       * \@publicApi
       * @template T
       */


      var HttpRequest = /*#__PURE__*/function () {
        /**
         * @param {?} method
         * @param {?} url
         * @param {?=} third
         * @param {?=} fourth
         */
        function HttpRequest(method, url, third, fourth) {
          _classCallCheck(this, HttpRequest);

          this.url = url;
          /**
           * The request body, or `null` if one isn't set.
           *
           * Bodies are not enforced to be immutable, as they can include a reference to any
           * user-defined data type. However, interceptors should take care to preserve
           * idempotence by treating them as such.
           */

          this.body = null;
          /**
           * Whether this request should be made in a way that exposes progress events.
           *
           * Progress events are expensive (change detection runs on each event) and so
           * they should only be requested if the consumer intends to monitor them.
           */

          this.reportProgress = false;
          /**
           * Whether this request should be sent with outgoing credentials (cookies).
           */

          this.withCredentials = false;
          /**
           * The expected response type of the server.
           *
           * This is used to parse the response appropriately before returning it to
           * the requestee.
           */

          this.responseType = 'json';
          this.method = method.toUpperCase(); // Next, need to figure out which argument holds the HttpRequestInit
          // options, if any.

          /** @type {?} */

          var options; // Check whether a body argument is expected. The only valid way to omit
          // the body argument is to use a known no-body method like GET.

          if (mightHaveBody(this.method) || !!fourth) {
            // Body is the third argument, options are the fourth.
            this.body = third !== undefined ?
            /** @type {?} */
            third : null;
            options = fourth;
          } else {
            // No body required, options are the third argument. The body stays null.
            options =
            /** @type {?} */
            third;
          } // If options have been passed, interpret them.


          if (options) {
            // Normalize reportProgress and withCredentials.
            this.reportProgress = !!options.reportProgress;
            this.withCredentials = !!options.withCredentials; // Override default response type of 'json' if one is provided.

            if (!!options.responseType) {
              this.responseType = options.responseType;
            } // Override headers if they're provided.


            if (!!options.headers) {
              this.headers = options.headers;
            }

            if (!!options.params) {
              this.params = options.params;
            }
          } // If no headers have been passed in, construct a new HttpHeaders instance.


          if (!this.headers) {
            this.headers = new HttpHeaders();
          } // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.


          if (!this.params) {
            this.params = new HttpParams();
            this.urlWithParams = url;
          } else {
            // Encode the parameters to a string in preparation for inclusion in the URL.

            /** @type {?} */
            var params = this.params.toString();

            if (params.length === 0) {
              // No parameters, the visible URL is just the URL given at creation time.
              this.urlWithParams = url;
            } else {
              // Does the URL already have query parameters? Look for '?'.

              /** @type {?} */
              var qIdx = url.indexOf('?'); // There are 3 cases to handle:
              // 1) No existing parameters -> append '?' followed by params.
              // 2) '?' exists and is followed by existing query string ->
              //    append '&' followed by params.
              // 3) '?' exists at the end of the url -> append params directly.
              // This basically amounts to determining the character, if any, with
              // which to join the URL and parameters.

              /** @type {?} */

              var sep = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';
              this.urlWithParams = url + sep + params;
            }
          }
        }
        /**
         * Transform the free-form body into a serialized format suitable for
         * transmission to the server.
         * @return {?}
         */


        _createClass(HttpRequest, [{
          key: "serializeBody",
          value: function serializeBody() {
            // If no body is present, no need to serialize it.
            if (this.body === null) {
              return null;
            } // Check whether the body is already in a serialized form. If so,
            // it can just be returned directly.


            if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) || typeof this.body === 'string') {
              return this.body;
            } // Check whether the body is an instance of HttpUrlEncodedParams.


            if (this.body instanceof HttpParams) {
              return this.body.toString();
            } // Check whether the body is an object or array, and serialize with JSON if so.


            if (typeof this.body === 'object' || typeof this.body === 'boolean' || Array.isArray(this.body)) {
              return JSON.stringify(this.body);
            } // Fall back on toString() for everything else.


            return (
              /** @type {?} */
              this.body.toString()
            );
          }
          /**
           * Examine the body and attempt to infer an appropriate MIME type
           * for it.
           *
           * If no such type can be inferred, this method will return `null`.
           * @return {?}
           */

        }, {
          key: "detectContentTypeHeader",
          value: function detectContentTypeHeader() {
            // An empty body has no content type.
            if (this.body === null) {
              return null;
            } // FormData bodies rely on the browser's content type assignment.


            if (isFormData(this.body)) {
              return null;
            } // Blobs usually have their own content type. If it doesn't, then
            // no type can be inferred.


            if (isBlob(this.body)) {
              return this.body.type || null;
            } // Array buffers have unknown contents and thus no type can be inferred.


            if (isArrayBuffer(this.body)) {
              return null;
            } // Technically, strings could be a form of JSON data, but it's safe enough
            // to assume they're plain strings.


            if (typeof this.body === 'string') {
              return 'text/plain';
            } // `HttpUrlEncodedParams` has its own content-type.


            if (this.body instanceof HttpParams) {
              return 'application/x-www-form-urlencoded;charset=UTF-8';
            } // Arrays, objects, and numbers will be encoded as JSON.


            if (typeof this.body === 'object' || typeof this.body === 'number' || Array.isArray(this.body)) {
              return 'application/json';
            } // No type could be inferred.


            return null;
          }
          /**
           * @param {?=} update
           * @return {?}
           */

        }, {
          key: "clone",
          value: function clone() {
            var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            // For method, url, and responseType, take the current value unless
            // it is overridden in the update hash.

            /** @type {?} */
            var method = update.method || this.method;
            /** @type {?} */

            var url = update.url || this.url;
            /** @type {?} */

            var responseType = update.responseType || this.responseType; // The body is somewhat special - a `null` value in update.body means
            // whatever current body is present is being overridden with an empty
            // body, whereas an `undefined` value in update.body implies no
            // override.

            /** @type {?} */

            var body = update.body !== undefined ? update.body : this.body; // Carefully handle the boolean options to differentiate between
            // `false` and `undefined` in the update args.

            /** @type {?} */

            var withCredentials = update.withCredentials !== undefined ? update.withCredentials : this.withCredentials;
            /** @type {?} */

            var reportProgress = update.reportProgress !== undefined ? update.reportProgress : this.reportProgress; // Headers and params may be appended to if `setHeaders` or
            // `setParams` are used.

            /** @type {?} */

            var headers = update.headers || this.headers;
            /** @type {?} */

            var params = update.params || this.params; // Check whether the caller has asked to add headers.

            if (update.setHeaders !== undefined) {
              // Set every requested header.
              headers = Object.keys(update.setHeaders).reduce(
              /**
              * @param {?} headers
              * @param {?} name
              * @return {?}
              */
              function (headers, name) {
                return headers.set(name,
                /** @type {?} */
                update.setHeaders[name]);
              }, headers);
            } // Check whether the caller has asked to set params.


            if (update.setParams) {
              // Set every requested param.
              params = Object.keys(update.setParams).reduce(
              /**
              * @param {?} params
              * @param {?} param
              * @return {?}
              */
              function (params, param) {
                return params.set(param,
                /** @type {?} */
                update.setParams[param]);
              }, params);
            } // Finally, construct the new HttpRequest using the pieces from above.


            return new HttpRequest(method, url, body, {
              params: params,
              headers: headers,
              reportProgress: reportProgress,
              responseType: responseType,
              withCredentials: withCredentials
            });
          }
        }]);

        return HttpRequest;
      }();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/common/http/src/response.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @enum {number} */


      var HttpEventType = {
        /**
         * The request was sent out over the wire.
         */
        Sent: 0,

        /**
         * An upload progress event was received.
         */
        UploadProgress: 1,

        /**
         * The response status code and headers were received.
         */
        ResponseHeader: 2,

        /**
         * A download progress event was received.
         */
        DownloadProgress: 3,

        /**
         * The full response including the body was received.
         */
        Response: 4,

        /**
         * A custom event from an interceptor or a backend.
         */
        User: 5
      };
      HttpEventType[HttpEventType.Sent] = 'Sent';
      HttpEventType[HttpEventType.UploadProgress] = 'UploadProgress';
      HttpEventType[HttpEventType.ResponseHeader] = 'ResponseHeader';
      HttpEventType[HttpEventType.DownloadProgress] = 'DownloadProgress';
      HttpEventType[HttpEventType.Response] = 'Response';
      HttpEventType[HttpEventType.User] = 'User';
      /**
       * Base interface for progress events.
       *
       * \@publicApi
       * @record
       */

      function HttpProgressEvent() {}

      if (false) {}
      /**
       * A download progress event.
       *
       * \@publicApi
       * @record
       */


      function HttpDownloadProgressEvent() {}

      if (false) {}
      /**
       * An upload progress event.
       *
       * \@publicApi
       * @record
       */


      function HttpUploadProgressEvent() {}

      if (false) {}
      /**
       * An event indicating that the request was sent to the server. Useful
       * when a request may be retried multiple times, to distinguish between
       * retries on the final event stream.
       *
       * \@publicApi
       * @record
       */


      function HttpSentEvent() {}

      if (false) {}
      /**
       * A user-defined event.
       *
       * Grouping all custom events under this type ensures they will be handled
       * and forwarded by all implementations of interceptors.
       *
       * \@publicApi
       * @record
       * @template T
       */


      function HttpUserEvent() {}

      if (false) {}
      /**
       * An error that represents a failed attempt to JSON.parse text coming back
       * from the server.
       *
       * It bundles the Error object with the actual response body that failed to parse.
       *
       *
       * @record
       */


      function HttpJsonParseError() {}

      if (false) {}
      /**
       * Base class for both `HttpResponse` and `HttpHeaderResponse`.
       *
       * \@publicApi
       * @abstract
       */


      var HttpResponseBase =
      /**
       * Super-constructor for all responses.
       *
       * The single parameter accepted is an initialization hash. Any properties
       * of the response passed there will override the default values.
       * @param {?} init
       * @param {?=} defaultStatus
       * @param {?=} defaultStatusText
       */
      function HttpResponseBase(init) {
        var defaultStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;
        var defaultStatusText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'OK';

        _classCallCheck(this, HttpResponseBase);

        // If the hash has values passed, use them to initialize the response.
        // Otherwise use the default values.
        this.headers = init.headers || new HttpHeaders();
        this.status = init.status !== undefined ? init.status : defaultStatus;
        this.statusText = init.statusText || defaultStatusText;
        this.url = init.url || null; // Cache the ok value to avoid defining a getter.

        this.ok = this.status >= 200 && this.status < 300;
      };

      if (false) {}
      /**
       * A partial HTTP response which only includes the status and header data,
       * but no response body.
       *
       * `HttpHeaderResponse` is a `HttpEvent` available on the response
       * event stream, only when progress events are requested.
       *
       * \@publicApi
       */


      var HttpHeaderResponse = /*#__PURE__*/function (_HttpResponseBase) {
        _inherits(HttpHeaderResponse, _HttpResponseBase);

        var _super34 = _createSuper(HttpHeaderResponse);

        /**
         * Create a new `HttpHeaderResponse` with the given parameters.
         * @param {?=} init
         */
        function HttpHeaderResponse() {
          var _this91;

          var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          _classCallCheck(this, HttpHeaderResponse);

          _this91 = _super34.call(this, init);
          _this91.type = HttpEventType.ResponseHeader;
          return _this91;
        }
        /**
         * Copy this `HttpHeaderResponse`, overriding its contents with the
         * given parameter hash.
         * @param {?=} update
         * @return {?}
         */


        _createClass(HttpHeaderResponse, [{
          key: "clone",
          value: function clone() {
            var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            // Perform a straightforward initialization of the new HttpHeaderResponse,
            // overriding the current parameters with new ones if given.
            return new HttpHeaderResponse({
              headers: update.headers || this.headers,
              status: update.status !== undefined ? update.status : this.status,
              statusText: update.statusText || this.statusText,
              url: update.url || this.url || undefined
            });
          }
        }]);

        return HttpHeaderResponse;
      }(HttpResponseBase);

      if (false) {}
      /**
       * A full HTTP response, including a typed response body (which may be `null`
       * if one was not returned).
       *
       * `HttpResponse` is a `HttpEvent` available on the response event
       * stream.
       *
       * \@publicApi
       * @template T
       */


      var HttpResponse = /*#__PURE__*/function (_HttpResponseBase2) {
        _inherits(HttpResponse, _HttpResponseBase2);

        var _super35 = _createSuper(HttpResponse);

        /**
         * Construct a new `HttpResponse`.
         * @param {?=} init
         */
        function HttpResponse() {
          var _this92;

          var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          _classCallCheck(this, HttpResponse);

          _this92 = _super35.call(this, init);
          _this92.type = HttpEventType.Response;
          _this92.body = init.body !== undefined ? init.body : null;
          return _this92;
        }
        /**
         * @param {?=} update
         * @return {?}
         */


        _createClass(HttpResponse, [{
          key: "clone",
          value: function clone() {
            var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            return new HttpResponse({
              body: update.body !== undefined ? update.body : this.body,
              headers: update.headers || this.headers,
              status: update.status !== undefined ? update.status : this.status,
              statusText: update.statusText || this.statusText,
              url: update.url || this.url || undefined
            });
          }
        }]);

        return HttpResponse;
      }(HttpResponseBase);

      if (false) {}
      /**
       * A response that represents an error or failure, either from a
       * non-successful HTTP status, an error while executing the request,
       * or some other failure which occurred during the parsing of the response.
       *
       * Any error returned on the `Observable` response stream will be
       * wrapped in an `HttpErrorResponse` to provide additional context about
       * the state of the HTTP layer when the error occurred. The error property
       * will contain either a wrapped Error object or the error response returned
       * from the server.
       *
       * \@publicApi
       */


      var HttpErrorResponse = /*#__PURE__*/function (_HttpResponseBase3) {
        _inherits(HttpErrorResponse, _HttpResponseBase3);

        var _super36 = _createSuper(HttpErrorResponse);

        /**
         * @param {?} init
         */
        function HttpErrorResponse(init) {
          var _this93;

          _classCallCheck(this, HttpErrorResponse);

          // Initialize with a default status of 0 / Unknown Error.
          _this93 = _super36.call(this, init, 0, 'Unknown Error');
          _this93.name = 'HttpErrorResponse';
          /**
           * Errors are never okay, even when the status code is in the 2xx success range.
           */

          _this93.ok = false; // If the response was successful, then this was a parse error. Otherwise, it was
          // a protocol-level failure of some sort. Either the request failed in transit
          // or the server returned an unsuccessful status code.

          if (_this93.status >= 200 && _this93.status < 300) {
            _this93.message = "Http failure during parsing for ".concat(init.url || '(unknown url)');
          } else {
            _this93.message = "Http failure response for ".concat(init.url || '(unknown url)', ": ").concat(init.status, " ").concat(init.statusText);
          }

          _this93.error = init.error || null;
          return _this93;
        }

        return HttpErrorResponse;
      }(HttpResponseBase);

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/common/http/src/client.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and
       * the given `body`. This function clones the object and adds the body.
       *
       * Note that the `responseType` *options* value is a String that identifies the
       * single data type of the response.
       * A single overload version of the method handles each response type.
       * The value of `responseType` cannot be a union, as the combined signature could imply.
       *
       * @template T
       * @param {?} options
       * @param {?} body
       * @return {?}
       */


      function addBody(options, body) {
        return {
          body: body,
          headers: options.headers,
          observe: options.observe,
          params: options.params,
          reportProgress: options.reportProgress,
          responseType: options.responseType,
          withCredentials: options.withCredentials
        };
      }
      /**
       * Performs HTTP requests.
       * This service is available as an injectable class, with methods to perform HTTP requests.
       * Each request method has multiple signatures, and the return type varies based on
       * the signature that is called (mainly the values of `observe` and `responseType`).
       *
       * Note that the `responseType` *options* value is a String that identifies the
       * single data type of the response.
       * A single overload version of the method handles each response type.
       * The value of `responseType` cannot be a union, as the combined signature could imply.
       *
       * \@usageNotes
       * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.
       *
       * ### HTTP Request Example
       *
       * ```
       *  // GET heroes whose name contains search term
       * searchHeroes(term: string): observable<Hero[]>{
       *
       *  const params = new HttpParams({fromString: 'name=term'});
       *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});
       * }
       * ```
       * ### JSONP Example
       * ```
       * requestJsonp(url, callback = 'callback') {
       *  return this.httpClient.jsonp(this.heroesURL, callback);
       * }
       * ```
       *
       * ### PATCH Example
       * ```
       * // PATCH one of the heroes' name
       * patchHero (id: number, heroName: string): Observable<{}> {
       * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42
       *  return this.httpClient.patch(url, {name: heroName}, httpOptions)
       *    .pipe(catchError(this.handleError('patchHero')));
       * }
       * ```
       *
       * @see [HTTP Guide](guide/http)
       *
       * \@publicApi
       */


      var HttpClient = /*#__PURE__*/function () {
        /**
         * @param {?} handler
         */
        function HttpClient(handler) {
          _classCallCheck(this, HttpClient);

          this.handler = handler;
        }
        /**
         * Constructs an observable for a generic HTTP request that, when subscribed,
         * fires the request through the chain of registered interceptors and on to the
         * server.
         *
         * You can pass an `HttpRequest` directly as the only parameter. In this case,
         * the call returns an observable of the raw `HttpEvent` stream.
         *
         * Alternatively you can pass an HTTP method as the first parameter,
         * a URL string as the second, and an options hash containing the request body as the third.
         * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the
         * type of returned observable.
         *   * The `responseType` value determines how a successful response body is parsed.
         *   * If `responseType` is the default `json`, you can pass a type interface for the resulting
         * object as a type parameter to the call.
         *
         * The `observe` value determines the return type, according to what you are interested in
         * observing.
         *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including
         * progress events by default.
         *   * An `observe` value of response returns an observable of `HttpResponse<T>`,
         * where the `T` parameter depends on the `responseType` and any optionally provided type
         * parameter.
         *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.
         *
         * @param {?} first
         * @param {?=} url
         * @param {?=} options
         * @return {?}
         */


        _createClass(HttpClient, [{
          key: "request",
          value: function request(first, url) {
            var _this94 = this;

            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            /** @type {?} */
            var req; // First, check whether the primary argument is an instance of `HttpRequest`.

            if (first instanceof HttpRequest) {
              // It is. The other arguments must be undefined (per the signatures) and can be
              // ignored.
              req = first;
            } else {
              // It's a string, so it represents a URL. Construct a request based on it,
              // and incorporate the remaining arguments (assuming `GET` unless a method is
              // provided.
              // Figure out the headers.

              /** @type {?} */
              var headers = undefined;

              if (options.headers instanceof HttpHeaders) {
                headers = options.headers;
              } else {
                headers = new HttpHeaders(options.headers);
              } // Sort out parameters.

              /** @type {?} */


              var params = undefined;

              if (!!options.params) {
                if (options.params instanceof HttpParams) {
                  params = options.params;
                } else {
                  params = new HttpParams(
                  /** @type {?} */
                  {
                    fromObject: options.params
                  });
                }
              } // Construct the request.


              req = new HttpRequest(first,
              /** @type {?} */
              url, options.body !== undefined ? options.body : null, {
                headers: headers,
                params: params,
                reportProgress: options.reportProgress,
                // By default, JSON is assumed to be returned for all calls.
                responseType: options.responseType || 'json',
                withCredentials: options.withCredentials
              });
            } // Start with an Observable.of() the initial request, and run the handler (which
            // includes all interceptors) inside a concatMap(). This way, the handler runs
            // inside an Observable chain, which causes interceptors to be re-run on every
            // subscription (this also makes retries re-run the handler, including interceptors).

            /** @type {?} */


            var events$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["of"])(req).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["concatMap"])(
            /**
            * @param {?} req
            * @return {?}
            */
            function (req) {
              return _this94.handler.handle(req);
            })); // If coming via the API signature which accepts a previously constructed HttpRequest,
            // the only option is to get the event stream. Otherwise, return the event stream if
            // that is what was requested.

            if (first instanceof HttpRequest || options.observe === 'events') {
              return events$;
            } // The requested stream contains either the full response or the body. In either
            // case, the first step is to filter the event stream to extract a stream of
            // responses(s).

            /** @type {?} */


            var res$ =
            /** @type {?} */
            events$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["filter"])(
            /**
            * @param {?} event
            * @return {?}
            */
            function (event) {
              return event instanceof HttpResponse;
            })); // Decide which stream to return.

            switch (options.observe || 'body') {
              case 'body':
                // The requested stream is the body. Map the response stream to the response
                // body. This could be done more simply, but a misbehaving interceptor might
                // transform the response body into a different format and ignore the requested
                // responseType. Guard against this by validating that the response is of the
                // requested type.
                switch (req.responseType) {
                  case 'arraybuffer':
                    return res$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(
                    /**
                    * @param {?} res
                    * @return {?}
                    */
                    function (res) {
                      // Validate that the body is an ArrayBuffer.
                      if (res.body !== null && !(res.body instanceof ArrayBuffer)) {
                        throw new Error('Response is not an ArrayBuffer.');
                      }

                      return res.body;
                    }));

                  case 'blob':
                    return res$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(
                    /**
                    * @param {?} res
                    * @return {?}
                    */
                    function (res) {
                      // Validate that the body is a Blob.
                      if (res.body !== null && !(res.body instanceof Blob)) {
                        throw new Error('Response is not a Blob.');
                      }

                      return res.body;
                    }));

                  case 'text':
                    return res$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(
                    /**
                    * @param {?} res
                    * @return {?}
                    */
                    function (res) {
                      // Validate that the body is a string.
                      if (res.body !== null && typeof res.body !== 'string') {
                        throw new Error('Response is not a string.');
                      }

                      return res.body;
                    }));

                  case 'json':
                  default:
                    // No validation needed for JSON responses, as they can be of any type.
                    return res$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(
                    /**
                    * @param {?} res
                    * @return {?}
                    */
                    function (res) {
                      return res.body;
                    }));
                }

              case 'response':
                // The response stream was requested directly, so return it.
                return res$;

              default:
                // Guard against new future observe types being added.
                throw new Error("Unreachable: unhandled observe type ".concat(options.observe, "}"));
            }
          }
          /**
           * Constructs an observable that, when subscribed, causes the configured
           * `DELETE` request to execute on the server. See the individual overloads for
           * details on the return type.
           *
           * @param {?} url     The endpoint URL.
           * @param {?=} options The HTTP options to send with the request.
           *
           * @return {?}
           */

        }, {
          key: "delete",
          value: function _delete(url) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            return this.request('DELETE', url,
            /** @type {?} */
            options);
          }
          /**
           * Constructs an observable that, when subscribed, causes the configured
           * `GET` request to execute on the server. See the individual overloads for
           * details on the return type.
           * @param {?} url
           * @param {?=} options
           * @return {?}
           */

        }, {
          key: "get",
          value: function get(url) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            return this.request('GET', url,
            /** @type {?} */
            options);
          }
          /**
           * Constructs an observable that, when subscribed, causes the configured
           * `HEAD` request to execute on the server. The `HEAD` method returns
           * meta information about the resource without transferring the
           * resource itself. See the individual overloads for
           * details on the return type.
           * @param {?} url
           * @param {?=} options
           * @return {?}
           */

        }, {
          key: "head",
          value: function head(url) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            return this.request('HEAD', url,
            /** @type {?} */
            options);
          }
          /**
           * Constructs an `Observable` that, when subscribed, causes a request with the special method
           * `JSONP` to be dispatched via the interceptor pipeline.
           * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain
           * API endpoints that don't support newer,
           * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.
           * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the
           * requests even if the API endpoint is not located on the same domain (origin) as the client-side
           * application making the request.
           * The endpoint API must support JSONP callback for JSONP requests to work.
           * The resource API returns the JSON response wrapped in a callback function.
           * You can pass the callback function name as one of the query parameters.
           * Note that JSONP requests can only be used with `GET` requests.
           *
           * @template T
           * @param {?} url The resource URL.
           * @param {?} callbackParam The callback function name.
           *
           * @return {?}
           */

        }, {
          key: "jsonp",
          value: function jsonp(url, callbackParam) {
            return this.request('JSONP', url, {
              params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),
              observe: 'body',
              responseType: 'json'
            });
          }
          /**
           * Constructs an `Observable` that, when subscribed, causes the configured
           * `OPTIONS` request to execute on the server. This method allows the client
           * to determine the supported HTTP methods and other capabilites of an endpoint,
           * without implying a resource action. See the individual overloads for
           * details on the return type.
           * @param {?} url
           * @param {?=} options
           * @return {?}
           */

        }, {
          key: "options",
          value: function options(url) {
            var _options2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            return this.request('OPTIONS', url,
            /** @type {?} */
            _options2);
          }
          /**
           * Constructs an observable that, when subscribed, causes the configured
           * `PATCH` request to execute on the server. See the individual overloads for
           * details on the return type.
           * @param {?} url
           * @param {?} body
           * @param {?=} options
           * @return {?}
           */

        }, {
          key: "patch",
          value: function patch(url, body) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            return this.request('PATCH', url, addBody(options, body));
          }
          /**
           * Constructs an observable that, when subscribed, causes the configured
           * `POST` request to execute on the server. The server responds with the location of
           * the replaced resource. See the individual overloads for
           * details on the return type.
           * @param {?} url
           * @param {?} body
           * @param {?=} options
           * @return {?}
           */

        }, {
          key: "post",
          value: function post(url, body) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            return this.request('POST', url, addBody(options, body));
          }
          /**
           * Constructs an observable that, when subscribed, causes the configured
           * `PUT` request to execute on the server. The `PUT` method replaces an existing resource
           * with a new set of values.
           * See the individual overloads for details on the return type.
           * @param {?} url
           * @param {?} body
           * @param {?=} options
           * @return {?}
           */

        }, {
          key: "put",
          value: function put(url, body) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            return this.request('PUT', url, addBody(options, body));
          }
        }]);

        return HttpClient;
      }();

      HttpClient.ɵfac = function HttpClient_Factory(t) {
        return new (t || HttpClient)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](HttpHandler));
      };

      HttpClient.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: HttpClient,
        factory: HttpClient.ɵfac
      });
      /** @nocollapse */

      HttpClient.ctorParameters = function () {
        return [{
          type: HttpHandler
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](HttpClient, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
        }], function () {
          return [{
            type: HttpHandler
          }];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/common/http/src/interceptor.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Intercepts and handles an `HttpRequest` or `HttpResponse`.
       *
       * Most interceptors transform the outgoing request before passing it to the
       * next interceptor in the chain, by calling `next.handle(transformedReq)`.
       * An interceptor may transform the
       * response event stream as well, by applying additional RxJS operators on the stream
       * returned by `next.handle()`.
       *
       * More rarely, an interceptor may handle the request entirely,
       * and compose a new event stream instead of invoking `next.handle()`. This is an
       * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.
       *
       * It is also rare but valid for an interceptor to return multiple responses on the
       * event stream for a single request.
       *
       * \@publicApi
       *
       * @see [HTTP Guide](guide/http#intercepting-requests-and-responses)
       *
       * \@usageNotes
       *
       * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`
       * only in your `AppModule`, and add the interceptors to the root application injector .
       * If you import `HttpClientModule` multiple times across different modules (for example, in lazy
       * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the interceptors
       * provided in the root module.
       *
       * @record
       */


      function HttpInterceptor() {}

      if (false) {}
      /**
       * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.
       *
       *
       */


      var HttpInterceptorHandler = /*#__PURE__*/function () {
        /**
         * @param {?} next
         * @param {?} interceptor
         */
        function HttpInterceptorHandler(next, interceptor) {
          _classCallCheck(this, HttpInterceptorHandler);

          this.next = next;
          this.interceptor = interceptor;
        }
        /**
         * @param {?} req
         * @return {?}
         */


        _createClass(HttpInterceptorHandler, [{
          key: "handle",
          value: function handle(req) {
            return this.interceptor.intercept(req, this.next);
          }
        }]);

        return HttpInterceptorHandler;
      }();

      if (false) {}
      /**
       * A multi-provider token that represents the array of registered
       * `HttpInterceptor` objects.
       *
       * \@publicApi
       * @type {?}
       */


      var HTTP_INTERCEPTORS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('HTTP_INTERCEPTORS');

      var NoopInterceptor = /*#__PURE__*/function () {
        function NoopInterceptor() {
          _classCallCheck(this, NoopInterceptor);
        }

        _createClass(NoopInterceptor, [{
          key: "intercept",

          /**
           * @param {?} req
           * @param {?} next
           * @return {?}
           */
          value: function intercept(req, next) {
            return next.handle(req);
          }
        }]);

        return NoopInterceptor;
      }();

      NoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) {
        return new (t || NoopInterceptor)();
      };

      NoopInterceptor.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: NoopInterceptor,
        factory: NoopInterceptor.ɵfac
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NoopInterceptor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
        }], null, null);
      })();
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/common/http/src/jsonp.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // Every request made through JSONP needs a callback name that's unique across the
      // whole page. Each request is assigned an id and the callback name is constructed
      // from that. The next id to be assigned is tracked in a global variable here that
      // is shared among all applications on the page.

      /** @type {?} */


      var nextRequestId = 0; // Error text given when a JSONP script is injected, but doesn't invoke the callback
      // passed in its URL.

      /** @type {?} */

      var JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.'; // Error text given when a request is passed to the JsonpClientBackend that doesn't
      // have a request method JSONP.

      /** @type {?} */

      var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';
      /** @type {?} */

      var JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';
      /**
       * DI token/abstract type representing a map of JSONP callbacks.
       *
       * In the browser, this should always be the `window` object.
       *
       *
       * @abstract
       */

      var JsonpCallbackContext = function JsonpCallbackContext() {
        _classCallCheck(this, JsonpCallbackContext);
      };
      /**
       * Processes an `HttpRequest` with the JSONP method,
       * by performing JSONP style requests.
       * @see `HttpHandler`
       * @see `HttpXhrBackend`
       *
       * \@publicApi
       */


      var JsonpClientBackend = /*#__PURE__*/function () {
        /**
         * @param {?} callbackMap
         * @param {?} document
         */
        function JsonpClientBackend(callbackMap, document) {
          _classCallCheck(this, JsonpClientBackend);

          this.callbackMap = callbackMap;
          this.document = document;
        }
        /**
         * Get the name of the next callback method, by incrementing the global `nextRequestId`.
         * @private
         * @return {?}
         */


        _createClass(JsonpClientBackend, [{
          key: "nextCallback",
          value: function nextCallback() {
            return "ng_jsonp_callback_".concat(nextRequestId++);
          }
          /**
           * Processes a JSONP request and returns an event stream of the results.
           * @param {?} req The request object.
           * @return {?} An observable of the response events.
           *
           */

        }, {
          key: "handle",
          value: function handle(req) {
            var _this95 = this;

            // Firstly, check both the method and response type. If either doesn't match
            // then the request was improperly routed here and cannot be handled.
            if (req.method !== 'JSONP') {
              throw new Error(JSONP_ERR_WRONG_METHOD);
            } else if (req.responseType !== 'json') {
              throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);
            } // Everything else happens inside the Observable boundary.


            return new rxjs__WEBPACK_IMPORTED_MODULE_1__["Observable"](
            /**
            * @param {?} observer
            * @return {?}
            */
            function (observer) {
              // The first step to make a request is to generate the callback name, and replace the
              // callback placeholder in the URL with the name. Care has to be taken here to ensure
              // a trailing &, if matched, gets inserted back into the URL in the correct place.

              /** @type {?} */
              var callback = _this95.nextCallback();
              /** @type {?} */


              var url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, "=".concat(callback, "$1")); // Construct the <script> tag and point it at the URL.

              /** @type {?} */

              var node = _this95.document.createElement('script');

              node.src = url; // A JSONP request requires waiting for multiple callbacks. These variables
              // are closed over and track state across those callbacks.
              // The response object, if one has been received, or null otherwise.

              /** @type {?} */

              var body = null; // Whether the response callback has been called.

              /** @type {?} */

              var finished = false; // Whether the request has been cancelled (and thus any other callbacks)
              // should be ignored.

              /** @type {?} */

              var cancelled = false; // Set the response callback in this.callbackMap (which will be the window
              // object in the browser. The script being loaded via the <script> tag will
              // eventually call this callback.

              _this95.callbackMap[callback] =
              /**
              * @param {?=} data
              * @return {?}
              */
              function (data) {
                // Data has been received from the JSONP script. Firstly, delete this callback.
                delete _this95.callbackMap[callback]; // Next, make sure the request wasn't cancelled in the meantime.

                if (cancelled) {
                  return;
                } // Set state to indicate data was received.


                body = data;
                finished = true;
              }; // cleanup() is a utility closure that removes the <script> from the page and
              // the response callback from the window. This logic is used in both the
              // success, error, and cancellation paths, so it's extracted out for convenience.

              /** @type {?} */


              var cleanup =
              /**
              * @return {?}
              */
              function cleanup() {
                // Remove the <script> tag if it's still on the page.
                if (node.parentNode) {
                  node.parentNode.removeChild(node);
                } // Remove the response callback from the callbackMap (window object in the
                // browser).


                delete _this95.callbackMap[callback];
              }; // onLoad() is the success callback which runs after the response callback
              // if the JSONP script loads successfully. The event itself is unimportant.
              // If something went wrong, onLoad() may run without the response callback
              // having been invoked.

              /** @type {?} */


              var onLoad =
              /**
              * @param {?} event
              * @return {?}
              */
              function onLoad(event) {
                // Do nothing if the request has been cancelled.
                if (cancelled) {
                  return;
                } // Cleanup the page.


                cleanup(); // Check whether the response callback has run.

                if (!finished) {
                  // It hasn't, something went wrong with the request. Return an error via
                  // the Observable error path. All JSONP errors have status 0.
                  observer.error(new HttpErrorResponse({
                    url: url,
                    status: 0,
                    statusText: 'JSONP Error',
                    error: new Error(JSONP_ERR_NO_CALLBACK)
                  }));
                  return;
                } // Success. body either contains the response body or null if none was
                // returned.


                observer.next(new HttpResponse({
                  body: body,
                  status: 200,
                  statusText: 'OK',
                  url: url
                })); // Complete the stream, the response is over.

                observer.complete();
              }; // onError() is the error callback, which runs if the script returned generates
              // a Javascript error. It emits the error via the Observable error channel as
              // a HttpErrorResponse.

              /** @type {?} */


              var onError =
              /**
              * @param {?} error
              * @return {?}
              */
              function onError(error) {
                // If the request was already cancelled, no need to emit anything.
                if (cancelled) {
                  return;
                }

                cleanup(); // Wrap the error in a HttpErrorResponse.

                observer.error(new HttpErrorResponse({
                  error: error,
                  status: 0,
                  statusText: 'JSONP Error',
                  url: url
                }));
              }; // Subscribe to both the success (load) and error events on the <script> tag,
              // and add it to the page.


              node.addEventListener('load', onLoad);
              node.addEventListener('error', onError);

              _this95.document.body.appendChild(node); // The request has now been successfully sent.


              observer.next({
                type: HttpEventType.Sent
              }); // Cancellation handler.

              return (
                /**
                * @return {?}
                */
                function () {
                  // Track the cancellation so event listeners won't do anything even if already scheduled.
                  cancelled = true; // Remove the event listeners so they won't run if the events later fire.

                  node.removeEventListener('load', onLoad);
                  node.removeEventListener('error', onError); // And finally, clean up the page.

                  cleanup();
                }
              );
            });
          }
        }]);

        return JsonpClientBackend;
      }();

      JsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) {
        return new (t || JsonpClientBackend)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](JsonpCallbackContext), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_3__["DOCUMENT"]));
      };

      JsonpClientBackend.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: JsonpClientBackend,
        factory: JsonpClientBackend.ɵfac
      });
      /** @nocollapse */

      JsonpClientBackend.ctorParameters = function () {
        return [{
          type: JsonpCallbackContext
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__["DOCUMENT"]]
          }]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](JsonpClientBackend, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
        }], function () {
          return [{
            type: JsonpCallbackContext
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__["DOCUMENT"]]
            }]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * Identifies requests with the method JSONP and
       * shifts them to the `JsonpClientBackend`.
       *
       * @see `HttpInterceptor`
       *
       * \@publicApi
       */


      var JsonpInterceptor = /*#__PURE__*/function () {
        /**
         * @param {?} jsonp
         */
        function JsonpInterceptor(jsonp) {
          _classCallCheck(this, JsonpInterceptor);

          this.jsonp = jsonp;
        }
        /**
         * Identifies and handles a given JSONP request.
         * @param {?} req The outgoing request object to handle.
         * @param {?} next The next interceptor in the chain, or the backend
         * if no interceptors remain in the chain.
         * @return {?} An observable of the event stream.
         */


        _createClass(JsonpInterceptor, [{
          key: "intercept",
          value: function intercept(req, next) {
            if (req.method === 'JSONP') {
              return this.jsonp.handle(
              /** @type {?} */
              req);
            } // Fall through for normal HTTP requests.


            return next.handle(req);
          }
        }]);

        return JsonpInterceptor;
      }();

      JsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) {
        return new (t || JsonpInterceptor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](JsonpClientBackend));
      };

      JsonpInterceptor.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: JsonpInterceptor,
        factory: JsonpInterceptor.ɵfac
      });
      /** @nocollapse */

      JsonpInterceptor.ctorParameters = function () {
        return [{
          type: JsonpClientBackend
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](JsonpInterceptor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
        }], function () {
          return [{
            type: JsonpClientBackend
          }];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/common/http/src/xhr.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var XSSI_PREFIX = /^\)\]\}',?\n/;
      /**
       * Determine an appropriate URL for the response, by checking either
       * XMLHttpRequest.responseURL or the X-Request-URL header.
       * @param {?} xhr
       * @return {?}
       */

      function getResponseUrl(xhr) {
        if ('responseURL' in xhr && xhr.responseURL) {
          return xhr.responseURL;
        }

        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
          return xhr.getResponseHeader('X-Request-URL');
        }

        return null;
      }
      /**
       * A wrapper around the `XMLHttpRequest` constructor.
       *
       * \@publicApi
       * @abstract
       */


      var XhrFactory = function XhrFactory() {
        _classCallCheck(this, XhrFactory);
      };

      if (false) {}
      /**
       * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.
       *
       */


      var BrowserXhr = /*#__PURE__*/function () {
        function BrowserXhr() {
          _classCallCheck(this, BrowserXhr);
        }
        /**
         * @return {?}
         */


        _createClass(BrowserXhr, [{
          key: "build",
          value: function build() {
            return (
              /** @type {?} */
              new XMLHttpRequest()
            );
          }
        }]);

        return BrowserXhr;
      }();

      BrowserXhr.ɵfac = function BrowserXhr_Factory(t) {
        return new (t || BrowserXhr)();
      };

      BrowserXhr.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: BrowserXhr,
        factory: BrowserXhr.ɵfac
      });
      /** @nocollapse */

      BrowserXhr.ctorParameters = function () {
        return [];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](BrowserXhr, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
        }], function () {
          return [];
        }, null);
      })();
      /**
       * Tracks a response from the server that does not yet have a body.
       * @record
       */


      function PartialResponse() {}

      if (false) {}
      /**
       * Uses `XMLHttpRequest` to send requests to a backend server.
       * @see `HttpHandler`
       * @see `JsonpClientBackend`
       *
       * \@publicApi
       */


      var HttpXhrBackend = /*#__PURE__*/function () {
        /**
         * @param {?} xhrFactory
         */
        function HttpXhrBackend(xhrFactory) {
          _classCallCheck(this, HttpXhrBackend);

          this.xhrFactory = xhrFactory;
        }
        /**
         * Processes a request and returns a stream of response events.
         * @param {?} req The request object.
         * @return {?} An observable of the response events.
         */


        _createClass(HttpXhrBackend, [{
          key: "handle",
          value: function handle(req) {
            var _this96 = this;

            // Quick check to give a better error message when a user attempts to use
            // HttpClient.jsonp() without installing the JsonpClientModule
            if (req.method === 'JSONP') {
              throw new Error("Attempted to construct Jsonp request without JsonpClientModule installed.");
            } // Everything happens on Observable subscription.


            return new rxjs__WEBPACK_IMPORTED_MODULE_1__["Observable"](
            /**
            * @param {?} observer
            * @return {?}
            */
            function (observer) {
              // Start by setting up the XHR object with request method, URL, and withCredentials flag.

              /** @type {?} */
              var xhr = _this96.xhrFactory.build();

              xhr.open(req.method, req.urlWithParams);

              if (!!req.withCredentials) {
                xhr.withCredentials = true;
              } // Add all the requested headers.


              req.headers.forEach(
              /**
              * @param {?} name
              * @param {?} values
              * @return {?}
              */
              function (name, values) {
                return xhr.setRequestHeader(name, values.join(','));
              }); // Add an Accept header if one isn't present already.

              if (!req.headers.has('Accept')) {
                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');
              } // Auto-detect the Content-Type header if one isn't present already.


              if (!req.headers.has('Content-Type')) {
                /** @type {?} */
                var detectedType = req.detectContentTypeHeader(); // Sometimes Content-Type detection fails.

                if (detectedType !== null) {
                  xhr.setRequestHeader('Content-Type', detectedType);
                }
              } // Set the responseType if one was requested.


              if (req.responseType) {
                /** @type {?} */
                var responseType = req.responseType.toLowerCase(); // JSON responses need to be processed as text. This is because if the server
                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,
                // xhr.response will be null, and xhr.responseText cannot be accessed to
                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON
                // is parsed by first requesting text and then applying JSON.parse.

                xhr.responseType =
                /** @type {?} */
                responseType !== 'json' ? responseType : 'text';
              } // Serialize the request body if one is present. If not, this will be set to null.

              /** @type {?} */


              var reqBody = req.serializeBody(); // If progress events are enabled, response headers will be delivered
              // in two events - the HttpHeaderResponse event and the full HttpResponse
              // event. However, since response headers don't change in between these
              // two events, it doesn't make sense to parse them twice. So headerResponse
              // caches the data extracted from the response whenever it's first parsed,
              // to ensure parsing isn't duplicated.

              /** @type {?} */

              var headerResponse = null; // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest
              // state, and memoizes it into headerResponse.

              /** @type {?} */

              var partialFromXhr =
              /**
              * @return {?}
              */
              function partialFromXhr() {
                if (headerResponse !== null) {
                  return headerResponse;
                } // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).

                /** @type {?} */


                var status = xhr.status === 1223 ? 204 : xhr.status;
                /** @type {?} */

                var statusText = xhr.statusText || 'OK'; // Parse headers from XMLHttpRequest - this step is lazy.

                /** @type {?} */

                var headers = new HttpHeaders(xhr.getAllResponseHeaders()); // Read the response URL from the XMLHttpResponse instance and fall back on the
                // request URL.

                /** @type {?} */

                var url = getResponseUrl(xhr) || req.url; // Construct the HttpHeaderResponse and memoize it.

                headerResponse = new HttpHeaderResponse({
                  headers: headers,
                  status: status,
                  statusText: statusText,
                  url: url
                });
                return headerResponse;
              }; // Next, a few closures are defined for the various events which XMLHttpRequest can
              // emit. This allows them to be unregistered as event listeners later.
              // First up is the load event, which represents a response being fully available.

              /** @type {?} */


              var onLoad =
              /**
              * @return {?}
              */
              function onLoad() {
                // Read response state from the memoized partial data.
                var _partialFromXhr = partialFromXhr(),
                    headers = _partialFromXhr.headers,
                    status = _partialFromXhr.status,
                    statusText = _partialFromXhr.statusText,
                    url = _partialFromXhr.url; // The body will be read out if present.

                /** @type {?} */


                var body = null;

                if (status !== 204) {
                  // Use XMLHttpRequest.response if set, responseText otherwise.
                  body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;
                } // Normalize another potential bug (this one comes from CORS).


                if (status === 0) {
                  status = !!body ? 200 : 0;
                } // ok determines whether the response will be transmitted on the event or
                // error channel. Unsuccessful status codes (not 2xx) will always be errors,
                // but a successful status code can still result in an error if the user
                // asked for JSON data and the body cannot be parsed as such.

                /** @type {?} */


                var ok = status >= 200 && status < 300; // Check whether the body needs to be parsed as JSON (in many cases the browser
                // will have done that already).

                if (req.responseType === 'json' && typeof body === 'string') {
                  // Save the original body, before attempting XSSI prefix stripping.

                  /** @type {?} */
                  var originalBody = body;
                  body = body.replace(XSSI_PREFIX, '');

                  try {
                    // Attempt the parse. If it fails, a parse error should be delivered to the user.
                    body = body !== '' ? JSON.parse(body) : null;
                  } catch (error) {
                    // Since the JSON.parse failed, it's reasonable to assume this might not have been a
                    // JSON response. Restore the original body (including any XSSI prefix) to deliver
                    // a better error response.
                    body = originalBody; // If this was an error request to begin with, leave it as a string, it probably
                    // just isn't JSON. Otherwise, deliver the parsing error to the user.

                    if (ok) {
                      // Even though the response status was 2xx, this is still an error.
                      ok = false; // The parse error contains the text of the body that failed to parse.

                      body =
                      /** @type {?} */
                      {
                        error: error,
                        text: body
                      };
                    }
                  }
                }

                if (ok) {
                  // A successful response is delivered on the event stream.
                  observer.next(new HttpResponse({
                    body: body,
                    headers: headers,
                    status: status,
                    statusText: statusText,
                    url: url || undefined
                  })); // The full body has been received and delivered, no further events
                  // are possible. This request is complete.

                  observer.complete();
                } else {
                  // An unsuccessful request is delivered on the error channel.
                  observer.error(new HttpErrorResponse({
                    // The error in this case is the response body (error from the server).
                    error: body,
                    headers: headers,
                    status: status,
                    statusText: statusText,
                    url: url || undefined
                  }));
                }
              }; // The onError callback is called when something goes wrong at the network level.
              // Connection timeout, DNS error, offline, etc. These are actual errors, and are
              // transmitted on the error channel.

              /** @type {?} */


              var onError =
              /**
              * @param {?} error
              * @return {?}
              */
              function onError(error) {
                var _partialFromXhr2 = partialFromXhr(),
                    url = _partialFromXhr2.url;
                /** @type {?} */


                var res = new HttpErrorResponse({
                  error: error,
                  status: xhr.status || 0,
                  statusText: xhr.statusText || 'Unknown Error',
                  url: url || undefined
                });
                observer.error(res);
              }; // The sentHeaders flag tracks whether the HttpResponseHeaders event
              // has been sent on the stream. This is necessary to track if progress
              // is enabled since the event will be sent on only the first download
              // progerss event.

              /** @type {?} */


              var sentHeaders = false; // The download progress event handler, which is only registered if
              // progress events are enabled.

              /** @type {?} */

              var onDownProgress =
              /**
              * @param {?} event
              * @return {?}
              */
              function onDownProgress(event) {
                // Send the HttpResponseHeaders event if it hasn't been sent already.
                if (!sentHeaders) {
                  observer.next(partialFromXhr());
                  sentHeaders = true;
                } // Start building the download progress event to deliver on the response
                // event stream.

                /** @type {?} */


                var progressEvent = {
                  type: HttpEventType.DownloadProgress,
                  loaded: event.loaded
                }; // Set the total number of bytes in the event if it's available.

                if (event.lengthComputable) {
                  progressEvent.total = event.total;
                } // If the request was for text content and a partial response is
                // available on XMLHttpRequest, include it in the progress event
                // to allow for streaming reads.


                if (req.responseType === 'text' && !!xhr.responseText) {
                  progressEvent.partialText = xhr.responseText;
                } // Finally, fire the event.


                observer.next(progressEvent);
              }; // The upload progress event handler, which is only registered if
              // progress events are enabled.

              /** @type {?} */


              var onUpProgress =
              /**
              * @param {?} event
              * @return {?}
              */
              function onUpProgress(event) {
                // Upload progress events are simpler. Begin building the progress
                // event.

                /** @type {?} */
                var progress = {
                  type: HttpEventType.UploadProgress,
                  loaded: event.loaded
                }; // If the total number of bytes being uploaded is available, include
                // it.

                if (event.lengthComputable) {
                  progress.total = event.total;
                } // Send the event.


                observer.next(progress);
              }; // By default, register for load and error events.


              xhr.addEventListener('load', onLoad);
              xhr.addEventListener('error', onError); // Progress events are only enabled if requested.

              if (req.reportProgress) {
                // Download progress is always enabled if requested.
                xhr.addEventListener('progress', onDownProgress); // Upload progress depends on whether there is a body to upload.

                if (reqBody !== null && xhr.upload) {
                  xhr.upload.addEventListener('progress', onUpProgress);
                }
              } // Fire the request, and notify the event stream that it was fired.


              xhr.send(
              /** @type {?} */
              reqBody);
              observer.next({
                type: HttpEventType.Sent
              }); // This is the return from the Observable function, which is the
              // request cancellation handler.

              return (
                /**
                * @return {?}
                */
                function () {
                  // On a cancellation, remove all registered event listeners.
                  xhr.removeEventListener('error', onError);
                  xhr.removeEventListener('load', onLoad);

                  if (req.reportProgress) {
                    xhr.removeEventListener('progress', onDownProgress);

                    if (reqBody !== null && xhr.upload) {
                      xhr.upload.removeEventListener('progress', onUpProgress);
                    }
                  } // Finally, abort the in-flight request.


                  xhr.abort();
                }
              );
            });
          }
        }]);

        return HttpXhrBackend;
      }();

      HttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) {
        return new (t || HttpXhrBackend)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](XhrFactory));
      };

      HttpXhrBackend.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: HttpXhrBackend,
        factory: HttpXhrBackend.ɵfac
      });
      /** @nocollapse */

      HttpXhrBackend.ctorParameters = function () {
        return [{
          type: XhrFactory
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](HttpXhrBackend, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
        }], function () {
          return [{
            type: XhrFactory
          }];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/common/http/src/xsrf.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var XSRF_COOKIE_NAME = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('XSRF_COOKIE_NAME');
      /** @type {?} */

      var XSRF_HEADER_NAME = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('XSRF_HEADER_NAME');
      /**
       * Retrieves the current XSRF token to use with the next outgoing request.
       *
       * \@publicApi
       * @abstract
       */

      var HttpXsrfTokenExtractor = function HttpXsrfTokenExtractor() {
        _classCallCheck(this, HttpXsrfTokenExtractor);
      };

      if (false) {}
      /**
       * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.
       */


      var HttpXsrfCookieExtractor = /*#__PURE__*/function () {
        /**
         * @param {?} doc
         * @param {?} platform
         * @param {?} cookieName
         */
        function HttpXsrfCookieExtractor(doc, platform, cookieName) {
          _classCallCheck(this, HttpXsrfCookieExtractor);

          this.doc = doc;
          this.platform = platform;
          this.cookieName = cookieName;
          this.lastCookieString = '';
          this.lastToken = null;
          /**
           * \@internal for testing
           */

          this.parseCount = 0;
        }
        /**
         * @return {?}
         */


        _createClass(HttpXsrfCookieExtractor, [{
          key: "getToken",
          value: function getToken() {
            if (this.platform === 'server') {
              return null;
            }
            /** @type {?} */


            var cookieString = this.doc.cookie || '';

            if (cookieString !== this.lastCookieString) {
              this.parseCount++;
              this.lastToken = Object(_angular_common__WEBPACK_IMPORTED_MODULE_3__["ɵparseCookieValue"])(cookieString, this.cookieName);
              this.lastCookieString = cookieString;
            }

            return this.lastToken;
          }
        }]);

        return HttpXsrfCookieExtractor;
      }();

      HttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) {
        return new (t || HttpXsrfCookieExtractor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_3__["DOCUMENT"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](XSRF_COOKIE_NAME));
      };

      HttpXsrfCookieExtractor.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: HttpXsrfCookieExtractor,
        factory: HttpXsrfCookieExtractor.ɵfac
      });
      /** @nocollapse */

      HttpXsrfCookieExtractor.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__["DOCUMENT"]]
          }]
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"]]
          }]
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [XSRF_COOKIE_NAME]
          }]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](HttpXsrfCookieExtractor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__["DOCUMENT"]]
            }]
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"]]
            }]
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [XSRF_COOKIE_NAME]
            }]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.
       */


      var HttpXsrfInterceptor = /*#__PURE__*/function () {
        /**
         * @param {?} tokenService
         * @param {?} headerName
         */
        function HttpXsrfInterceptor(tokenService, headerName) {
          _classCallCheck(this, HttpXsrfInterceptor);

          this.tokenService = tokenService;
          this.headerName = headerName;
        }
        /**
         * @param {?} req
         * @param {?} next
         * @return {?}
         */


        _createClass(HttpXsrfInterceptor, [{
          key: "intercept",
          value: function intercept(req, next) {
            /** @type {?} */
            var lcUrl = req.url.toLowerCase(); // Skip both non-mutating requests and absolute URLs.
            // Non-mutating requests don't require a token, and absolute URLs require special handling
            // anyway as the cookie set
            // on our origin is not the same as the token expected by another origin.

            if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {
              return next.handle(req);
            }
            /** @type {?} */


            var token = this.tokenService.getToken(); // Be careful not to overwrite an existing header of the same name.

            if (token !== null && !req.headers.has(this.headerName)) {
              req = req.clone({
                headers: req.headers.set(this.headerName, token)
              });
            }

            return next.handle(req);
          }
        }]);

        return HttpXsrfInterceptor;
      }();

      HttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) {
        return new (t || HttpXsrfInterceptor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](HttpXsrfTokenExtractor), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](XSRF_HEADER_NAME));
      };

      HttpXsrfInterceptor.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: HttpXsrfInterceptor,
        factory: HttpXsrfInterceptor.ɵfac
      });
      /** @nocollapse */

      HttpXsrfInterceptor.ctorParameters = function () {
        return [{
          type: HttpXsrfTokenExtractor
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [XSRF_HEADER_NAME]
          }]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](HttpXsrfInterceptor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
        }], function () {
          return [{
            type: HttpXsrfTokenExtractor
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [XSRF_HEADER_NAME]
            }]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/common/http/src/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * An injectable `HttpHandler` that applies multiple interceptors
       * to a request before passing it to the given `HttpBackend`.
       *
       * The interceptors are loaded lazily from the injector, to allow
       * interceptors to themselves inject classes depending indirectly
       * on `HttpInterceptingHandler` itself.
       * @see `HttpInterceptor`
       */


      var HttpInterceptingHandler = /*#__PURE__*/function () {
        /**
         * @param {?} backend
         * @param {?} injector
         */
        function HttpInterceptingHandler(backend, injector) {
          _classCallCheck(this, HttpInterceptingHandler);

          this.backend = backend;
          this.injector = injector;
          this.chain = null;
        }
        /**
         * @param {?} req
         * @return {?}
         */


        _createClass(HttpInterceptingHandler, [{
          key: "handle",
          value: function handle(req) {
            if (this.chain === null) {
              /** @type {?} */
              var interceptors = this.injector.get(HTTP_INTERCEPTORS, []);
              this.chain = interceptors.reduceRight(
              /**
              * @param {?} next
              * @param {?} interceptor
              * @return {?}
              */
              function (next, interceptor) {
                return new HttpInterceptorHandler(next, interceptor);
              }, this.backend);
            }

            return this.chain.handle(req);
          }
        }]);

        return HttpInterceptingHandler;
      }();

      HttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) {
        return new (t || HttpInterceptingHandler)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](HttpBackend), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"]));
      };

      HttpInterceptingHandler.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: HttpInterceptingHandler,
        factory: HttpInterceptingHandler.ɵfac
      });
      /** @nocollapse */

      HttpInterceptingHandler.ctorParameters = function () {
        return [{
          type: HttpBackend
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](HttpInterceptingHandler, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
        }], function () {
          return [{
            type: HttpBackend
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * Constructs an `HttpHandler` that applies interceptors
       * to a request before passing it to the given `HttpBackend`.
       *
       * Use as a factory function within `HttpClientModule`.
       *
       *
       * @param {?} backend
       * @param {?=} interceptors
       * @return {?}
       */


      function interceptingHandler(backend) {
        var interceptors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

        if (!interceptors) {
          return backend;
        }

        return interceptors.reduceRight(
        /**
        * @param {?} next
        * @param {?} interceptor
        * @return {?}
        */
        function (next, interceptor) {
          return new HttpInterceptorHandler(next, interceptor);
        }, backend);
      }
      /**
       * Factory function that determines where to store JSONP callbacks.
       *
       * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist
       * in test environments. In that case, callbacks are stored on an anonymous object instead.
       *
       *
       * @return {?}
       */


      function jsonpCallbackContext() {
        if (typeof window === 'object') {
          return window;
        }

        return {};
      }
      /**
       * Configures XSRF protection support for outgoing requests.
       *
       * For a server that supports a cookie-based XSRF protection system,
       * use directly to configure XSRF protection with the correct
       * cookie and header names.
       *
       * If no names are supplied, the default cookie name is `XSRF-TOKEN`
       * and the default header name is `X-XSRF-TOKEN`.
       *
       * \@publicApi
       */


      var HttpClientXsrfModule = /*#__PURE__*/function () {
        function HttpClientXsrfModule() {
          _classCallCheck(this, HttpClientXsrfModule);
        }

        _createClass(HttpClientXsrfModule, null, [{
          key: "disable",

          /**
           * Disable the default XSRF protection.
           * @return {?}
           */
          value: function disable() {
            return {
              ngModule: HttpClientXsrfModule,
              providers: [{
                provide: HttpXsrfInterceptor,
                useClass: NoopInterceptor
              }]
            };
          }
          /**
           * Configure XSRF protection.
           * @param {?=} options An object that can specify either or both
           * cookie name or header name.
           * - Cookie name default is `XSRF-TOKEN`.
           * - Header name default is `X-XSRF-TOKEN`.
           *
           * @return {?}
           */

        }, {
          key: "withOptions",
          value: function withOptions() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            return {
              ngModule: HttpClientXsrfModule,
              providers: [options.cookieName ? {
                provide: XSRF_COOKIE_NAME,
                useValue: options.cookieName
              } : [], options.headerName ? {
                provide: XSRF_HEADER_NAME,
                useValue: options.headerName
              } : []]
            };
          }
        }]);

        return HttpClientXsrfModule;
      }();

      HttpClientXsrfModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: HttpClientXsrfModule
      });
      HttpClientXsrfModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        factory: function HttpClientXsrfModule_Factory(t) {
          return new (t || HttpClientXsrfModule)();
        },
        providers: [HttpXsrfInterceptor, {
          provide: HTTP_INTERCEPTORS,
          useExisting: HttpXsrfInterceptor,
          multi: true
        }, {
          provide: HttpXsrfTokenExtractor,
          useClass: HttpXsrfCookieExtractor
        }, {
          provide: XSRF_COOKIE_NAME,
          useValue: 'XSRF-TOKEN'
        }, {
          provide: XSRF_HEADER_NAME,
          useValue: 'X-XSRF-TOKEN'
        }]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](HttpClientXsrfModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            providers: [HttpXsrfInterceptor, {
              provide: HTTP_INTERCEPTORS,
              useExisting: HttpXsrfInterceptor,
              multi: true
            }, {
              provide: HttpXsrfTokenExtractor,
              useClass: HttpXsrfCookieExtractor
            }, {
              provide: XSRF_COOKIE_NAME,
              useValue: 'XSRF-TOKEN'
            }, {
              provide: XSRF_HEADER_NAME,
              useValue: 'X-XSRF-TOKEN'
            }]
          }]
        }], null, null);
      })();
      /**
       * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`
       * with supporting services for XSRF. Automatically imported by `HttpClientModule`.
       *
       * You can add interceptors to the chain behind `HttpClient` by binding them to the
       * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.
       *
       * \@publicApi
       */


      var HttpClientModule = function HttpClientModule() {
        _classCallCheck(this, HttpClientModule);
      };

      HttpClientModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: HttpClientModule
      });
      HttpClientModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        factory: function HttpClientModule_Factory(t) {
          return new (t || HttpClientModule)();
        },
        providers: [HttpClient, {
          provide: HttpHandler,
          useClass: HttpInterceptingHandler
        }, HttpXhrBackend, {
          provide: HttpBackend,
          useExisting: HttpXhrBackend
        }, BrowserXhr, {
          provide: XhrFactory,
          useExisting: BrowserXhr
        }],
        imports: [[HttpClientXsrfModule.withOptions({
          cookieName: 'XSRF-TOKEN',
          headerName: 'X-XSRF-TOKEN'
        })]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](HttpClientModule, {
          imports: [HttpClientXsrfModule]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](HttpClientModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            /**
             * Optional configuration for XSRF protection.
             */
            imports: [HttpClientXsrfModule.withOptions({
              cookieName: 'XSRF-TOKEN',
              headerName: 'X-XSRF-TOKEN'
            })],

            /**
             * Configures the [dependency injector](guide/glossary#injector) where it is imported
             * with supporting services for HTTP communications.
             */
            providers: [HttpClient, {
              provide: HttpHandler,
              useClass: HttpInterceptingHandler
            }, HttpXhrBackend, {
              provide: HttpBackend,
              useExisting: HttpXhrBackend
            }, BrowserXhr, {
              provide: XhrFactory,
              useExisting: BrowserXhr
            }]
          }]
        }], null, null);
      })();
      /**
       * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`
       * with supporting services for JSONP.
       * Without this module, Jsonp requests reach the backend
       * with method JSONP, where they are rejected.
       *
       * You can add interceptors to the chain behind `HttpClient` by binding them to the
       * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.
       *
       * \@publicApi
       */


      var HttpClientJsonpModule = function HttpClientJsonpModule() {
        _classCallCheck(this, HttpClientJsonpModule);
      };

      HttpClientJsonpModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: HttpClientJsonpModule
      });
      HttpClientJsonpModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        factory: function HttpClientJsonpModule_Factory(t) {
          return new (t || HttpClientJsonpModule)();
        },
        providers: [JsonpClientBackend, {
          provide: JsonpCallbackContext,
          useFactory: jsonpCallbackContext
        }, {
          provide: HTTP_INTERCEPTORS,
          useClass: JsonpInterceptor,
          multi: true
        }]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](HttpClientJsonpModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            providers: [JsonpClientBackend, {
              provide: JsonpCallbackContext,
              useFactory: jsonpCallbackContext
            }, {
              provide: HTTP_INTERCEPTORS,
              useClass: JsonpInterceptor,
              multi: true
            }]
          }]
        }], null, null);
      })();
      /**
       * @fileoverview added by tsickle
       * Generated from: packages/common/http/public_api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: packages/common/http/index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=http.js.map

      /***/

    },

    /***/
    "yjpJ":
    /*!*************************************************************!*\
      !*** ./src/app/shared/show-errors/show-errors.component.ts ***!
      \*************************************************************/

    /*! exports provided: ShowErrorsComponent */

    /***/
    function yjpJ(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ShowErrorsComponent", function () {
        return ShowErrorsComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");

      function ShowErrorsComponent_ul_0_li_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "li", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var error_r2 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](error_r2);
        }
      }

      function ShowErrorsComponent_ul_0_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "ul", 1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, ShowErrorsComponent_ul_0_li_1_Template, 2, 1, "li", 2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx_r0.listOfErrors());
        }
      }

      var ShowErrorsComponent = /*#__PURE__*/function () {
        function ShowErrorsComponent() {
          _classCallCheck(this, ShowErrorsComponent);
        }

        _createClass(ShowErrorsComponent, [{
          key: "shouldShowErrors",
          value: function shouldShowErrors() {
            return this.control && this.control.errors && (this.control.dirty || this.control.touched);
          }
        }, {
          key: "listOfErrors",
          value: function listOfErrors() {
            var _this97 = this;

            var Errors = Object.keys(this.control.errors).map(function (field) {
              return _this97.getMessage(field, _this97.control.errors[field]);
            });
            return [Errors[0]];
          }
        }, {
          key: "getMessage",
          value: function getMessage(type, params) {
            return ShowErrorsComponent.errorMessages[type](params);
          }
        }]);

        return ShowErrorsComponent;
      }();

      ShowErrorsComponent.errorMessages = {
        required: function required() {
          return 'This field is required';
        },
        validateEmail: function validateEmail() {
          return 'Email is Invalid!';
        },
        validatePassword: function validatePassword() {
          return 'Password should match the criteria';
        }
      };

      ShowErrorsComponent.ɵfac = function ShowErrorsComponent_Factory(t) {
        return new (t || ShowErrorsComponent)();
      };

      ShowErrorsComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: ShowErrorsComponent,
        selectors: [["app-show-errors"]],
        inputs: {
          control: "control"
        },
        decls: 1,
        vars: 1,
        consts: [["class", "error-list", 4, "ngIf"], [1, "error-list"], ["style", "color: red", 4, "ngFor", "ngForOf"], [2, "color", "red"]],
        template: function ShowErrorsComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, ShowErrorsComponent_ul_0_Template, 2, 1, "ul", 0);
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.shouldShowErrors());
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["NgIf"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgForOf"]],
        styles: ["\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NoYXJlZC9zaG93LWVycm9ycy9zaG93LWVycm9ycy5jb21wb25lbnQuY3NzIn0= */"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ShowErrorsComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'app-show-errors',
            templateUrl: './show-errors.component.html',
            styleUrls: ['./show-errors.component.css']
          }]
        }], null, {
          control: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /***/

    }
  }]);
})();
//# sourceMappingURL=default~dashboard-dashboard-module~getting-setup-getting-setup-module~insurance-insurance-module~inv~4ce9ca73-es5.js.map