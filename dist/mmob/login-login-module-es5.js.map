{"version":3,"sources":["webpack:///src/app/login/reset-password/reset-password.component.ts","webpack:///src/app/login/reset-password/reset-password.component.html","webpack:///src/app/login/verify-email/verify-email.component.ts","webpack:///src/app/login/verify-email/verify-email.component.html","webpack:///src/app/login/forgot-password/forgot-password.component.ts","webpack:///src/app/login/forgot-password/forgot-password.component.html","webpack:///src/app/login/login.module.ts","webpack:///src/app/login/login-routing.module.ts","webpack:///src/app/login/login/login.component.ts","webpack:///src/app/login/login/login.component.html"],"names":["ResetPasswordComponent","assetsPipe","formBuilder","fieldsValidateService","route","modalService","navigationUrl","initializeForm","resetPasswordForm","group","password","required","confirmPassword","invalid","validateAllFormFields","onNext","selector","templateUrl","styleUrls","VerifyEmailComponent","verifyEmailForm","ForgotPasswordComponent","forgotPasswordForm","email","emailCustomValidation","navigate","LoginModule","declarations","imports","routes","path","component","LoginRoutingModule","forChild","exports","LoginComponent","loginForm","federatedSignIn"],"mappings":"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","file":"login-login-module-es5.js","sourcesContent":["import {Component, OnInit} from '@angular/core';\r\nimport {AssetsPathPipe} from 'src/app/shared/pipes/assets-path.pipe';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {FieldsValidateService} from 'src/app/service/fields-validate.service';\r\nimport {Router} from '@angular/router';\r\nimport {NavigationUrl} from 'src/app/shared/constant/navigation-url.constant';\r\nimport {NgbModal} from '@ng-bootstrap/ng-bootstrap';\r\n\r\n\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  templateUrl: './reset-password.component.html',\r\n  styleUrls: ['./reset-password.component.css']\r\n})\r\nexport class ResetPasswordComponent implements OnInit {\r\n  resetPasswordForm: FormGroup;\r\n  //Navigation Url Constanst\r\n  navigationUrl = NavigationUrl;\r\n  constructor(\r\n    private assetsPipe: AssetsPathPipe,\r\n    private formBuilder: FormBuilder,\r\n    private fieldsValidateService: FieldsValidateService,\r\n    private route: Router,\r\n    private modalService: NgbModal) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initializeForm();\r\n  }\r\n\r\n  /**\r\n   *  This function will used to Prepare Form Fields.\r\n   */\r\n  initializeForm() {\r\n    this.resetPasswordForm = this.formBuilder.group({\r\n      password: ['', [Validators.required]],\r\n      confirmPassword: ['', [Validators.required]],\r\n    });\r\n  }\r\n  //this function validate form and redirect to next step\r\n  onNext() {\r\n    if (this.resetPasswordForm.invalid) {\r\n      return this.fieldsValidateService.validateAllFormFields(this.resetPasswordForm);\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"align-center login\">\r\n  <div class=\"site-logo\"><img alt=\"logo\" src=\"{{'images/logo.png' | assetsPath}}\"></div>\r\n  <h3>Reset Password</h3>\r\n  <form [formGroup]=\"resetPasswordForm\">\r\n    <div class=\"form-group\">\r\n      <label>Enter new password</label>\r\n      <input class=\"form-control\" formControlName=\"password\" placeholder=\"************\" type=\"password\">\r\n      <app-show-errors [control]=\"resetPasswordForm.controls.password\"></app-show-errors>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Re-enter new password</label>\r\n      <input class=\"form-control\" formControlName=\"confirmPassword\" placeholder=\"************\" type=\"password\">\r\n      <app-show-errors [control]=\"resetPasswordForm.controls.confirmPassword\"></app-show-errors>\r\n    </div>\r\n    <input (click)=\"onNext()\" type=\"button\" value=\"confirm\">\r\n  </form>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {AssetsPathPipe} from 'src/app/shared/pipes/assets-path.pipe';\r\nimport {FormBuilder, FormGroup} from '@angular/forms';\r\nimport {FieldsValidateService} from 'src/app/service/fields-validate.service';\r\nimport {Router} from '@angular/router';\r\nimport {NavigationUrl} from 'src/app/shared/constant/navigation-url.constant';\r\nimport {NgbModal} from '@ng-bootstrap/ng-bootstrap';\r\n\r\n\r\n@Component({\r\n  selector: 'app-verify-email',\r\n  templateUrl: './verify-email.component.html',\r\n  styleUrls: ['./verify-email.component.css']\r\n})\r\nexport class VerifyEmailComponent implements OnInit {\r\n  verifyEmailForm: FormGroup;\r\n  //Navigation Url Constanst\r\n  navigationUrl = NavigationUrl;\r\n  constructor(\r\n    private assetsPipe: AssetsPathPipe,\r\n    private formBuilder: FormBuilder,\r\n    private fieldsValidateService: FieldsValidateService,\r\n    private route: Router,\r\n    private modalService: NgbModal) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initializeForm();\r\n  }\r\n\r\n  /**\r\n   *  This function will used to Prepare Form Fields.\r\n   */\r\n  initializeForm() {\r\n    this.verifyEmailForm = this.formBuilder.group({});\r\n  }\r\n  //this function validate form and redirect to next step\r\n  onNext() {\r\n    if (this.verifyEmailForm.invalid) {\r\n      return this.fieldsValidateService.validateAllFormFields(this.verifyEmailForm);\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"align-center login forgot verify\">\r\n  <a class=\"back-btn\" href=\"reset-password.html\"><</a>\r\n  <div class=\"site-logo\"><img alt=\"logo\" src=\"{{'images/logo.png' | assetsPath}}\"></div>\r\n  <h3>Verify Your Email</h3>\r\n  <form [formGroup]=\"verifyEmailForm\">\r\n    <h5>Enter the 4 digit code sent to your <br>email</h5>\r\n    <div class=\"form-group\">\r\n      <input class=\"form-control\" id=\"first\" maxlength=\"1\" onkeyup=\"movetoNext(this, 'second')\" type=\"text\">\r\n      <input class=\"form-control\" id=\"second\" maxlength=\"1\" onkeyup=\"movetoNext(this, 'third')\" type=\"text\">\r\n      <input class=\"form-control\" id=\"third\" maxlength=\"1\" onkeyup=\"movetoNext(this, 'last')\" type=\"text\">\r\n      <input class=\"form-control\" id=\"last\" maxlength=\"1\" type=\"text\">\r\n    </div>\r\n    <p><a class=\"resend\" href=\"#\">resend code</a></p>\r\n    <input (click)=\"onNext()\" type=\"button\" value=\"confirm\">\r\n  </form>\r\n</div>\r\n\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {AssetsPathPipe} from 'src/app/shared/pipes/assets-path.pipe';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {FieldsValidateService} from 'src/app/service/fields-validate.service';\r\nimport {Router} from '@angular/router';\r\nimport {NavigationUrl} from 'src/app/shared/constant/navigation-url.constant';\r\nimport {CustomValidators} from 'src/app/shared/validators/custom-validators';\r\nimport {NgbModal} from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n  selector: 'app-forgot-password',\r\n  templateUrl: './forgot-password.component.html',\r\n  styleUrls: ['./forgot-password.component.css']\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {\r\n  forgotPasswordForm: FormGroup;\r\n  //Navigation Url Constanst\r\n  navigationUrl = NavigationUrl;\r\n  constructor(\r\n    private assetsPipe: AssetsPathPipe,\r\n    private formBuilder: FormBuilder,\r\n    private fieldsValidateService: FieldsValidateService,\r\n    private route: Router,\r\n    private modalService: NgbModal) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initializeForm();\r\n  }\r\n\r\n  /**\r\n   *  This function will used to Prepare Form Fields.\r\n   */\r\n  initializeForm() {\r\n    this.forgotPasswordForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, CustomValidators.emailCustomValidation]],\r\n    });\r\n  }\r\n  //this function validate form and redirect to next step\r\n  onNext() {\r\n    if (this.forgotPasswordForm.invalid) {\r\n      return this.fieldsValidateService.validateAllFormFields(this.forgotPasswordForm);\r\n    } else {\r\n      this.route.navigate(['login/reset-password']);\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"align-center login forgot\">\r\n  <a class=\"back-btn\" href=\"#\"></a>\r\n  <div class=\"site-logo\"><img alt=\"logo\" src=\"{{'images/logo.png' | assetsPath}}\"></div>\r\n  <h3>Forgot Password?</h3>\r\n  <form [formGroup]=\"forgotPasswordForm\">\r\n    <h5>Enter the email address associated<br> with your account</h5>\r\n    <div class=\"form-group\">\r\n      <input class=\"form-control\" formControlName=\"email\" placeholder=\"Type your Email\" type=\"text\">\r\n      <app-show-errors [control]=\"forgotPasswordForm.controls.email\"></app-show-errors>\r\n    </div>\r\n    <input (click)=\"onNext()\" type=\"button\" value=\"Next\">\r\n  </form>\r\n</div>\r\n","import {NgModule} from '@angular/core';\r\nimport {LoginRoutingModule} from './login-routing.module';\r\nimport {LoginComponent} from './login/login.component';\r\nimport {ForgotPasswordComponent} from './forgot-password/forgot-password.component';\r\nimport {ResetPasswordComponent} from './reset-password/reset-password.component';\r\nimport {VerifyEmailComponent} from './verify-email/verify-email.component';\r\nimport {LayoutModule} from '../layout/layout.module';\r\nimport {SharedModule} from '../shared/shared.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [LoginComponent, ForgotPasswordComponent, ResetPasswordComponent, VerifyEmailComponent],\r\n  imports: [\r\n    LoginRoutingModule,\r\n    LayoutModule,\r\n    SharedModule,\r\n  ]\r\n})\r\nexport class LoginModule {\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {RouterModule, Routes} from '@angular/router';\r\nimport {LoginComponent} from './login/login.component';\r\nimport {ForgotPasswordComponent} from './forgot-password/forgot-password.component';\r\nimport {ResetPasswordComponent} from './reset-password/reset-password.component';\r\nimport {VerifyEmailComponent} from './verify-email/verify-email.component';\r\n\r\nconst routes: Routes = [\r\n  {path: '', component: LoginComponent},\r\n  {path: 'forgot-password', component: ForgotPasswordComponent},\r\n  {path: 'reset-password', component: ResetPasswordComponent},\r\n  {path: 'verify-email', component: VerifyEmailComponent},\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class LoginRoutingModule {\r\n}\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {AssetsPathPipe} from 'src/app/shared/pipes/assets-path.pipe';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {FieldsValidateService} from 'src/app/service/fields-validate.service';\r\nimport {Router} from '@angular/router';\r\nimport {NavigationUrl} from 'src/app/shared/constant/navigation-url.constant';\r\nimport {CustomValidators} from 'src/app/shared/validators/custom-validators';\r\nimport {NgbModal} from '@ng-bootstrap/ng-bootstrap';\r\nimport { Auth } from 'aws-amplify';\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  //Navigation Url Constanst\r\n  navigationUrl = NavigationUrl;\r\n  constructor(\r\n    private assetsPipe: AssetsPathPipe,\r\n    private formBuilder: FormBuilder,\r\n    private fieldsValidateService: FieldsValidateService,\r\n    private route: Router,\r\n    private modalService: NgbModal) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initializeForm();\r\n  }\r\n\r\n  /**\r\n   *  This function will used to Prepare Form Fields.\r\n   */\r\n  initializeForm() {\r\n    this.loginForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, CustomValidators.emailCustomValidation]],\r\n      password: ['', [Validators.required]],\r\n    });\r\n  }\r\n  //this function validate form and redirect to next step\r\n  onNext() {\r\n    Auth.federatedSignIn();\r\n    // if (this.loginForm.invalid) {\r\n    //   return this.fieldsValidateService.validateAllFormFields(this.loginForm);\r\n    // } else {\r\n    //   this.route.navigate(['dashboard']);\r\n    // }\r\n  }\r\n\r\n}\r\n","<div class=\"align-center login\">\r\n  <div class=\"site-logo\"><img alt=\"logo\" src=\"{{'images/logo.png' | assetsPath}}\"></div>\r\n  <h3>Login</h3>\r\n  <form [formGroup]=\"loginForm\">\r\n    <div class=\"form-group\">\r\n      <label>Email</label>\r\n      <input class=\"form-control\" formControlName=\"email\" placeholder=\"Type your Email\" type=\"text\">\r\n      <app-show-errors [control]=\"loginForm.controls.email\"></app-show-errors>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Password</label>\r\n      <input class=\"form-control\" formControlName=\"password\" placeholder=\"************\" type=\"password\" >\r\n      <app-show-errors [control]=\"loginForm.controls.password\"></app-show-errors>\r\n    </div>\r\n    <p class=\"forgot-pwd\"><a [routerLink]=\"['../login/forgot-password']\"><small>Forgot password?</small></a></p>\r\n    <input (click)=\"onNext()\" type=\"button\" value=\"login\">\r\n    <p>Don't have an account? <a [routerLink]=\"[navigationUrl.GETTING_SETUP_ROUTE]\">Sign Up</a></p>\r\n  </form>\r\n</div>\r\n"]}