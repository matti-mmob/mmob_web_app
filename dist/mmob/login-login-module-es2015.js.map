{"version":3,"sources":["./src/app/login/reset-password/reset-password.component.ts","./src/app/login/reset-password/reset-password.component.html","./src/app/login/verify-email/verify-email.component.ts","./src/app/login/verify-email/verify-email.component.html","./src/app/login/forgot-password/forgot-password.component.ts","./src/app/login/forgot-password/forgot-password.component.html","./src/app/login/login.module.ts","./src/app/login/login-routing.module.ts","./src/app/login/login/login.component.ts","./src/app/login/login/login.component.html"],"names":[],"mappings":"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","file":"login-login-module-es2015.js","sourcesContent":["import {Component, OnInit} from '@angular/core';\r\nimport {AssetsPathPipe} from 'src/app/shared/pipes/assets-path.pipe';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {FieldsValidateService} from 'src/app/service/fields-validate.service';\r\nimport {Router} from '@angular/router';\r\nimport {NavigationUrl} from 'src/app/shared/constant/navigation-url.constant';\r\nimport {NgbModal} from '@ng-bootstrap/ng-bootstrap';\r\n\r\n\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  templateUrl: './reset-password.component.html',\r\n  styleUrls: ['./reset-password.component.css']\r\n})\r\nexport class ResetPasswordComponent implements OnInit {\r\n  resetPasswordForm: FormGroup;\r\n  //Navigation Url Constanst\r\n  navigationUrl = NavigationUrl;\r\n  constructor(\r\n    private assetsPipe: AssetsPathPipe,\r\n    private formBuilder: FormBuilder,\r\n    private fieldsValidateService: FieldsValidateService,\r\n    private route: Router,\r\n    private modalService: NgbModal) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initializeForm();\r\n  }\r\n\r\n  /**\r\n   *  This function will used to Prepare Form Fields.\r\n   */\r\n  initializeForm() {\r\n    this.resetPasswordForm = this.formBuilder.group({\r\n      password: ['', [Validators.required]],\r\n      confirmPassword: ['', [Validators.required]],\r\n    });\r\n  }\r\n  //this function validate form and redirect to next step\r\n  onNext() {\r\n    if (this.resetPasswordForm.invalid) {\r\n      return this.fieldsValidateService.validateAllFormFields(this.resetPasswordForm);\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"align-center login\">\r\n  <div class=\"site-logo\"><img alt=\"logo\" src=\"{{'images/logo.png' | assetsPath}}\"></div>\r\n  <h3>Reset Password</h3>\r\n  <form [formGroup]=\"resetPasswordForm\">\r\n    <div class=\"form-group\">\r\n      <label>Enter new password</label>\r\n      <input class=\"form-control\" formControlName=\"password\" placeholder=\"************\" type=\"password\">\r\n      <app-show-errors [control]=\"resetPasswordForm.controls.password\"></app-show-errors>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Re-enter new password</label>\r\n      <input class=\"form-control\" formControlName=\"confirmPassword\" placeholder=\"************\" type=\"password\">\r\n      <app-show-errors [control]=\"resetPasswordForm.controls.confirmPassword\"></app-show-errors>\r\n    </div>\r\n    <input (click)=\"onNext()\" type=\"button\" value=\"confirm\">\r\n  </form>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {AssetsPathPipe} from 'src/app/shared/pipes/assets-path.pipe';\r\nimport {FormBuilder, FormGroup} from '@angular/forms';\r\nimport {FieldsValidateService} from 'src/app/service/fields-validate.service';\r\nimport {Router} from '@angular/router';\r\nimport {NavigationUrl} from 'src/app/shared/constant/navigation-url.constant';\r\nimport {NgbModal} from '@ng-bootstrap/ng-bootstrap';\r\n\r\n\r\n@Component({\r\n  selector: 'app-verify-email',\r\n  templateUrl: './verify-email.component.html',\r\n  styleUrls: ['./verify-email.component.css']\r\n})\r\nexport class VerifyEmailComponent implements OnInit {\r\n  verifyEmailForm: FormGroup;\r\n  //Navigation Url Constanst\r\n  navigationUrl = NavigationUrl;\r\n  constructor(\r\n    private assetsPipe: AssetsPathPipe,\r\n    private formBuilder: FormBuilder,\r\n    private fieldsValidateService: FieldsValidateService,\r\n    private route: Router,\r\n    private modalService: NgbModal) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initializeForm();\r\n  }\r\n\r\n  /**\r\n   *  This function will used to Prepare Form Fields.\r\n   */\r\n  initializeForm() {\r\n    this.verifyEmailForm = this.formBuilder.group({});\r\n  }\r\n  //this function validate form and redirect to next step\r\n  onNext() {\r\n    if (this.verifyEmailForm.invalid) {\r\n      return this.fieldsValidateService.validateAllFormFields(this.verifyEmailForm);\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"align-center login forgot verify\">\r\n  <a class=\"back-btn\" href=\"reset-password.html\"><</a>\r\n  <div class=\"site-logo\"><img alt=\"logo\" src=\"{{'images/logo.png' | assetsPath}}\"></div>\r\n  <h3>Verify Your Email</h3>\r\n  <form [formGroup]=\"verifyEmailForm\">\r\n    <h5>Enter the 4 digit code sent to your <br>email</h5>\r\n    <div class=\"form-group\">\r\n      <input class=\"form-control\" id=\"first\" maxlength=\"1\" onkeyup=\"movetoNext(this, 'second')\" type=\"text\">\r\n      <input class=\"form-control\" id=\"second\" maxlength=\"1\" onkeyup=\"movetoNext(this, 'third')\" type=\"text\">\r\n      <input class=\"form-control\" id=\"third\" maxlength=\"1\" onkeyup=\"movetoNext(this, 'last')\" type=\"text\">\r\n      <input class=\"form-control\" id=\"last\" maxlength=\"1\" type=\"text\">\r\n    </div>\r\n    <p><a class=\"resend\" href=\"#\">resend code</a></p>\r\n    <input (click)=\"onNext()\" type=\"button\" value=\"confirm\">\r\n  </form>\r\n</div>\r\n\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {AssetsPathPipe} from 'src/app/shared/pipes/assets-path.pipe';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {FieldsValidateService} from 'src/app/service/fields-validate.service';\r\nimport {Router} from '@angular/router';\r\nimport {NavigationUrl} from 'src/app/shared/constant/navigation-url.constant';\r\nimport {CustomValidators} from 'src/app/shared/validators/custom-validators';\r\nimport {NgbModal} from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n  selector: 'app-forgot-password',\r\n  templateUrl: './forgot-password.component.html',\r\n  styleUrls: ['./forgot-password.component.css']\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {\r\n  forgotPasswordForm: FormGroup;\r\n  //Navigation Url Constanst\r\n  navigationUrl = NavigationUrl;\r\n  constructor(\r\n    private assetsPipe: AssetsPathPipe,\r\n    private formBuilder: FormBuilder,\r\n    private fieldsValidateService: FieldsValidateService,\r\n    private route: Router,\r\n    private modalService: NgbModal) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initializeForm();\r\n  }\r\n\r\n  /**\r\n   *  This function will used to Prepare Form Fields.\r\n   */\r\n  initializeForm() {\r\n    this.forgotPasswordForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, CustomValidators.emailCustomValidation]],\r\n    });\r\n  }\r\n  //this function validate form and redirect to next step\r\n  onNext() {\r\n    if (this.forgotPasswordForm.invalid) {\r\n      return this.fieldsValidateService.validateAllFormFields(this.forgotPasswordForm);\r\n    } else {\r\n      this.route.navigate(['login/reset-password']);\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"align-center login forgot\">\r\n  <a class=\"back-btn\" href=\"#\"></a>\r\n  <div class=\"site-logo\"><img alt=\"logo\" src=\"{{'images/logo.png' | assetsPath}}\"></div>\r\n  <h3>Forgot Password?</h3>\r\n  <form [formGroup]=\"forgotPasswordForm\">\r\n    <h5>Enter the email address associated<br> with your account</h5>\r\n    <div class=\"form-group\">\r\n      <input class=\"form-control\" formControlName=\"email\" placeholder=\"Type your Email\" type=\"text\">\r\n      <app-show-errors [control]=\"forgotPasswordForm.controls.email\"></app-show-errors>\r\n    </div>\r\n    <input (click)=\"onNext()\" type=\"button\" value=\"Next\">\r\n  </form>\r\n</div>\r\n","import {NgModule} from '@angular/core';\r\nimport {LoginRoutingModule} from './login-routing.module';\r\nimport {LoginComponent} from './login/login.component';\r\nimport {ForgotPasswordComponent} from './forgot-password/forgot-password.component';\r\nimport {ResetPasswordComponent} from './reset-password/reset-password.component';\r\nimport {VerifyEmailComponent} from './verify-email/verify-email.component';\r\nimport {LayoutModule} from '../layout/layout.module';\r\nimport {SharedModule} from '../shared/shared.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [LoginComponent, ForgotPasswordComponent, ResetPasswordComponent, VerifyEmailComponent],\r\n  imports: [\r\n    LoginRoutingModule,\r\n    LayoutModule,\r\n    SharedModule,\r\n  ]\r\n})\r\nexport class LoginModule {\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {RouterModule, Routes} from '@angular/router';\r\nimport {LoginComponent} from './login/login.component';\r\nimport {ForgotPasswordComponent} from './forgot-password/forgot-password.component';\r\nimport {ResetPasswordComponent} from './reset-password/reset-password.component';\r\nimport {VerifyEmailComponent} from './verify-email/verify-email.component';\r\n\r\nconst routes: Routes = [\r\n  {path: '', component: LoginComponent},\r\n  {path: 'forgot-password', component: ForgotPasswordComponent},\r\n  {path: 'reset-password', component: ResetPasswordComponent},\r\n  {path: 'verify-email', component: VerifyEmailComponent},\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class LoginRoutingModule {\r\n}\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {AssetsPathPipe} from 'src/app/shared/pipes/assets-path.pipe';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {FieldsValidateService} from 'src/app/service/fields-validate.service';\r\nimport {Router} from '@angular/router';\r\nimport {NavigationUrl} from 'src/app/shared/constant/navigation-url.constant';\r\nimport {CustomValidators} from 'src/app/shared/validators/custom-validators';\r\nimport {NgbModal} from '@ng-bootstrap/ng-bootstrap';\r\nimport { Auth } from 'aws-amplify';\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  //Navigation Url Constanst\r\n  navigationUrl = NavigationUrl;\r\n  constructor(\r\n    private assetsPipe: AssetsPathPipe,\r\n    private formBuilder: FormBuilder,\r\n    private fieldsValidateService: FieldsValidateService,\r\n    private route: Router,\r\n    private modalService: NgbModal) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initializeForm();\r\n  }\r\n\r\n  /**\r\n   *  This function will used to Prepare Form Fields.\r\n   */\r\n  initializeForm() {\r\n    this.loginForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, CustomValidators.emailCustomValidation]],\r\n      password: ['', [Validators.required]],\r\n    });\r\n  }\r\n  //this function validate form and redirect to next step\r\n  onNext() {\r\n    Auth.federatedSignIn();\r\n    // if (this.loginForm.invalid) {\r\n    //   return this.fieldsValidateService.validateAllFormFields(this.loginForm);\r\n    // } else {\r\n    //   this.route.navigate(['dashboard']);\r\n    // }\r\n  }\r\n\r\n}\r\n","<div class=\"align-center login\">\r\n  <div class=\"site-logo\"><img alt=\"logo\" src=\"{{'images/logo.png' | assetsPath}}\"></div>\r\n  <h3>Login</h3>\r\n  <form [formGroup]=\"loginForm\">\r\n    <div class=\"form-group\">\r\n      <label>Email</label>\r\n      <input class=\"form-control\" formControlName=\"email\" placeholder=\"Type your Email\" type=\"text\">\r\n      <app-show-errors [control]=\"loginForm.controls.email\"></app-show-errors>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Password</label>\r\n      <input class=\"form-control\" formControlName=\"password\" placeholder=\"************\" type=\"password\" >\r\n      <app-show-errors [control]=\"loginForm.controls.password\"></app-show-errors>\r\n    </div>\r\n    <p class=\"forgot-pwd\"><a [routerLink]=\"['../login/forgot-password']\"><small>Forgot password?</small></a></p>\r\n    <input (click)=\"onNext()\" type=\"button\" value=\"login\">\r\n    <p>Don't have an account? <a [routerLink]=\"[navigationUrl.GETTING_SETUP_ROUTE]\">Sign Up</a></p>\r\n  </form>\r\n</div>\r\n"],"sourceRoot":"webpack:///"}